/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dms.panels;

import static dms.panels.Journals.journalPostDatePanel;
import static dms.panels.Journals.journalReversalDatePanel;
import dms.util.AccountingUtil;
import dms.windows.AccountingWindow;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lester Ariel Mesa
 */
public class ToolsPanel extends javax.swing.JPanel {

	private static ToolsPanel instance = null;

	public static ToolsPanel getInstance() {
		if (instance == null) {
			instance = new ToolsPanel();
		}
		return instance;
	}

	public ToolsPanel() {
		initComponents();

		Calendar c = Calendar.getInstance();
		if (roEndDate.getDate() == null) {
			roEndDate.setDate(c.getTime());
		}
		if (roStartDate.getDate() == null) {
			c.add(Calendar.DATE, 1 - c.get(Calendar.DATE));
			roStartDate.setDate(c.getTime());
		}

		c = Calendar.getInstance();
		if (collectionEndDate.getDate() == null) {
			collectionEndDate.setDate(c.getTime());
		}
		if (collectionStartDate.getDate() == null) {
			c.add(Calendar.DATE, 1 - c.get(Calendar.DATE));
			collectionStartDate.setDate(c.getTime());
		}

		c = Calendar.getInstance();
		if (dealsEndDate.getDate() == null) {
			dealsEndDate.setDate(c.getTime());
		}
		if (dealsStartDate.getDate() == null) {
			c.add(Calendar.DATE, 1 - c.get(Calendar.DATE));
			dealsStartDate.setDate(c.getTime());
		}

		reloadAccountingMaps();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {
                java.awt.GridBagConstraints gridBagConstraints;

                buttonGroup1 = new javax.swing.ButtonGroup();
                buttonGroup2 = new javax.swing.ButtonGroup();
                buttonGroup3 = new javax.swing.ButtonGroup();
                jTabbedPane1 = new javax.swing.JTabbedPane();
                jPanel3 = new javax.swing.JPanel();
                jPanel1 = new javax.swing.JPanel();
                jLabel134 = new javax.swing.JLabel();
                dealsStartDate = new com.toedter.calendar.JDateChooser();
                jLabel135 = new javax.swing.JLabel();
                dealsEndDate = new com.toedter.calendar.JDateChooser();
                jButton49 = new javax.swing.JButton();
                jButton1 = new javax.swing.JButton();
                jPanel11 = new javax.swing.JPanel();
                journalRetailRadio = new javax.swing.JRadioButton();
                journalWholesaleRadio = new javax.swing.JRadioButton();
                journalPostedRadio = new javax.swing.JRadioButton();
                ROCount = new javax.swing.JLabel();
                jPanel2 = new javax.swing.JPanel();
                jScrollPane25 = new javax.swing.JScrollPane();
                journalDealsTable = new javax.swing.JTable();
                DealsDeleted = new javax.swing.JPanel();
                jPanel5 = new javax.swing.JPanel();
                jLabel136 = new javax.swing.JLabel();
                dealsDeletedStartDate = new com.toedter.calendar.JDateChooser();
                jLabel137 = new javax.swing.JLabel();
                dealsDeletedEndDate = new com.toedter.calendar.JDateChooser();
                jButton50 = new javax.swing.JButton();
                jButton2 = new javax.swing.JButton();
                jPanel15 = new javax.swing.JPanel();
                journalRetailsDeletedRadio = new javax.swing.JRadioButton();
                journalWholesaleDeletedRadio = new javax.swing.JRadioButton();
                ROCount1 = new javax.swing.JLabel();
                jPanel6 = new javax.swing.JPanel();
                jScrollPane26 = new javax.swing.JScrollPane();
                journalDealsDeletedTable = new javax.swing.JTable();
                jPanel7 = new javax.swing.JPanel();
                jPanel8 = new javax.swing.JPanel();
                jLabel138 = new javax.swing.JLabel();
                roStartDate = new com.toedter.calendar.JDateChooser();
                jLabel139 = new javax.swing.JLabel();
                roEndDate = new com.toedter.calendar.JDateChooser();
                jLabel140 = new javax.swing.JLabel();
                postDate = new com.toedter.calendar.JDateChooser();
                jButton51 = new javax.swing.JButton();
                jButton3 = new javax.swing.JButton();
                jPanel9 = new javax.swing.JPanel();
                inprogressRadioButton = new javax.swing.JRadioButton();
                completedRadioButton = new javax.swing.JRadioButton();
                closedRadioButton = new javax.swing.JRadioButton();
                jPanel10 = new javax.swing.JPanel();
                jScrollPane27 = new javax.swing.JScrollPane();
                journalROTable = new javax.swing.JTable();
                Collections = new javax.swing.JPanel();
                jPanel12 = new javax.swing.JPanel();
                jLabel141 = new javax.swing.JLabel();
                collectionStartDate = new com.toedter.calendar.JDateChooser();
                jLabel142 = new javax.swing.JLabel();
                collectionEndDate = new com.toedter.calendar.JDateChooser();
                jButton52 = new javax.swing.JButton();
                collectionsPostToAccounting = new javax.swing.JButton();
                jPanel13 = new javax.swing.JPanel();
                dealsRadioButton = new javax.swing.JRadioButton();
                serviceRadioButton = new javax.swing.JRadioButton();
                othersRadioButton = new javax.swing.JRadioButton();
                jPanel14 = new javax.swing.JPanel();
                jScrollPane28 = new javax.swing.JScrollPane();
                journalCollectionsTable = new javax.swing.JTable();
                jPanel4 = new javax.swing.JPanel();
                jSplitPane1 = new javax.swing.JSplitPane();
                jPanel17 = new javax.swing.JPanel();
                jScrollPane29 = new javax.swing.JScrollPane();
                bornAgainDealsTable = new javax.swing.JTable();
                jPanel16 = new javax.swing.JPanel();
                jScrollPane3 = new javax.swing.JScrollPane();
                jTable3 = new javax.swing.JTable();
                jPanel18 = new javax.swing.JPanel();
                jSplitPane2 = new javax.swing.JSplitPane();
                jPanel19 = new javax.swing.JPanel();
                jTextField1 = new javax.swing.JTextField();
                jTextField2 = new javax.swing.JTextField();
                jTextField3 = new javax.swing.JTextField();
                jComboBox1 = new javax.swing.JComboBox();
                mapGLCombo = new javax.swing.JComboBox();
                jTextField4 = new javax.swing.JTextField();
                jButton4 = new javax.swing.JButton();
                jPanel20 = new javax.swing.JPanel();
                jScrollPane1 = new javax.swing.JScrollPane();
                jTable1 = new javax.swing.JTable();

                org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(dms.DMSApp.class).getContext().getResourceMap(ToolsPanel.class);
                setBackground(resourceMap.getColor("Form.background")); // NOI18N
                setName("Form"); // NOI18N
                setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

                jTabbedPane1.setName("jTabbedPane1"); // NOI18N

                jPanel3.setName("jPanel3"); // NOI18N
                jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

                jPanel1.setMaximumSize(new java.awt.Dimension(900, 30));
                jPanel1.setMinimumSize(new java.awt.Dimension(900, 30));
                jPanel1.setName("jPanel1"); // NOI18N
                jPanel1.setPreferredSize(new java.awt.Dimension(900, 30));

                jLabel134.setText(resourceMap.getString("jLabel134.text")); // NOI18N
                jLabel134.setName("jLabel134"); // NOI18N
                jPanel1.add(jLabel134);

                dealsStartDate.setDateFormatString(resourceMap.getString("dealsStartDate.dateFormatString")); // NOI18N
                dealsStartDate.setName("dealsStartDate"); // NOI18N
                jPanel1.add(dealsStartDate);

                jLabel135.setText(resourceMap.getString("jLabel135.text")); // NOI18N
                jLabel135.setName("jLabel135"); // NOI18N
                jPanel1.add(jLabel135);

                dealsEndDate.setDateFormatString(resourceMap.getString("dealsEndDate.dateFormatString")); // NOI18N
                dealsEndDate.setName("dealsEndDate"); // NOI18N
                jPanel1.add(dealsEndDate);

                jButton49.setText(resourceMap.getString("jButton49.text")); // NOI18N
                jButton49.setName("jButton49"); // NOI18N
                jButton49.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                jButton49refreshButtonsClicked(evt);
                        }
                });
                jPanel1.add(jButton49);

                jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
                jButton1.setName("jButton1"); // NOI18N
                jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                jButton1MouseClicked(evt);
                        }
                });
                jPanel1.add(jButton1);

                jPanel3.add(jPanel1);

                jPanel11.setMinimumSize(new java.awt.Dimension(960, 23));
                jPanel11.setName("jPanel11"); // NOI18N
                jPanel11.setPreferredSize(new java.awt.Dimension(960, 23));

                buttonGroup1.add(journalRetailRadio);
                journalRetailRadio.setText(resourceMap.getString("journalRetailRadio.text")); // NOI18N
                journalRetailRadio.setName("journalRetailRadio"); // NOI18N
                journalRetailRadio.setOpaque(false);
                journalRetailRadio.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                journalRetailRadiojournalsTypeRadioButton(evt);
                        }
                });
                jPanel11.add(journalRetailRadio);

                buttonGroup1.add(journalWholesaleRadio);
                journalWholesaleRadio.setText(resourceMap.getString("journalWholesaleRadio.text")); // NOI18N
                journalWholesaleRadio.setName("journalWholesaleRadio"); // NOI18N
                journalWholesaleRadio.setOpaque(false);
                journalWholesaleRadio.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                journalWholesaleRadiojournalsTypeRadioButton(evt);
                        }
                });
                jPanel11.add(journalWholesaleRadio);

                buttonGroup1.add(journalPostedRadio);
                journalPostedRadio.setText(resourceMap.getString("journalPostedRadio.text")); // NOI18N
                journalPostedRadio.setName("journalPostedRadio"); // NOI18N
                journalPostedRadio.setOpaque(false);
                journalPostedRadio.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                journalPostedRadioMouseClicked(evt);
                        }
                });
                jPanel11.add(journalPostedRadio);

                ROCount.setText(resourceMap.getString("ROCount.text")); // NOI18N
                ROCount.setMaximumSize(new java.awt.Dimension(57, 23));
                ROCount.setMinimumSize(new java.awt.Dimension(57, 23));
                ROCount.setName("ROCount"); // NOI18N
                ROCount.setPreferredSize(new java.awt.Dimension(57, 23));
                jPanel11.add(ROCount);

                jPanel3.add(jPanel11);

                jPanel2.setMinimumSize(new java.awt.Dimension(960, 600));
                jPanel2.setName("jPanel2"); // NOI18N
                jPanel2.setPreferredSize(new java.awt.Dimension(960, 600));
                jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

                jScrollPane25.setName("jScrollPane25"); // NOI18N

                journalDealsTable.setAutoCreateRowSorter(true);
                journalDealsTable.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Deal #", "Date", "Customer", "Stock #", "Deal Type", "Stage", "LotName", "Status"
                        }
                ) {
                        Class[] types = new Class [] {
                                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                                false, false, false, false, false, false, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                                return types [columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                journalDealsTable.setName("journalDealsTable"); // NOI18N
                journalDealsTable.setOpaque(false);
                jScrollPane25.setViewportView(journalDealsTable);

                jPanel2.add(jScrollPane25);

                jPanel3.add(jPanel2);

                jTabbedPane1.addTab(resourceMap.getString("jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

                DealsDeleted.setName("DealsDeleted"); // NOI18N
                DealsDeleted.setLayout(new javax.swing.BoxLayout(DealsDeleted, javax.swing.BoxLayout.Y_AXIS));

                jPanel5.setMaximumSize(new java.awt.Dimension(900, 30));
                jPanel5.setMinimumSize(new java.awt.Dimension(900, 30));
                jPanel5.setName("jPanel5"); // NOI18N
                jPanel5.setPreferredSize(new java.awt.Dimension(900, 30));

                jLabel136.setText(resourceMap.getString("jLabel136.text")); // NOI18N
                jLabel136.setName("jLabel136"); // NOI18N
                jPanel5.add(jLabel136);

                dealsDeletedStartDate.setDateFormatString(resourceMap.getString("dealsDeletedStartDate.dateFormatString")); // NOI18N
                dealsDeletedStartDate.setName("dealsDeletedStartDate"); // NOI18N
                jPanel5.add(dealsDeletedStartDate);

                jLabel137.setText(resourceMap.getString("jLabel137.text")); // NOI18N
                jLabel137.setName("jLabel137"); // NOI18N
                jPanel5.add(jLabel137);

                dealsDeletedEndDate.setDateFormatString(resourceMap.getString("dealsDeletedEndDate.dateFormatString")); // NOI18N
                dealsDeletedEndDate.setName("dealsDeletedEndDate"); // NOI18N
                jPanel5.add(dealsDeletedEndDate);

                jButton50.setText(resourceMap.getString("jButton50.text")); // NOI18N
                jButton50.setName("jButton50"); // NOI18N
                jButton50.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                jButton50refreshButtonsClicked(evt);
                        }
                });
                jPanel5.add(jButton50);

                jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
                jButton2.setName("jButton2"); // NOI18N
                jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                jButton2MouseClicked(evt);
                        }
                });
                jPanel5.add(jButton2);

                DealsDeleted.add(jPanel5);

                jPanel15.setMinimumSize(new java.awt.Dimension(960, 23));
                jPanel15.setName("jPanel15"); // NOI18N
                jPanel15.setPreferredSize(new java.awt.Dimension(960, 23));

                buttonGroup1.add(journalRetailsDeletedRadio);
                journalRetailsDeletedRadio.setText(resourceMap.getString("journalRetailsDeletedRadio.text")); // NOI18N
                journalRetailsDeletedRadio.setName("journalRetailsDeletedRadio"); // NOI18N
                journalRetailsDeletedRadio.setOpaque(false);
                journalRetailsDeletedRadio.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                journalRetailsDeletedRadioMouseClicked(evt);
                        }
                });
                jPanel15.add(journalRetailsDeletedRadio);

                buttonGroup1.add(journalWholesaleDeletedRadio);
                journalWholesaleDeletedRadio.setText(resourceMap.getString("journalWholesaleDeletedRadio.text")); // NOI18N
                journalWholesaleDeletedRadio.setName("journalWholesaleDeletedRadio"); // NOI18N
                journalWholesaleDeletedRadio.setOpaque(false);
                journalWholesaleDeletedRadio.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                journalWholesaleDeletedRadioMouseClicked(evt);
                        }
                });
                jPanel15.add(journalWholesaleDeletedRadio);

                ROCount1.setMaximumSize(new java.awt.Dimension(57, 23));
                ROCount1.setMinimumSize(new java.awt.Dimension(57, 23));
                ROCount1.setName("ROCount1"); // NOI18N
                ROCount1.setPreferredSize(new java.awt.Dimension(57, 23));
                jPanel15.add(ROCount1);

                DealsDeleted.add(jPanel15);

                jPanel6.setMinimumSize(new java.awt.Dimension(960, 600));
                jPanel6.setName("jPanel6"); // NOI18N
                jPanel6.setPreferredSize(new java.awt.Dimension(960, 600));
                jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

                jScrollPane26.setName("jScrollPane26"); // NOI18N

                journalDealsDeletedTable.setAutoCreateRowSorter(true);
                journalDealsDeletedTable.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Deal #", "Date", "Customer", "Stock #", "Deal Type", "Stage", "LotName", "Status"
                        }
                ) {
                        Class[] types = new Class [] {
                                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                                false, false, false, false, false, false, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                                return types [columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                journalDealsDeletedTable.setName("journalDealsDeletedTable"); // NOI18N
                journalDealsDeletedTable.setOpaque(false);
                jScrollPane26.setViewportView(journalDealsDeletedTable);

                jPanel6.add(jScrollPane26);

                DealsDeleted.add(jPanel6);

                jTabbedPane1.addTab("Deleted Deals", DealsDeleted);

                jPanel7.setName("jPanel7"); // NOI18N
                jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.Y_AXIS));

                jPanel8.setMaximumSize(new java.awt.Dimension(900, 30));
                jPanel8.setMinimumSize(new java.awt.Dimension(900, 30));
                jPanel8.setName("jPanel8"); // NOI18N
                jPanel8.setPreferredSize(new java.awt.Dimension(900, 30));

                jLabel138.setText(resourceMap.getString("jLabel138.text")); // NOI18N
                jLabel138.setName("jLabel138"); // NOI18N
                jPanel8.add(jLabel138);

                roStartDate.setDateFormatString(resourceMap.getString("roStartDate.dateFormatString")); // NOI18N
                roStartDate.setName("roStartDate"); // NOI18N
                jPanel8.add(roStartDate);

                jLabel139.setText(resourceMap.getString("jLabel139.text")); // NOI18N
                jLabel139.setName("jLabel139"); // NOI18N
                jPanel8.add(jLabel139);

                roEndDate.setDateFormatString(resourceMap.getString("roEndDate.dateFormatString")); // NOI18N
                roEndDate.setName("roEndDate"); // NOI18N
                jPanel8.add(roEndDate);

                jLabel140.setText(resourceMap.getString("jLabel140.text")); // NOI18N
                jLabel140.setName("jLabel140"); // NOI18N
                jPanel8.add(jLabel140);

                postDate.setDateFormatString(resourceMap.getString("postDate.dateFormatString")); // NOI18N
                postDate.setName("postDate"); // NOI18N
                jPanel8.add(postDate);

                jButton51.setText(resourceMap.getString("jButton51.text")); // NOI18N
                jButton51.setName("jButton51"); // NOI18N
                jButton51.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                jButton51refreshButtonsClicked(evt);
                        }
                });
                jPanel8.add(jButton51);

                jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
                jButton3.setName("jButton3"); // NOI18N
                jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                jButton3MouseClicked(evt);
                        }
                });
                jPanel8.add(jButton3);

                jPanel7.add(jPanel8);

                jPanel9.setMinimumSize(new java.awt.Dimension(960, 23));
                jPanel9.setName("jPanel9"); // NOI18N
                jPanel9.setPreferredSize(new java.awt.Dimension(960, 23));

                buttonGroup2.add(inprogressRadioButton);
                inprogressRadioButton.setText(resourceMap.getString("inprogressRadioButton.text")); // NOI18N
                inprogressRadioButton.setName("inprogressRadioButton"); // NOI18N
                inprogressRadioButton.setOpaque(false);
                inprogressRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                inprogressRadioButtonjournalsTypeRadioButton(evt);
                        }
                });
                jPanel9.add(inprogressRadioButton);

                buttonGroup2.add(completedRadioButton);
                completedRadioButton.setText(resourceMap.getString("completedRadioButton.text")); // NOI18N
                completedRadioButton.setName("completedRadioButton"); // NOI18N
                completedRadioButton.setOpaque(false);
                completedRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                completedRadioButtonjournalsTypeRadioButton(evt);
                        }
                });
                jPanel9.add(completedRadioButton);

                buttonGroup2.add(closedRadioButton);
                closedRadioButton.setText(resourceMap.getString("closedRadioButton.text")); // NOI18N
                closedRadioButton.setName("closedRadioButton"); // NOI18N
                closedRadioButton.setOpaque(false);
                closedRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                closedRadioButtonMouseClicked(evt);
                        }
                });
                jPanel9.add(closedRadioButton);

                jPanel7.add(jPanel9);

                jPanel10.setMinimumSize(new java.awt.Dimension(960, 600));
                jPanel10.setName("jPanel10"); // NOI18N
                jPanel10.setPreferredSize(new java.awt.Dimension(960, 600));
                jPanel10.setLayout(new javax.swing.BoxLayout(jPanel10, javax.swing.BoxLayout.LINE_AXIS));

                jScrollPane27.setName("jScrollPane27"); // NOI18N

                journalROTable.setAutoCreateRowSorter(true);
                journalROTable.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "RO #", "Open Date", "Completed Date", "Closed Date", "Customer", "Total", "LotName"
                        }
                ) {
                        Class[] types = new Class [] {
                                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                                false, false, false, false, false, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                                return types [columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                journalROTable.setName("journalROTable"); // NOI18N
                journalROTable.setOpaque(false);
                jScrollPane27.setViewportView(journalROTable);
                journalROTable.getColumnModel().getColumn(0).setMinWidth(100);
                journalROTable.getColumnModel().getColumn(0).setPreferredWidth(100);
                journalROTable.getColumnModel().getColumn(0).setMaxWidth(100);
                journalROTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("journalROTable.columnModel.title0")); // NOI18N
                journalROTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("journalROTable.columnModel.title1")); // NOI18N
                journalROTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("journalROTable.columnModel.title6")); // NOI18N
                journalROTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("journalROTable.columnModel.title2")); // NOI18N
                journalROTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("journalROTable.columnModel.title3")); // NOI18N
                journalROTable.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("journalROTable.columnModel.title4")); // NOI18N
                journalROTable.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("journalROTable.columnModel.title5")); // NOI18N

                jPanel10.add(jScrollPane27);

                jPanel7.add(jPanel10);

                jTabbedPane1.addTab(resourceMap.getString("jPanel7.TabConstraints.tabTitle"), jPanel7); // NOI18N

                Collections.setName("Collections"); // NOI18N
                Collections.setLayout(new javax.swing.BoxLayout(Collections, javax.swing.BoxLayout.Y_AXIS));

                jPanel12.setMaximumSize(new java.awt.Dimension(900, 30));
                jPanel12.setMinimumSize(new java.awt.Dimension(900, 30));
                jPanel12.setName("jPanel12"); // NOI18N
                jPanel12.setPreferredSize(new java.awt.Dimension(900, 30));

                jLabel141.setText(resourceMap.getString("jLabel141.text")); // NOI18N
                jLabel141.setName("jLabel141"); // NOI18N
                jPanel12.add(jLabel141);

                collectionStartDate.setDateFormatString(resourceMap.getString("collectionStartDate.dateFormatString")); // NOI18N
                collectionStartDate.setName("collectionStartDate"); // NOI18N
                jPanel12.add(collectionStartDate);

                jLabel142.setText(resourceMap.getString("jLabel142.text")); // NOI18N
                jLabel142.setName("jLabel142"); // NOI18N
                jPanel12.add(jLabel142);

                collectionEndDate.setDateFormatString(resourceMap.getString("collectionEndDate.dateFormatString")); // NOI18N
                collectionEndDate.setName("collectionEndDate"); // NOI18N
                jPanel12.add(collectionEndDate);

                jButton52.setText(resourceMap.getString("jButton52.text")); // NOI18N
                jButton52.setName("jButton52"); // NOI18N
                jButton52.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                jButton52refreshButtonsClicked(evt);
                        }
                });
                jPanel12.add(jButton52);

                collectionsPostToAccounting.setText(resourceMap.getString("collectionsPostToAccounting.text")); // NOI18N
                collectionsPostToAccounting.setName("collectionsPostToAccounting"); // NOI18N
                collectionsPostToAccounting.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                collectionsPostToAccountingMouseClicked(evt);
                        }
                });
                jPanel12.add(collectionsPostToAccounting);

                Collections.add(jPanel12);

                jPanel13.setMinimumSize(new java.awt.Dimension(960, 23));
                jPanel13.setName("jPanel13"); // NOI18N
                jPanel13.setPreferredSize(new java.awt.Dimension(960, 23));

                buttonGroup3.add(dealsRadioButton);
                dealsRadioButton.setSelected(true);
                dealsRadioButton.setText(resourceMap.getString("dealsRadioButton.text")); // NOI18N
                dealsRadioButton.setActionCommand(resourceMap.getString("dealsRadioButton.actionCommand")); // NOI18N
                dealsRadioButton.setName("dealsRadioButton"); // NOI18N
                dealsRadioButton.setOpaque(false);
                dealsRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                dealsRadioButtonjournalsTypeRadioButton(evt);
                        }
                });
                jPanel13.add(dealsRadioButton);

                buttonGroup3.add(serviceRadioButton);
                serviceRadioButton.setText(resourceMap.getString("serviceRadioButton.text")); // NOI18N
                serviceRadioButton.setName("serviceRadioButton"); // NOI18N
                serviceRadioButton.setOpaque(false);
                serviceRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                serviceRadioButtonjournalsTypeRadioButton(evt);
                        }
                });
                jPanel13.add(serviceRadioButton);

                buttonGroup3.add(othersRadioButton);
                othersRadioButton.setText(resourceMap.getString("othersRadioButton.text")); // NOI18N
                othersRadioButton.setName("othersRadioButton"); // NOI18N
                othersRadioButton.setOpaque(false);
                othersRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                othersRadioButtonMouseClicked(evt);
                        }
                });
                jPanel13.add(othersRadioButton);

                Collections.add(jPanel13);

                jPanel14.setMinimumSize(new java.awt.Dimension(960, 600));
                jPanel14.setName("jPanel14"); // NOI18N
                jPanel14.setPreferredSize(new java.awt.Dimension(960, 600));
                jPanel14.setLayout(new javax.swing.BoxLayout(jPanel14, javax.swing.BoxLayout.LINE_AXIS));

                jScrollPane28.setName("jScrollPane28"); // NOI18N

                journalCollectionsTable.setAutoCreateRowSorter(true);
                journalCollectionsTable.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Transaction", "Account #", "Collected Date", "Reason", "Cash", "Check", "Credit"
                        }
                ) {
                        Class[] types = new Class [] {
                                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                                false, false, false, false, false, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                                return types [columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                journalCollectionsTable.setName("journalCollectionsTable"); // NOI18N
                journalCollectionsTable.setOpaque(false);
                jScrollPane28.setViewportView(journalCollectionsTable);
                journalCollectionsTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("journalCollectionsTable.columnModel.title5")); // NOI18N
                journalCollectionsTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("journalCollectionsTable.columnModel.title0")); // NOI18N
                journalCollectionsTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("journalCollectionsTable.columnModel.title1")); // NOI18N
                journalCollectionsTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("journalCollectionsTable.columnModel.title6")); // NOI18N
                journalCollectionsTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("journalCollectionsTable.columnModel.title3")); // NOI18N
                journalCollectionsTable.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("journalCollectionsTable.columnModel.title4")); // NOI18N
                journalCollectionsTable.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("journalCollectionsTable.columnModel.title5")); // NOI18N

                jPanel14.add(jScrollPane28);

                Collections.add(jPanel14);

                jTabbedPane1.addTab(resourceMap.getString("Collections.TabConstraints.tabTitle"), Collections); // NOI18N

                jPanel4.setName("jPanel4"); // NOI18N
                jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.PAGE_AXIS));

                jSplitPane1.setDividerLocation(250);
                jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
                jSplitPane1.setName("jSplitPane1"); // NOI18N

                jPanel17.setName("jPanel17"); // NOI18N
                jPanel17.setPreferredSize(new java.awt.Dimension(464, 500));
                jPanel17.setRequestFocusEnabled(false);
                jPanel17.setLayout(new javax.swing.BoxLayout(jPanel17, javax.swing.BoxLayout.LINE_AXIS));

                jScrollPane29.setName("jScrollPane29"); // NOI18N

                bornAgainDealsTable.setAutoCreateRowSorter(true);
                bornAgainDealsTable.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Deal #", "Date", "Customer", "Stock #", "Deal Type", "Stage", "LotName", "Status"
                        }
                ) {
                        Class[] types = new Class [] {
                                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                                false, false, false, false, false, false, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                                return types [columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                bornAgainDealsTable.setName("bornAgainDealsTable"); // NOI18N
                bornAgainDealsTable.setOpaque(false);
                jScrollPane29.setViewportView(bornAgainDealsTable);

                jPanel17.add(jScrollPane29);

                jSplitPane1.setLeftComponent(jPanel17);

                jPanel16.setName("jPanel16"); // NOI18N
                jPanel16.setLayout(new javax.swing.BoxLayout(jPanel16, javax.swing.BoxLayout.LINE_AXIS));

                jScrollPane3.setName("jScrollPane3"); // NOI18N

                jTable3.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                jTable3.setName("jTable3"); // NOI18N
                jScrollPane3.setViewportView(jTable3);

                jPanel16.add(jScrollPane3);

                jSplitPane1.setRightComponent(jPanel16);

                jPanel4.add(jSplitPane1);

                jTabbedPane1.addTab(resourceMap.getString("jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

                jPanel18.setName("jPanel18"); // NOI18N
                jPanel18.setOpaque(false);
                jPanel18.setLayout(new javax.swing.BoxLayout(jPanel18, javax.swing.BoxLayout.LINE_AXIS));

                jSplitPane2.setDividerLocation(200);
                jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
                jSplitPane2.setName("jSplitPane2"); // NOI18N
                jSplitPane2.setOpaque(false);

                jPanel19.setMinimumSize(new java.awt.Dimension(100, 100));
                jPanel19.setName("jPanel19"); // NOI18N
                jPanel19.setOpaque(false);
                jPanel19.setPreferredSize(new java.awt.Dimension(100, 100));
                jPanel19.setLayout(new java.awt.GridBagLayout());

                jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
                jTextField1.setMinimumSize(new java.awt.Dimension(80, 20));
                jTextField1.setName("jTextField1"); // NOI18N
                jTextField1.setPreferredSize(new java.awt.Dimension(80, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
                jPanel19.add(jTextField1, gridBagConstraints);

                jTextField2.setText(resourceMap.getString("jTextField2.text")); // NOI18N
                jTextField2.setMinimumSize(new java.awt.Dimension(80, 20));
                jTextField2.setName("jTextField2"); // NOI18N
                jTextField2.setPreferredSize(new java.awt.Dimension(80, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
                jPanel19.add(jTextField2, gridBagConstraints);

                jTextField3.setText(resourceMap.getString("jTextField3.text")); // NOI18N
                jTextField3.setName("jTextField3"); // NOI18N
                jTextField3.setPreferredSize(new java.awt.Dimension(80, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
                jPanel19.add(jTextField3, gridBagConstraints);

                jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Deals", "RO", "Other" }));
                jComboBox1.setToolTipText(resourceMap.getString("jComboBox1.toolTipText")); // NOI18N
                jComboBox1.setMinimumSize(new java.awt.Dimension(200, 20));
                jComboBox1.setName("jComboBox1"); // NOI18N
                jComboBox1.setPreferredSize(new java.awt.Dimension(200, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                jPanel19.add(jComboBox1, gridBagConstraints);

                mapGLCombo.setMinimumSize(new java.awt.Dimension(200, 20));
                mapGLCombo.setName("mapGLCombo"); // NOI18N
                mapGLCombo.setPreferredSize(new java.awt.Dimension(200, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                jPanel19.add(mapGLCombo, gridBagConstraints);

                jTextField4.setText(resourceMap.getString("jTextField4.text")); // NOI18N
                jTextField4.setMinimumSize(new java.awt.Dimension(200, 20));
                jTextField4.setName("jTextField4"); // NOI18N
                jTextField4.setPreferredSize(new java.awt.Dimension(200, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                jPanel19.add(jTextField4, gridBagConstraints);

                jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
                jButton4.setName("jButton4"); // NOI18N
                jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                jButton4MouseClicked(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
                jPanel19.add(jButton4, gridBagConstraints);

                jSplitPane2.setLeftComponent(jPanel19);

                jPanel20.setMinimumSize(new java.awt.Dimension(100, 100));
                jPanel20.setName("jPanel20"); // NOI18N
                jPanel20.setOpaque(false);
                jPanel20.setPreferredSize(new java.awt.Dimension(100, 100));
                jPanel20.setLayout(new javax.swing.BoxLayout(jPanel20, javax.swing.BoxLayout.LINE_AXIS));

                jScrollPane1.setName("jScrollPane1"); // NOI18N

                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null, null},
                                {null, null, null, null, null},
                                {null, null, null, null, null},
                                {null, null, null, null, null}
                        },
                        new String [] {
                                "ID", "Group", "Description", "GL", "GL Description"
                        }
                ));
                jTable1.setName("jTable1"); // NOI18N
                jScrollPane1.setViewportView(jTable1);
                jTable1.getColumnModel().getColumn(0).setMinWidth(100);
                jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
                jTable1.getColumnModel().getColumn(0).setMaxWidth(100);
                jTable1.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable1.columnModel.title0")); // NOI18N
                jTable1.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable1.columnModel.title3")); // NOI18N
                jTable1.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTable1.columnModel.title1")); // NOI18N
                jTable1.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTable1.columnModel.title2")); // NOI18N
                jTable1.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTable1.columnModel.title4")); // NOI18N

                jPanel20.add(jScrollPane1);

                jSplitPane2.setRightComponent(jPanel20);

                jPanel18.add(jSplitPane2);

                jTabbedPane1.addTab(resourceMap.getString("jPanel18.TabConstraints.tabTitle"), jPanel18); // NOI18N

                add(jTabbedPane1);
        }// </editor-fold>//GEN-END:initComponents

    private void jButton49refreshButtonsClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton49refreshButtonsClicked
    {//GEN-HEADEREND:event_jButton49refreshButtonsClicked
	    // TODO add your handling code here:
    }//GEN-LAST:event_jButton49refreshButtonsClicked

        private void jButton51refreshButtonsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton51refreshButtonsClicked
		// TODO add your handling code here:
        }//GEN-LAST:event_jButton51refreshButtonsClicked

        private void inprogressRadioButtonjournalsTypeRadioButton(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inprogressRadioButtonjournalsTypeRadioButton
		reloadROJournal();
        }//GEN-LAST:event_inprogressRadioButtonjournalsTypeRadioButton

        private void completedRadioButtonjournalsTypeRadioButton(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_completedRadioButtonjournalsTypeRadioButton
		reloadROJournal();
        }//GEN-LAST:event_completedRadioButtonjournalsTypeRadioButton

        private void closedRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closedRadioButtonMouseClicked
		reloadROJournal();
        }//GEN-LAST:event_closedRadioButtonMouseClicked

        private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
		for (int i = 0; i < journalDealsTable.getRowCount(); i++) {
			String dealNumber = null;
			int dealColumn = AccountingUtil.getColumnByName(journalDealsTable, "Deal #");

			if (journalDealsTable.getValueAt(i, dealColumn) != null) {
				dealNumber = journalDealsTable.getValueAt(i, dealColumn).toString();
			}

			dealsToAccounting(dealNumber);
		}
        }//GEN-LAST:event_jButton1MouseClicked

        private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
		for (int i = 0; i < journalROTable.getRowCount(); i++) {
			String roNumber = null;
			int roColumn = AccountingUtil.getColumnByName(journalROTable, "RO #");

			if (journalROTable.getValueAt(i, roColumn) != null) {
				roNumber = journalROTable.getValueAt(i, roColumn).toString();
			}

			System.out.println("RORO: " + roNumber);

			roToAccounting(roNumber);
		}
        }//GEN-LAST:event_jButton3MouseClicked

        private void jButton52refreshButtonsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton52refreshButtonsClicked
		// TODO add your handling code here:
        }//GEN-LAST:event_jButton52refreshButtonsClicked

        private void collectionsPostToAccountingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_collectionsPostToAccountingMouseClicked
		for (int i = 0; i < journalCollectionsTable.getRowCount(); i++) {
			String transactionNumber = null;
			int transactionColumn = AccountingUtil.getColumnByName(journalCollectionsTable, "Transaction #");

			if (journalCollectionsTable.getValueAt(i, transactionColumn) != null) {
				transactionNumber = journalCollectionsTable.getValueAt(i, transactionColumn).toString();
			}

			collectionsToAccounting(transactionNumber);
		}
        }//GEN-LAST:event_collectionsPostToAccountingMouseClicked

        private void dealsRadioButtonjournalsTypeRadioButton(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dealsRadioButtonjournalsTypeRadioButton
		reloadCollectionsJournal();
        }//GEN-LAST:event_dealsRadioButtonjournalsTypeRadioButton

        private void serviceRadioButtonjournalsTypeRadioButton(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serviceRadioButtonjournalsTypeRadioButton
		reloadCollectionsJournal();
        }//GEN-LAST:event_serviceRadioButtonjournalsTypeRadioButton

        private void othersRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_othersRadioButtonMouseClicked
		reloadCollectionsJournal();
        }//GEN-LAST:event_othersRadioButtonMouseClicked

        private void journalRetailRadiojournalsTypeRadioButton(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_journalRetailRadiojournalsTypeRadioButton
		reloadDealsJournal();
        }//GEN-LAST:event_journalRetailRadiojournalsTypeRadioButton

        private void journalWholesaleRadiojournalsTypeRadioButton(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_journalWholesaleRadiojournalsTypeRadioButton
		reloadDealsJournal();
        }//GEN-LAST:event_journalWholesaleRadiojournalsTypeRadioButton

        private void journalPostedRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_journalPostedRadioMouseClicked
		reloadDealsJournal();
        }//GEN-LAST:event_journalPostedRadioMouseClicked

        private void jButton50refreshButtonsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton50refreshButtonsClicked
		// TODO add your handling code here:
        }//GEN-LAST:event_jButton50refreshButtonsClicked

        private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
		for (int i = 0; i < journalDealsDeletedTable.getRowCount(); i++) {
			String dealNumber = null;
			int dealColumn = AccountingUtil.getColumnByName(journalDealsDeletedTable, "Deal #");

			if (journalDealsDeletedTable.getValueAt(i, dealColumn) != null) {
				dealNumber = journalDealsDeletedTable.getValueAt(i, dealColumn).toString();
			}

			dealsDeletedToAccounting(dealNumber);
		}
        }//GEN-LAST:event_jButton2MouseClicked

        private void journalRetailsDeletedRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_journalRetailsDeletedRadioMouseClicked
		reloadDealsDeletedJournal();
        }//GEN-LAST:event_journalRetailsDeletedRadioMouseClicked

        private void journalWholesaleDeletedRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_journalWholesaleDeletedRadioMouseClicked
		reloadDealsDeletedJournal();
        }//GEN-LAST:event_journalWholesaleDeletedRadioMouseClicked

        private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
		String group;
		String description;
		String gl;
		sql = new String[1];

		group = jComboBox1.getSelectedItem().toString();
		description = jTextField4.getText();
		gl = mapGLCombo.getSelectedItem().toString().split("-")[0];

		sql[0] = "INSERT INTO AccountingMap (group_name, description, gl) "
			+ "VALUES('" + group + "', '" + description + "', '" + gl + "')";

		dms.DMSApp.getApplication().getDBConnection().executeStatements(sql, this);
		System.out.println("Account Setup: " + sql[0]);

		reloadAccountingMaps();
		jTextField4.setText("");


        }//GEN-LAST:event_jButton4MouseClicked
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JPanel Collections;
        private javax.swing.JPanel DealsDeleted;
        private javax.swing.JLabel ROCount;
        private javax.swing.JLabel ROCount1;
        public static javax.swing.JTable bornAgainDealsTable;
        private javax.swing.ButtonGroup buttonGroup1;
        private javax.swing.ButtonGroup buttonGroup2;
        private javax.swing.ButtonGroup buttonGroup3;
        public javax.swing.JRadioButton closedRadioButton;
        private com.toedter.calendar.JDateChooser collectionEndDate;
        private com.toedter.calendar.JDateChooser collectionStartDate;
        private javax.swing.JButton collectionsPostToAccounting;
        public javax.swing.JRadioButton completedRadioButton;
        private com.toedter.calendar.JDateChooser dealsDeletedEndDate;
        private com.toedter.calendar.JDateChooser dealsDeletedStartDate;
        private com.toedter.calendar.JDateChooser dealsEndDate;
        public javax.swing.JRadioButton dealsRadioButton;
        private com.toedter.calendar.JDateChooser dealsStartDate;
        public javax.swing.JRadioButton inprogressRadioButton;
        private javax.swing.JButton jButton1;
        private javax.swing.JButton jButton2;
        private javax.swing.JButton jButton3;
        private javax.swing.JButton jButton4;
        private javax.swing.JButton jButton49;
        private javax.swing.JButton jButton50;
        private javax.swing.JButton jButton51;
        private javax.swing.JButton jButton52;
        private javax.swing.JComboBox jComboBox1;
        private javax.swing.JLabel jLabel134;
        private javax.swing.JLabel jLabel135;
        private javax.swing.JLabel jLabel136;
        private javax.swing.JLabel jLabel137;
        private javax.swing.JLabel jLabel138;
        private javax.swing.JLabel jLabel139;
        private javax.swing.JLabel jLabel140;
        private javax.swing.JLabel jLabel141;
        private javax.swing.JLabel jLabel142;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel10;
        private javax.swing.JPanel jPanel11;
        private javax.swing.JPanel jPanel12;
        private javax.swing.JPanel jPanel13;
        private javax.swing.JPanel jPanel14;
        private javax.swing.JPanel jPanel15;
        private javax.swing.JPanel jPanel16;
        private javax.swing.JPanel jPanel17;
        private javax.swing.JPanel jPanel18;
        private javax.swing.JPanel jPanel19;
        private javax.swing.JPanel jPanel2;
        private javax.swing.JPanel jPanel20;
        private javax.swing.JPanel jPanel3;
        private javax.swing.JPanel jPanel4;
        private javax.swing.JPanel jPanel5;
        private javax.swing.JPanel jPanel6;
        private javax.swing.JPanel jPanel7;
        private javax.swing.JPanel jPanel8;
        private javax.swing.JPanel jPanel9;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane25;
        private javax.swing.JScrollPane jScrollPane26;
        private javax.swing.JScrollPane jScrollPane27;
        private javax.swing.JScrollPane jScrollPane28;
        private javax.swing.JScrollPane jScrollPane29;
        private javax.swing.JScrollPane jScrollPane3;
        private javax.swing.JSplitPane jSplitPane1;
        private javax.swing.JSplitPane jSplitPane2;
        private javax.swing.JTabbedPane jTabbedPane1;
        private javax.swing.JTable jTable1;
        private javax.swing.JTable jTable3;
        private javax.swing.JTextField jTextField1;
        private javax.swing.JTextField jTextField2;
        private javax.swing.JTextField jTextField3;
        private javax.swing.JTextField jTextField4;
        public javax.swing.JTable journalCollectionsTable;
        public static javax.swing.JTable journalDealsDeletedTable;
        public static javax.swing.JTable journalDealsTable;
        public javax.swing.JRadioButton journalPostedRadio;
        public javax.swing.JTable journalROTable;
        public javax.swing.JRadioButton journalRetailRadio;
        public javax.swing.JRadioButton journalRetailsDeletedRadio;
        public javax.swing.JRadioButton journalWholesaleDeletedRadio;
        public javax.swing.JRadioButton journalWholesaleRadio;
        public static javax.swing.JComboBox mapGLCombo;
        public javax.swing.JRadioButton othersRadioButton;
        private com.toedter.calendar.JDateChooser postDate;
        private com.toedter.calendar.JDateChooser roEndDate;
        private com.toedter.calendar.JDateChooser roStartDate;
        public javax.swing.JRadioButton serviceRadioButton;
        // End of variables declaration//GEN-END:variables
	private String[] sql = null;

	public void reloadAccountingMaps() {
		try {

			String sql = "SELECT A.id, A.group_name, A.description, A.gl, B.Description "
				+ "FROM AccountingMap A LEFT JOIN AccountingCOATable B "
				+ "ON (A.gl = B.AccountNumber) ";

			ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

			DefaultTableModel aModel = (DefaultTableModel) jTable1.getModel();
			AccountingUtil.clearTableModel(aModel);

			ResultSetMetaData rsmd = rs.getMetaData();
			int colNo = rsmd.getColumnCount();

			while (rs.next()) {
				Object[] values = new Object[colNo];
				for (int i = 0; i < colNo; i++) {
					values[i] = rs.getObject(i + 1);
				}

				aModel.addRow(values);
			}
			rs.getStatement().close();
		} catch (SQLException ex) {
			Logger.getLogger(ToolsPanel.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void reloadDealsJournal() {
		try {

			String sql = "";
			String filterDealType = "";
			String posted = "";
			String dateRange = "";
			posted = "AND PostedDate IS NULL ";

			if (journalPostedRadio.isSelected()) {
				//System.out.println("is Selected");
				journalPostDatePanel.setVisible(false);
				journalReversalDatePanel.setVisible(true);
			} else {
				//System.out.println("is Not Selected");
				journalPostDatePanel.setVisible(true);
				journalReversalDatePanel.setVisible(false);
			}
			if (journalRetailRadio.isSelected()) {
				filterDealType = "AND (DealType = 'FINANCE' OR DealType = 'CASH' OR DealType = 'SAME AS CASH' OR DealType = 'BHPH') ";
			} else if (journalWholesaleRadio.isSelected()) {
				filterDealType = "AND DealType = 'WHOLESALE' ";
			} else if (journalPostedRadio.isSelected()) {
				filterDealType = "AND DealType IN ('FINANCE','CASH','SAME AS CASH','BHPH','WHOLESALE') ";
				posted = "AND PostedDate IS NOT NULL ";
			}

			dateRange = "AND SoldDate Between '" + AccountingUtil.dateFormat.format(dealsStartDate.getDate()) + "' AND '"
				+ AccountingUtil.dateFormat.format(dealsEndDate.getDate()) + "' ";

			sql = "SELECT AccountNumber, SoldDate, B.FirstName + ' ' + B.LastName, StockNumber, DealType, DealFunded, LotName, Status "
				+ "FROM DealsTable A "
				+ "LEFT JOIN CustomerTable B "
				+ "ON A.BuyerCode = B.CustomerCode "
				+ "WHERE Status NOT IN ('Quote') "
				+ posted
				+ filterDealType
				+ dateRange
				+ "ORDER BY SoldDate DESC";

			System.out.println("reloadJournalDeals: " + sql);

			ResultSet rs;
			rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

			DefaultTableModel aModel = (DefaultTableModel) journalDealsTable.getModel();
			AccountingUtil.clearTableModel(aModel);

			ResultSetMetaData rsmd = rs.getMetaData();
			int colNo = rsmd.getColumnCount();
			while (rs.next()) {
				Object[] values = new Object[colNo];
				for (int i = 0; i < colNo; i++) {
					if (i == 1) {
						values[i] = AccountingUtil.dateFormat1.format(rs.getObject(i + 1));
					} else {
						values[i] = rs.getObject(i + 1);
					}
				}
				aModel.addRow(values);
			}

			rs.getStatement().close();

		} catch (SQLException ex) {
			ex.printStackTrace();
			Logger
				.getLogger(AccountingWindow.class
				.getName()).log(Level.SEVERE, null, ex);
		}

	}

	public void reloadDealsDeletedJournal() {
		try {

			String sql = "";
			String filterDealType = "";
			String posted = "";
			String dateRange = "";
			posted = "AND PostedDate IS NOT NULL ";

			if (journalPostedRadio.isSelected()) {
				//System.out.println("is Selected");
				journalPostDatePanel.setVisible(false);
				journalReversalDatePanel.setVisible(true);
			} else {
				//System.out.println("is Not Selected");
				journalPostDatePanel.setVisible(true);
				journalReversalDatePanel.setVisible(false);
			}
			if (journalRetailsDeletedRadio.isSelected()) {
				filterDealType = "AND DealType IN ('FINANCE','CASH','SAME AS CASH','BHPH','WHOLESALE') ";
			}

			if (journalWholesaleDeletedRadio.isSelected()) {
				filterDealType = "AND DealType = 'WHOLESALE' ";
			} else if (journalRetailsDeletedRadio.isSelected()) {
				filterDealType = "AND DealType IN ('FINANCE','CASH','SAME AS CASH','BHPH') ";
				//posted = "AND PostedDate IS NOT NULL ";
			}

			dateRange = "AND SoldDate Between '" + AccountingUtil.dateFormat.format(dealsDeletedStartDate.getDate()) + "' AND '"
				+ AccountingUtil.dateFormat.format(dealsDeletedEndDate.getDate()) + "' ";

			sql = "SELECT AccountNumber, SoldDate, B.FirstName + ' ' + B.LastName, StockNumber, DealType, DealFunded, LotName, Status "
				+ "FROM DealsTable A "
				+ "LEFT JOIN CustomerTable B "
				+ "ON A.BuyerCode = B.CustomerCode "
				+ "WHERE Status = 'Deleted' "
				+ posted
				+ filterDealType
				+ dateRange
				+ "ORDER BY SoldDate DESC";

			sql = "SELECT AccountNumber, SoldDate,  D.FirstName + ' ' + D.LastName,  StockNumber, DealType, "
				+ "DealFunded, LotName, Status "
				+ "FROM DealsTable A "
				+ "INNER JOIN NotesTable B "
				+ "ON A.AccountNumber = B.Code AND B.NoteType = 'DELETE' "
				+ "LEFT JOIN NotesTable C "
				+ "ON A.AccountNumber = C.Code AND C.NoteType = 'REVERSAL' "
				+ "LEFT JOIN CustomerTable D "
				+ "ON A.BuyerCode = D.CustomerCode "
				+ "WHERE Status = 'Deleted' "
				+ posted
				+ filterDealType
				+ dateRange
				+ " AND C.Code IS NULL";

			System.out.println("reloadDealsDeleted: " + sql);

			ResultSet rs;
			rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

			DefaultTableModel aModel = (DefaultTableModel) journalDealsDeletedTable.getModel();
			AccountingUtil.clearTableModel(aModel);

			ResultSetMetaData rsmd = rs.getMetaData();
			int colNo = rsmd.getColumnCount();
			while (rs.next()) {
				Object[] values = new Object[colNo];
				for (int i = 0; i < colNo; i++) {
					if (i == 1) {
						values[i] = AccountingUtil.dateFormat1.format(rs.getObject(i + 1));
					} else {
						values[i] = rs.getObject(i + 1);
					}
				}
				aModel.addRow(values);
			}

			rs.getStatement().close();

		} catch (SQLException ex) {
			ex.printStackTrace();
			Logger
				.getLogger(AccountingWindow.class
				.getName()).log(Level.SEVERE, null, ex);
		}

	}

	private void reloadROJournal() {
		try {
			String sql;

			String filterROType = "";
			String posted = "";
			String dateRange = "";
			String orderBy = "";
			String sql2 = "";

			posted = "AND PostedDate IS NULL ";

			if (inprogressRadioButton.isSelected()) {
				filterROType = "AND Status = 'In-Progress' ";
				orderBy = "ORDER BY ROOpen DESC ";
			} else if (completedRadioButton.isSelected()) {
				filterROType = "AND Status IN ('Completed','Closed') ";
				dateRange = "AND ROCompleted Between '" 
					+ AccountingUtil.getStringDateFromUtilDate(roStartDate.getDate()) + "' AND '"
					+ AccountingUtil.getStringDateFromUtilDate(roEndDate.getDate()) + "' ";
				orderBy = "ORDER BY ROCompleted DESC ";
			} else if (closedRadioButton.isSelected()) {
				filterROType = "AND Status = 'Closed' ";
				dateRange = "AND ROClosed Between '" + AccountingUtil.getStringDateFromUtilDate(roStartDate.getDate()) + "' AND '"
					+ AccountingUtil.getStringDateFromUtilDate(roEndDate.getDate()) + "' ";
				orderBy = "ORDER BY ROClosed DESC ";
			}

			sql = "SELECT InvoiceNumber, ROOpen, ROCompleted, ROClosed, B.FirstName + ' ' + B.LastName as FullName, "
				+ "CAST(ROUND(Total,2) AS NUMERIC(10,2)), "
				+ "LotName "
				+ "FROM ServiceInvoiceTable A "
				+ "LEFT JOIN CustomerTable B "
				+ "ON A.CustomerCode = B.CustomerCode "
				//+ "WHERE LotName = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
				+ "WHERE PostedDate IS NULL "
				+ filterROType
				+ dateRange
				+ orderBy;

			System.out.println("sql" + sql);

			ResultSet rs;
			rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

			DefaultTableModel aModel;
			aModel = (DefaultTableModel) journalROTable.getModel();
			AccountingUtil.clearTableModel(aModel);

			ResultSetMetaData rsmd = rs.getMetaData();
			int colNo = rsmd.getColumnCount();
			int rowCount = 1;

			int opendateColumn = AccountingUtil.getColumnByName(journalROTable, "Open Date");
			int completedateColumn = AccountingUtil.getColumnByName(journalROTable, "Completed Date");
			int closedateColumn = AccountingUtil.getColumnByName(journalROTable, "Close Date");

			while (rs.next()) {
				Object[] values = new Object[colNo];
				for (int i = 0; i < colNo; i++) {
					if (i == opendateColumn) {
						if (rs.getObject(i + 1) != null) {
							values[i] = AccountingUtil.dateFormat1.format(rs.getObject(i + 1));
						}
					} else if (i == closedateColumn) {
						if (rs.getObject(i + 1) != null) {
							values[i] = AccountingUtil.dateFormat1.format(rs.getObject(i + 1));
						}
					} else if (i == completedateColumn) {
						if (rs.getObject(i + 1) != null) {
							values[i] = AccountingUtil.dateFormat1.format(rs.getObject(i + 1));
						}
					} else {
						values[i] = rs.getObject(i + 1);
					}
				}
				aModel.addRow(values);
			}

			sql = "SELECT COUNT(*) AS ROCount "
				+ "FROM ServiceInvoiceTable A "
				+ "LEFT JOIN CustomerTable B "
				+ "ON A.CustomerCode = B.CustomerCode "
				//+ "WHERE LotName = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
				+ "WHERE PostedDate IS NULL "
				+ filterROType
				+ dateRange;

			System.out.println(sql);

			rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

			while (rs.next()) {
				System.out.println("count " + rs.getString("ROCount"));
				ROCount.setText(rs.getString("ROCount"));
			}

			rs.getStatement().close();

		} catch (SQLException ex) {
			Logger.getLogger(AccountingWindow.class
				.getName()).log(Level.SEVERE, null, ex);
		}

	}

	private void reloadCollectionsJournal() {
		try {
			String sql;
			String filterCollectionType = "";
			String dateRange = "";
			String orderBy = "";

			if (dealsRadioButton.isSelected()) {
				filterCollectionType = "AND [TransactionType] = 'Deals' ";
				orderBy = "ORDER BY [DateNTime] DESC ";
			} else if (serviceRadioButton.isSelected()) {
				filterCollectionType = "AND [TransactionType] = 'Service' ";
				orderBy = "ORDER BY [DateNTime] DESC ";
			} else if (othersRadioButton.isSelected()) {
				filterCollectionType = "AND [TransactionType] = 'Other' ";
				orderBy = "ORDER BY [DateNTime] DESC ";
			}

			dateRange = "AND [DateNTime] Between '" + AccountingUtil.dateFormat.format(collectionStartDate.getDate()) + "' AND '"
				+ AccountingUtil.dateFormat.format(collectionEndDate.getDate()) + "' ";

			sql = "SELECT TransactionNumber, AccountNumber, [DateNTime], Reason, "
				+ "CAST(ROUND([CASH],2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND([CHECK],2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND([CHARGE],2) AS NUMERIC(10,2)) "
				+ "FROM [CashierTable] A "
				+ "WHERE ([CASH] != 0.00 OR [CHECK] != 0.00 OR [CHARGE] != 0.00) "
				+ filterCollectionType
				+ dateRange
				+ orderBy;

			System.out.println("sql" + sql);

			ResultSet rs;
			rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

			DefaultTableModel aModel;
			aModel = (DefaultTableModel) journalCollectionsTable.getModel();
			AccountingUtil.clearTableModel(aModel);

			ResultSetMetaData rsmd = rs.getMetaData();
			int colNo = rsmd.getColumnCount();
			int rowCount = 1;

			int opendateColumn = AccountingUtil.getColumnByName(journalCollectionsTable, "Date");

			while (rs.next()) {
				Object[] values = new Object[colNo];
				for (int i = 0; i < colNo; i++) {
					if (i == opendateColumn) {
						if (rs.getObject(i + 1) != null) {
							values[i] = AccountingUtil.dateFormat1.format(rs.getObject(i + 1));
						}
					} else {
						values[i] = rs.getObject(i + 1);
					}
				}
				aModel.addRow(values);
			}

			rs.getStatement().close();

		} catch (SQLException ex) {
			Logger.getLogger(AccountingWindow.class
				.getName()).log(Level.SEVERE, null, ex);
		}

	}

	private void roToAccounting(String invoiceNumber) {
		try {
			String val;
			String postedDate = "";
			Double debits = 0.00;
			Double credits = 0.00;
			String postingDate = "";

			if (inprogressRadioButton.isSelected()) {
				postedDate = "ROOpen AS PostedDate, ";
			} else if (completedRadioButton.isSelected()) {
				postedDate = "ROCompleted AS PostedDate, ";
			} else if (closedRadioButton.isSelected()) {
				postedDate = "ROClosed AS PostedDate, ";
			}

			String sql = "SELECT "
				+ "CAST(ROUND(TotalLabor,2) AS NUMERIC(10,2)) AS TotalLabor, "
				+ "CAST(ROUND(TotalLabor - LaborProfit,2) AS NUMERIC(10,2)) AS LaborCost, "
				+ "CAST(ROUND(TotalParts,2) AS NUMERIC(10,2)) AS TotalParts, "
				+ "CAST(ROUND(ShopSupplies,2) AS NUMERIC(10,2)) AS ShopSupplies, "
				+ "CAST(ROUND(Tax,2) AS NUMERIC(10,2)) AS Tax, "
				+ "CAST(ROUND(Total,2) AS NUMERIC(10,2)) AS Total, "
				+ "CAST(ROUND(Discount,2) AS NUMERIC(10,2)) AS Discount, "
				+ "CAST(ROUND(Fees,2) AS NUMERIC(10,2)) AS Fees, "
				+ postedDate
				+ "(SELECT CASE WHEN SUM(B.PartCost * B.Quantity) IS NULL THEN 0.00 ELSE "
				+ "CAST(ROUND(SUM(B.PartCost * B.Quantity),2) AS NUMERIC(10,2)) END "
				+ "FROM ServiceJobPartsTable B WHERE A.InvoiceNumber = B.InvoiceNumber) "
				+ "AS [PartsCost], "
				+ "(SELECT CASE WHEN SUM(B.SubletCost) IS NULL THEN 0.00 ELSE "
				+ "CAST(ROUND(SUM(B.SubletCost),2) AS NUMERIC(10,2)) END "
				+ "FROM ServiceJobsTable B WHERE A.InvoiceNumber = B.InvoiceNumber "
				+ ") AS[SubletCost], "
				+ "(SELECT CASE WHEN SUM(B.LaborTotal+B.PartsTotal+B.SubletPrice) IS NULL THEN 0.00   "
				+ "ELSE CAST(ROUND(SUM(B.LaborTotal+B.PartsTotal+B.SubletPrice),2) AS NUMERIC(10,2))   "
				+ "END FROM ServiceJobsTable B   "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND PayType = 'C') AS[CustomerPay],  "
				+ "(SELECT CASE WHEN SUM(B.LaborTotal+B.PartsTotal+B.SubletPrice) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.LaborTotal+B.PartsTotal+B.SubletPrice),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'I') AS[Internal], "
				+ "(SELECT CASE WHEN SUM(B.LaborTotal+B.PartsTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.LaborTotal+B.PartsTotal+B.SubletPrice),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'ASR') AS[AfterSalesRepair],   "
				+ "(SELECT CASE WHEN SUM(B.LaborTotal+B.PartsTotal+B.SubletPrice) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.LaborTotal+B.PartsTotal+B.SubletPrice),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WO') AS[WeOwe],  "
				/* LABOR */
				// Labor Customer
				+ "(SELECT CASE WHEN SUM(B.LaborTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.LaborTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'C') AS[LaborIncomeC], "
				+ "(SELECT CASE WHEN SUM(B.LaborTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.LaborTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WPO') AS[LaborIncomeWPO], "
				// Labor Warranty
				+ "(SELECT CASE WHEN SUM(B.LaborTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.LaborTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WPL') AS[LaborIncomeWPL], "
				+ "(SELECT CASE WHEN SUM(B.LaborTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.LaborTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WLO') AS[LaborIncomeWLO], "
				// Labor Internal				
				+ "(SELECT CASE WHEN SUM(B.LaborTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.LaborTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'I') AS[LaborIncomeI], "
				+ "(SELECT CASE WHEN SUM(B.LaborTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.LaborTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WO') AS[LaborIncomeWO], "
				+ "(SELECT CASE WHEN SUM(B.LaborTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.LaborTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'ASR') AS[LaborIncomeASR], "
				/* END OF LABOR */
				/* SUBLET */
				// Sublet Customer
				+ "(SELECT CASE WHEN SUM(B.SubletPrice) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.SubletPrice),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'C') AS[SubletIncomeC], "
				// Sublet Warranty
				+ "(SELECT CASE WHEN SUM(B.SubletPrice) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.SubletPrice),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WPS') AS[SubletIncomeWPS], "
				// Sublet Internal				
				+ "(SELECT CASE WHEN SUM(B.SubletPrice) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.SubletPrice),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'I') AS[SubletIncomeI], "
				+ "(SELECT CASE WHEN SUM(B.SubletPrice) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.SubletPrice),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WO') AS[SubletIncomeWO], "
				+ "(SELECT CASE WHEN SUM(B.SubletPrice) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.SubletPrice),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'ASR') AS[SubletIncomeASR], "
				/* END OF SUBLET */
				/* PARTS */
				// Parts Customer
				+ "(SELECT CASE WHEN SUM(B.PartsTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.PartsTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'C') AS[PartsIncomeC], "
				+ "(SELECT CASE WHEN SUM(B.PartsTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.PartsTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WLO') AS[PartsIncomeWLO], "
				// Parts Warranty
				+ "(SELECT CASE WHEN SUM(B.PartsTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.PartsTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WPL') AS[PartsIncomeWPL], "
				+ "(SELECT CASE WHEN SUM(B.PartsTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.PartsTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WPO') AS[PartsIncomeWPO], "
				// Parts Internal				
				+ "(SELECT CASE WHEN SUM(B.PartsTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.PartsTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'I') AS[PartsIncomeI], "
				+ "(SELECT CASE WHEN SUM(B.PartsTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.PartsTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'WO') AS[PartsIncomeWO], "
				+ "(SELECT CASE WHEN SUM(B.PartsTotal) IS NULL  "
				+ "THEN 0.00 ELSE CAST(ROUND(SUM(B.PartsTotal),2) AS NUMERIC(10,2))  "
				+ "END FROM ServiceJobsTable B  "
				+ "WHERE A.InvoiceNumber = B.InvoiceNumber AND  PayType = 'ASR') AS[PartsIncomeASR], "
				/* END OF PARTS */
				+ "CustomerCode, InvoiceNumber, VehicleStock, VehicleYear, VehicleMake, VehicleModel, WarrantyDeductable, LotName "
				+ "FROM ServiceInvoiceTable A "
				+ "WHERE InvoiceNumber = '" + invoiceNumber + "' ";

			//System.out.println("sql" + sql);

			ResultSet rs;
			rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);
			String[] array = new String[25];
			String lotName = "";
			String customerCode = "";
			Double tax;

			System.out.println("RO: " + invoiceNumber);

			while (rs.next()) {
				postingDate = rs.getString("PostedDate").toString();
				lotName = rs.getString("LotName").toString();
				customerCode = rs.getString("customerCode").toString();

				tax = Double.parseDouble(rs.getString("Tax").toString());
				int i = 0;

				//// LABOR SALES
				// Customer
				if (Double.parseDouble(rs.getString("LaborIncomeC")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborIncomeC").toString());
					array[i] = insertSqlService(new String[]{"450 - Labor - Customer", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("LaborIncomeWPO")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborIncomeWPO").toString());
					array[i] = insertSqlService(new String[]{"450 - Labor - Customer", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("Fees")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("Fees").toString());
					array[i] = insertSqlService(new String[]{"450 - Labor - Customer", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				// Warranty
				if (Double.parseDouble(rs.getString("LaborIncomeWPL")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborIncomeWPL").toString());
					array[i] = insertSqlService(new String[]{"452 - Labor - Warranty", "", val, postingDate, invoiceNumber, invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("LaborIncomeWLO")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborIncomeWLO").toString());
					array[i] = insertSqlService(new String[]{"452 - Labor - Warranty", "", val, postingDate, invoiceNumber, invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				// Internals
				if (Double.parseDouble(rs.getString("LaborIncomeI")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborIncomeI").toString());
					array[i] = insertSqlService(new String[]{"454 - Labor - Internal", "", val, postingDate, invoiceNumber, invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("LaborIncomeWO")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborIncomeWO").toString());
					array[i] = insertSqlService(new String[]{"454 - Labor - Internal", "", val, postingDate, invoiceNumber, invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("LaborIncomeASR")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborIncomeASR").toString());
					array[i] = insertSqlService(new String[]{"454 - Labor - Internal", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				//// END LABOR SALES

				if (Double.parseDouble(rs.getString("LaborCost")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborCost").toString());
					array[i] = insertSqlService(new String[]{"651 - Labor - COS", val, "", postingDate, "", invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborCost").toString());
					array[i] = insertSqlService(new String[]{"264 - Labor - In Process", "", val, postingDate, invoiceNumber, invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}

				//// SUBLET SALES
				// Customer
				if (Double.parseDouble(rs.getString("SubletIncomeC")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("SubletIncomeC").toString());
					array[i] = insertSqlService(new String[]{"456 - Sublet - Customer", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				// Warranty
				if (Double.parseDouble(rs.getString("SubletIncomeWPS")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("SubletIncomeWPS").toString());
					array[i] = insertSqlService(new String[]{"455 - Sublet - Warranty", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				// Internals
				if (Double.parseDouble(rs.getString("SubletIncomeI")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("SubletIncomeI").toString());
					array[i] = insertSqlService(new String[]{"457 - Sublet - Internal", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("SubletIncomeWO")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("SubletIncomeWO").toString());
					array[i] = insertSqlService(new String[]{"457 - Sublet - Internal", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("SubletIncomeASR")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("SubletIncomeASR").toString());
					array[i] = insertSqlService(new String[]{"457 - Sublet - Internal", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				//// END SUBLET SALES

				if (Double.parseDouble(rs.getString("SubletCost")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("SubletCost").toString());
					array[i] = insertSqlService(new String[]{"656 - Sublet - COS", val, "", postingDate, "", invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;

					array[i] = insertSqlService(new String[]{"263 - Sublet - Inventory", "", val, postingDate, invoiceNumber, invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}

				//// PARTS SALES
				// Customer
				if (Double.parseDouble(rs.getString("PartsIncomeC")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsIncomeC").toString());
					array[i] = insertSqlService(new String[]{"470 - Parts - Customer", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("PartsIncomeWLO")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsIncomeWLO").toString());
					array[i] = insertSqlService(new String[]{"470 - Parts - Customer", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				// Warranty
				if (Double.parseDouble(rs.getString("PartsIncomeWPL")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsIncomeWPL").toString());
					array[i] = insertSqlService(new String[]{"472 - Parts - Warranty", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("PartsIncomeWPO")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsIncomeWPO").toString());
					array[i] = insertSqlService(new String[]{"472 - Parts - Warranty", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				// Internals
				if (Double.parseDouble(rs.getString("PartsIncomeI")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsIncomeI").toString());
					array[i] = insertSqlService(new String[]{"473 - Parts - Internal", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("PartsIncomeWO")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsIncomeWO").toString());
					array[i] = insertSqlService(new String[]{"473 - Parts - Internal", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("PartsIncomeASR")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsIncomeASR").toString());
					array[i] = insertSqlService(new String[]{"473 - Parts - Internal", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				//// END PARTS SALES

				if (Double.parseDouble(rs.getString("PartsCost")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsCost").toString());
					array[i] = insertSqlService(new String[]{"670 - Parts - COS", val, "", postingDate, "", invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsCost").toString());
					array[i] = insertSqlService(new String[]{"262 - Parts - Inventory", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}

				if (Double.parseDouble(rs.getString("ShopSupplies")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("ShopSupplies").toString());
					array[i] = insertSqlService(new String[]{"458 - Other Shop Fees", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}

				//// RECEIVABLES
				if (Double.parseDouble(rs.getString("CustomerPay")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("Total").toString());
					array[i] = insertSqlService(new String[]{"215 - Service Customer Receivable", val, "", postingDate, "",
						invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("WarrantyDeductable")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("WarrantyDeductable").toString());

					if (Double.parseDouble(rs.getString("CustomerPay")) == 0.00) {
						array[i] = insertSqlService(new String[]{"215 - Service Customer Receivable", val, "", postingDate, "",
							invoiceNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						i++;
					}

					array[i] = insertSqlService(new String[]{"450 - Labor - Customer", "", val, postingDate, "", invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("LaborIncomeWPL")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborIncomeWPL").toString());
					array[i] = insertSqlService(new String[]{"216 - Service Warranty Receivable", val, "", postingDate, customerCode,
						invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("LaborIncomeWLO")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("LaborIncomeWLO").toString());
					array[i] = insertSqlService(new String[]{"216 - Service Warranty Receivable", val, "", postingDate, customerCode,
						invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("SubletIncomeWPS")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("SubletIncomeWPS").toString());
					array[i] = insertSqlService(new String[]{"216 - Service Warranty Receivable", val, "", postingDate, customerCode,
						invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("PartsIncomeWPL")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsIncomeWPL").toString());
					array[i] = insertSqlService(new String[]{"216 - Service Warranty Receivable", val, "", postingDate, customerCode,
						invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("PartsIncomeWPO")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("PartsIncomeWPO").toString());
					val = Double.toString(Double.parseDouble(val));
					array[i] = insertSqlService(new String[]{"216 - Service Warranty Receivable", val, "", postingDate, customerCode,
						invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				//// END RECEIVABLES

				if (Double.parseDouble(rs.getString("AfterSalesRepair")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("AfterSalesRepair"));
					array[i] = insertSqlService(new String[]{"607 - After Sales Receivable", val, "", postingDate, "",
						invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("WeOwe")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("WeOwe"));
					array[i] = insertSqlService(new String[]{"607 - After Sales Receivable", val, "", postingDate, "",
						invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;
				}
				if (Double.parseDouble(rs.getString("Internal")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("Internal"));
					array[i] = insertSqlService(new String[]{"251 - Vehicle Inventory", val, "", postingDate,
						rs.getString("VehicleStock").toString(), invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					i++;
				}

				if (Double.parseDouble(rs.getString("Tax")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("Tax").toString());
					array[i] = insertSqlService(new String[]{"333 - Sales Tax Payable", "", val, postingDate, invoiceNumber, invoiceNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					i++;
				}

				if (Double.parseDouble(rs.getString("Discount")) != 0.00) {
					val = AccountingUtil.formatAmountForDisplay(rs.getString("Discount"));
					array[i] = insertSqlService(new String[]{"657 - Repair Order Discount", val, "", postingDate, invoiceNumber, invoiceNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
				}

			}

			debits = Math.round(debits * 100.0) / 100.0;
			credits = Math.round(credits * 100.0) / 100.0;
			Double balance;
			balance = debits - credits;
			balance = Math.round(balance * 100.0) / 100.0;

			if (debits.equals(credits)) {
				for (int i = 0; i < array.length; i++) {
					if (array[i] != null) {
						//System.out.println("RO: " + invoiceNumber);
						//System.out.println("sql - " + i + " - " + array[i]);
						dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{array[i]}, this);
					}
				}

				sql = "UPDATE ServiceInvoiceTable SET PostedDate = '" + postingDate + "' "
					+ " WHERE InvoiceNumber = '" + invoiceNumber + "'";
				dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{sql}, this);

			} else {
				// Handle 0.01
				// if its out of balance for a .01 or -.01 then add then outofblance cents to the sales tax payable.
				// then add the rest of the deal and update the deal posted date
				if (balance == 0.01) {
					val = "0.01";
					sql = insertSqlService(new String[]{"333 - Sales Tax Payable", "", val, postingDate,
						invoiceNumber, invoiceNumber, "MIAMI"});

					//System.out.println("0.01" + sql);
					dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{sql}, this);

				} else if (balance == -0.01) {
					val = "0.01";
					sql = insertSqlService(new String[]{"333 - Sales Tax Payable", val, "", postingDate,
						invoiceNumber, invoiceNumber, "MIAMI"});

					//System.out.println("0.01" + sql);
					dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{sql}, this);

				}
				if (balance == 0.01 || balance == -0.01) {
					for (int i = 0; i < array.length; i++) {
						if (array[i] != null) {
							System.out.println("RO (0.01): " + invoiceNumber);
							//System.out.println("sql " + array[i]);
							dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{array[i]}, this);
						}
					}

					sql = "UPDATE ServiceInvoiceTable SET PostedDate = '" + postingDate + "' "
						+ " WHERE InvoiceNumber = '" + invoiceNumber + "'";
					dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{sql}, this);

				}

				System.out.println("RO: " + invoiceNumber);
				System.out.println("debits: " + debits);
				System.out.println("credit: " + credits);
			}

		} catch (SQLException ex) {
			Logger.getLogger(AccountingWindow.class
				.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void collectionsToAccounting(String transactionNumber) {
		try {
			Double cash = 0.00;
			Double check = 0.00;
			Double charge = 0.00;

			String postedDate = "";
			Double debits = 0.00;
			Double credits = 0.00;
			String val = null;
			String sql;
			String controlNumber;
			String referenceNumber;

			if (inprogressRadioButton.isSelected()) {
				postedDate = "ROOpen AS PostedDate, ";
			} else if (completedRadioButton.isSelected()) {
				postedDate = "ROCompleted AS PostedDate, ";
			} else if (closedRadioButton.isSelected()) {
				postedDate = "ROClosed AS PostedDate, ";
			}

			sql = "SELECT TransactionNumber, AccountNumber, [DateNTime], "
				+ "CAST(ROUND([CASH],2) AS NUMERIC(10,2)) AS Cash, "
				+ "CAST(ROUND([CHECK],2) AS NUMERIC(10,2)) AS [Check], "
				+ "CAST(ROUND([CHARGE],2) AS NUMERIC(10,2)) AS Charge, "
				+ "Reason, A.LotName, B.CustomerCode "
				+ "FROM [CashierTable] A "
				+ "LEFT JOIN ServiceInvoiceTable B "
				+ "ON (A.AccountNumber = B.InvoiceNumber) "
				+ "WHERE ([CASH] != 0.00 OR [CHECK] != 0.00 OR [CHARGE] != 0.00) "
				+ "AND TransactionNumber = '" + transactionNumber + "'";

			//System.out.println("sql" + sql);

			ResultSet rs;
			rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

			while (rs.next()) {

				cash = Double.parseDouble(rs.getString("Cash").toString());
				check = Double.parseDouble(rs.getString("Check").toString());
				charge = Double.parseDouble(rs.getString("Charge").toString());
				referenceNumber = rs.getString("AccountNumber");
				controlNumber = rs.getString("CustomerCode");

				if ("Invoice Payment".equals(rs.getString("Reason"))) {

					if (cash != 0.00) {
						val = cash.toString();
					} else if (check != 0.00) {
						val = check.toString();
					} else if (charge != 0.00) {
						val = charge.toString();
					}
					sql = insertSqlCollections(new String[]{"215 - Service Customer Receivable", "", val,
						rs.getString("DateNTime").toString(), controlNumber, referenceNumber, rs.getString("LotName").toString()});

				} else if ("Warranty Receivable".equals(rs.getString("Reason"))) {

					if (cash != 0.00) {
						val = cash.toString();
					} else if (check != 0.00) {
						val = check.toString();
					} else if (charge != 0.00) {
						val = charge.toString();
					}
					sql = insertSqlCollections(new String[]{"216 - Service Warranty Receivable", "", val,
						rs.getString("DateNTime").toString(), controlNumber, referenceNumber, rs.getString("LotName").toString()});

				}

			}

			//System.out.println("sql " + sql);
			dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{sql}, this);

		} catch (SQLException ex) {
			Logger.getLogger(AccountingWindow.class
				.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void dealsToAccounting(String dealNumber) {
		try {
			String customerNumber;
			String salesperson1Number;
			String salesperson2Number;
			String financeManager;
			String tradeInCode1;
			String tradeInCode2;
			int row = 0;
			Double debits = 0.00;
			Double credits = 0.00;
			Double acv1 = 0.00;
			Double acv2 = 0.00;
			Double journalBalance = 0.00;
			String val;
			DefaultTableModel aModel;
			String postedDate;
			String lotName;
			String stockNumber;
			int i = 0;

			String sql = "SELECT "
				+ "CAST(ROUND(SalesPrice,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(GapAmount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(Product1Amount,2) AS NUMERIC(10,2)) + CAST(ROUND(Product2Amount,2) AS NUMERIC(10,2)) + "
				+ "CAST(ROUND(Product3Amount,2) AS NUMERIC(10,2)) + CAST(ROUND(Product4Amount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(Product1Cost,2) AS NUMERIC(10,2)) + CAST(ROUND(Product2Cost,2) AS NUMERIC(10,2)) + "
				+ "CAST(ROUND(Product3Cost,2) AS NUMERIC(10,2)) + CAST(ROUND(Product4Cost,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(SalesTax,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(A.Tags,2) AS NUMERIC(10,2)) + CAST(ROUND(A.Title,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(DealerFee,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(DownPayment,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(BalanceDue,2) AS NUMERIC(10,2)) - CAST(ROUND(Discount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(ReserveAmount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(Discount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(TradeAllowance1,2) AS NUMERIC(10,2)) + CAST(ROUND(TradeAllowance2,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(Commissions1,2) AS NUMERIC(10,2)) + CAST(ROUND(Commissions2,2) AS NUMERIC(10,2)) + "
				+ "CAST(ROUND(FinanceCommissions,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(FinanceCommissions,2) AS NUMERIC(10,2)), "
				+ "BuyerCode, "
				+ "AccountNumber, "
				+ "CAST(ROUND(B.PurchasedPrice,2) AS NUMERIC(10,2)) AS PurchasePrice, "
				+ "CAST(ROUND(GapCost,2) AS NUMERIC(10,2)), "
				+ "A.StockNumber, Year, Make, Model, "
				+ "CAST(ROUND(Repairs,2) AS NUMERIC(10,2)) AS Repairs, "
				+ "CAST(ROUND(B.Cost,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(ReserveAmount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(GapCost,2) AS NUMERIC(10,2)) + CAST(ROUND(Product1Cost,2) AS NUMERIC(10,2)) + "
				+ "CAST(ROUND(Product2Cost,2) AS NUMERIC(10,2)) + CAST(ROUND(Product3Cost,2) AS NUMERIC(10,2)) + "
				+ "CAST(ROUND(Product4Cost,2) AS NUMERIC(10,2)) + CAST(ROUND(WarrantyCost,2) AS NUMERIC(10,2)) AS InsurancePayable, "
				+ "CAST(ROUND(WarrantyPrice,2) AS NUMERIC(10,2)), CAST(ROUND(WarrantyCost,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(TradeInPayoff,2) AS NUMERIC(10,2)), "
				+ "A.Salesman1, TradeInCode1, TradeInCode2, CAST(ROUND(ACV1,2) AS NUMERIC(10,2)), CAST(ROUND(ACV2,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(TradeAllowance1,2) AS NUMERIC(10,2)), CAST(ROUND(TradeAllowance2,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(Commissions1,2) AS NUMERIC(10,2)) AS Commissions1, CAST(ROUND(Commissions2,2) AS NUMERIC(10,2)) AS Commissions2, "
				+ "CAST(ROUND(FinanceCommissions,2) AS NUMERIC(10,2)) AS FinanceCommissions, FinanceManager, Salesman1, Salesman2, PostedDate, "
				+ "A.SoldDate, A.LotName "
				+ "FROM DealsTable A "
				+ "LEFT JOIN InventoryTable B "
				+ "ON A.StockNumber = B.StockNumber "
				+ "WHERE AccountNumber = '" + dealNumber + "'";
			//System.out.println(sql);

			ResultSet rs;
			rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

			String[] array = new String[35];

			System.out.println("Deal Number: " + dealNumber);
			int z;

			while (rs.next()) {

				customerNumber = rs.getString("BuyerCode").toString();
				salesperson1Number = rs.getString("Salesman1").toString();
				salesperson2Number = rs.getString("Salesman2").toString();
				financeManager = rs.getString("FinanceManager").toString();
				postedDate = rs.getString("SoldDate");
				lotName = rs.getString("LotName");
				stockNumber = rs.getString("StockNumber");
				z = 1;

				if (journalWholesaleRadio.isSelected()) {

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 1).toString());
					array[z] = insertSqlWholesale(new String[]{"402 - Vehicle Wholesale", "", val, postedDate, "", dealNumber, lotName, ""});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString("PurchasePrice").toString());
					array[z] = insertSqlWholesale(new String[]{"600 - COS-Vehicle", val, "", postedDate, "", dealNumber, lotName, ""});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString("Repairs").toString());
					array[z] = insertSqlWholesale(new String[]{"603 - COS-Repairs&Transport", val, "", postedDate, "", dealNumber, lotName, ""});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 24).toString());
					array[z] = insertSqlWholesale(new String[]{"251 - Vehicle Inventory", "", val, postedDate, stockNumber, dealNumber, lotName, ""});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 6).toString());
					array[z] = insertSqlWholesale(new String[]{"321 - Tags & Titles", "", val, postedDate, "", dealNumber, lotName, ""});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 8).toString());
					array[z] = insertSqlWholesale(new String[]{"322 - Customer Deposit", val, "", postedDate, customerNumber, dealNumber, lotName, ""});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 9).toString());
					array[z] = insertSqlWholesale(new String[]{"211 - Contracts in Transit", val, "", postedDate, customerNumber, dealNumber, lotName, ""});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					if (!"0.00".equals(rs.getString("Commissions1").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("Commissions1").toString());
						array[z] = insertSqlWholesale(new String[]{"605 - Sales Commissions", val, "", postedDate, salesperson1Number, dealNumber, lotName, ""});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlWholesale(new String[]{"334 - Commissions", "", val, postedDate, salesperson1Number, dealNumber, lotName, ""});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;

					}

					if (!"0.00".equals(rs.getString("Commissions2").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("Commissions2").toString());
						array[z] = insertSqlWholesale(new String[]{"605 - Sales Commissions", val, "", postedDate, salesperson2Number, dealNumber, lotName, ""});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlWholesale(new String[]{"334 - Commissions", "", val, postedDate, salesperson2Number, dealNumber, lotName, ""});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;

					}

					if (!"0.00".equals(rs.getString("FinanceCommissions").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("FinanceCommissions").toString());
						array[z] = insertSqlWholesale(new String[]{"606 - Sales Management", val, "", postedDate, financeManager, dealNumber, lotName, ""});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlWholesale(new String[]{"334 - Commissions", "", val, postedDate, financeManager, dealNumber, lotName, ""});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;

					}

					tradeInCode1 = rs.getString(i + 31).toString();
					if (!tradeInCode1.equals("0")) {
						acv1 = Double.parseDouble(rs.getString(i + 33).toString());
						val = AccountingUtil.formatAmountForDisplay(acv1.toString());
						array[z] = insertSqlWholesale(new String[]{"251 - Vehicle Inventory", val, "", postedDate, tradeInCode1, dealNumber, lotName, ""});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					tradeInCode2 = rs.getString(i + 32).toString();
					if (!tradeInCode2.equals("0")) {
						acv2 = Double.parseDouble(rs.getString(i + 33).toString());
						val = AccountingUtil.formatAmountForDisplay(acv2.toString());
						array[z] = insertSqlWholesale(new String[]{"251 - Vehicle Inventory", val, "", postedDate, tradeInCode2, dealNumber, lotName, ""});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					Double trade1OverAllowance = Double.parseDouble(rs.getString(i + 35).toString());
					Double val1;
					if (trade1OverAllowance > acv1) {
						val1 = trade1OverAllowance - acv1;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlWholesale(new String[]{"608 - Trade-In Over Allowance", val, "", postedDate, "", dealNumber, lotName, ""});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					} else if (trade1OverAllowance < acv1) {
						val1 = acv1 - trade1OverAllowance;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlWholesale(new String[]{"608 - Trade-In Over Allowance", "", val, postedDate, "", dealNumber, lotName, ""});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					Double trade2OverAllowance = Double.parseDouble(rs.getString(i + 36).toString());
					if (trade2OverAllowance > acv2) {
						val1 = trade2OverAllowance - acv2;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlWholesale(new String[]{"608 - Trade-In Over Allowance", val, "", postedDate, "", dealNumber, lotName, ""});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					} else if (trade2OverAllowance < acv2) {
						val1 = acv2 - trade2OverAllowance;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlWholesale(new String[]{"608 - Trade-In Over Allowance", "", val, postedDate, "", dealNumber, lotName, ""});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 11).toString());
					array[z] = insertSqlWholesale(new String[]{"602 - Discount - Vehicle Sales", val, "", postedDate, "", dealNumber, lotName, ""});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

				} else {

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 1).toString());
					array[z] = insertSqlDeals(new String[]{"400 - Sales Vehicles", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 17).toString());
					array[z] = insertSqlDeals(new String[]{"600 - COS-Vehicle", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 23).toString());
					array[z] = insertSqlDeals(new String[]{"603 - COS-Repairs&Transport", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 24).toString());
					array[z] = insertSqlDeals(new String[]{"251 - Vehicle Inventory", "", val, postedDate, stockNumber, dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 2).toString());
					array[z] = insertSqlDeals(new String[]{"445 - GAP Income", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 18).toString());
					array[z] = insertSqlDeals(new String[]{"648 - COS  - GAP", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 3).toString());
					array[z] = insertSqlDeals(new String[]{"448 - Product Sales", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 4).toString());
					array[z] = insertSqlDeals(new String[]{"649 - COS - Product", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 27).toString());
					array[z] = insertSqlDeals(new String[]{"447 - Warranty Sales", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 28).toString());
					array[z] = insertSqlDeals(new String[]{"647 - COS - Warranty", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 5).toString());
					array[z] = insertSqlDeals(new String[]{"333 - Sales Tax Payable", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 6).toString());
					array[z] = insertSqlDeals(new String[]{"321 - Tags & Titles", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 7).toString());
					array[z] = insertSqlDeals(new String[]{"401 - Dealer Fees", "", val, postedDate, customerNumber, dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 8).toString());
					array[z] = insertSqlDeals(new String[]{"322 - Customer Deposit", val, "", postedDate, customerNumber, dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 9).toString());
					array[z] = insertSqlDeals(new String[]{"211 - Contracts in Transit", val, "", postedDate, customerNumber, dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 25).toString());
					array[z] = insertSqlDeals(new String[]{"443 - Finance Income", "", val, postedDate, dealNumber, dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 10).toString());
					array[z] = insertSqlDeals(new String[]{"271 - Finance Income Receivable", val, "", postedDate, dealNumber, dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 11).toString());
					array[z] = insertSqlDeals(new String[]{"602 - Discount - Vehicle Sales", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					tradeInCode1 = rs.getString(i + 31).toString();
					if (!tradeInCode1.equals("0")) {
						acv1 = Double.parseDouble(rs.getString(i + 33).toString());
						val = AccountingUtil.formatAmountForDisplay(acv1.toString());
						array[z] = insertSqlDeals(new String[]{"251 - Vehicle Inventory", val, "", postedDate, tradeInCode1, dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					tradeInCode2 = rs.getString(i + 32).toString();
					if (!tradeInCode2.equals("0")) {
						acv2 = Double.parseDouble(rs.getString(i + 33).toString());
						val = AccountingUtil.formatAmountForDisplay(acv2.toString());
						array[z] = insertSqlDeals(new String[]{"251 - Vehicle Inventory", val, "", postedDate, tradeInCode2, dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					Double trade1OverAllowance = Double.parseDouble(rs.getString(i + 35).toString());
					Double val1;
					if (trade1OverAllowance > acv1) {
						val1 = trade1OverAllowance - acv1;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlDeals(new String[]{"608 - Trade-In Over Allowance", val, "", postedDate, "", dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					} else if (trade1OverAllowance < acv1) {
						val1 = acv1 - trade1OverAllowance;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlDeals(new String[]{"608 - Trade-In Over Allowance", "", val, postedDate, "", dealNumber, lotName});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					Double trade2OverAllowance = Double.parseDouble(rs.getString(i + 36).toString());
					if (trade2OverAllowance > acv2) {
						val1 = trade2OverAllowance - acv2;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlDeals(new String[]{"608 - Trade-In Over Allowance", val, "", postedDate, "", dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					} else if (trade2OverAllowance < acv2) {
						val1 = acv2 - trade2OverAllowance;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlDeals(new String[]{"608 - Trade-In Over Allowance", "", val, postedDate, "", dealNumber, lotName});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 26).toString());
					array[z] = insertSqlDeals(new String[]{"332 - Insurance Payable", "", val, postedDate, dealNumber, dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					if (!"0.00".equals(rs.getString("Commissions1").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("Commissions1").toString());
						array[z] = insertSqlDeals(new String[]{"605 - Sales Commissions", val, "", postedDate, salesperson1Number, dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlDeals(new String[]{"334 - Commissions", "", val, postedDate, salesperson1Number, dealNumber, lotName});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					if (!"0.00".equals(rs.getString("Commissions2").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("Commissions2").toString());
						array[z] = insertSqlDeals(new String[]{"605 - Sales Commissions", val, "", postedDate, salesperson2Number, dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlDeals(new String[]{"334 - Commissions", "", val, postedDate, salesperson2Number, dealNumber, lotName});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					if (!"0.00".equals(rs.getString("FinanceCommissions").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("FinanceCommissions").toString());
						array[z] = insertSqlDeals(new String[]{"606 - Sales Management", val, "", postedDate, financeManager, dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlDeals(new String[]{"334 - Commissions", "", val, postedDate, financeManager, dealNumber, lotName});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 29).toString());
					array[z] = insertSqlDeals(new String[]{"320 - Vehicle Lien Payoffs", "", val, postedDate, customerNumber, dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;
				}

				debits = Math.round(debits * 100.0) / 100.0;
				credits = Math.round(credits * 100.0) / 100.0;

				if (debits.equals(credits)) {
					System.out.println("Deal: " + dealNumber);

					for (int x = 0; x < array.length; x++) {
						if (array[x] != null) {
							//System.out.println("sql(" + x + "): " + array[x]);
							dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{array[x]}, this);
						}
					}

					sql = "UPDATE DealsTable SET PostedDate = '" + postedDate + "' "
						+ " WHERE AccountNumber = '" + dealNumber + "'";
					//System.out.println("UPDATE " + sql);
					dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{sql}, this);

				} else {
					System.out.println("Deal: " + dealNumber);
					System.out.println("debits: " + debits);
					System.out.println("credit: " + credits);
				}
			}

		} catch (SQLException ex) {
			Logger.getLogger(AccountingWindow.class
				.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void dealsDeletedToAccounting(String dealNumber) {
		try {
			String customerNumber;
			String salesperson1Number;
			String salesperson2Number;
			String financeManager;
			String tradeInCode1;
			String tradeInCode2;
			int row = 0;
			Double debits = 0.00;
			Double credits = 0.00;
			Double acv1 = 0.00;
			Double acv2 = 0.00;
			Double journalBalance = 0.00;
			String val;
			DefaultTableModel aModel;
			String postedDate;
			String lotName;
			String stockNumber;
			int i = 0;

			String sql = "SELECT "
				+ "CAST(ROUND(SalesPrice,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(GapAmount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(Product1Amount,2) AS NUMERIC(10,2)) + CAST(ROUND(Product2Amount,2) AS NUMERIC(10,2)) + "
				+ "CAST(ROUND(Product3Amount,2) AS NUMERIC(10,2)) + CAST(ROUND(Product4Amount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(Product1Cost,2) AS NUMERIC(10,2)) + CAST(ROUND(Product2Cost,2) AS NUMERIC(10,2)) + "
				+ "CAST(ROUND(Product3Cost,2) AS NUMERIC(10,2)) + CAST(ROUND(Product4Cost,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(SalesTax,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(A.Tags,2) AS NUMERIC(10,2)) + CAST(ROUND(A.Title,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(DealerFee,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(DownPayment,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(BalanceDue,2) AS NUMERIC(10,2)) - CAST(ROUND(Discount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(ReserveAmount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(Discount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(TradeAllowance1,2) AS NUMERIC(10,2)) + CAST(ROUND(TradeAllowance2,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(Commissions1,2) AS NUMERIC(10,2)) + CAST(ROUND(Commissions2,2) AS NUMERIC(10,2)) + "
				+ "CAST(ROUND(FinanceCommissions,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(FinanceCommissions,2) AS NUMERIC(10,2)), "
				+ "BuyerCode, "
				+ "AccountNumber, "
				+ "CAST(ROUND(B.PurchasedPrice,2) AS NUMERIC(10,2)) AS PurchasePrice, "
				+ "CAST(ROUND(GapCost,2) AS NUMERIC(10,2)), "
				+ "A.StockNumber, Year, Make, Model, "
				+ "CAST(ROUND(Repairs,2) AS NUMERIC(10,2)) AS Repairs, "
				+ "CAST(ROUND(B.Cost,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(ReserveAmount,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(GapCost,2) AS NUMERIC(10,2)) + CAST(ROUND(Product1Cost,2) AS NUMERIC(10,2)) + "
				+ "CAST(ROUND(Product2Cost,2) AS NUMERIC(10,2)) + CAST(ROUND(Product3Cost,2) AS NUMERIC(10,2)) + "
				+ "CAST(ROUND(Product4Cost,2) AS NUMERIC(10,2)) + CAST(ROUND(WarrantyCost,2) AS NUMERIC(10,2)) AS InsurancePayable, "
				+ "CAST(ROUND(WarrantyPrice,2) AS NUMERIC(10,2)), CAST(ROUND(WarrantyCost,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(TradeInPayoff,2) AS NUMERIC(10,2)), "
				+ "A.Salesman1, TradeInCode1, TradeInCode2, CAST(ROUND(ACV1,2) AS NUMERIC(10,2)), CAST(ROUND(ACV2,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(TradeAllowance1,2) AS NUMERIC(10,2)), CAST(ROUND(TradeAllowance2,2) AS NUMERIC(10,2)), "
				+ "CAST(ROUND(Commissions1,2) AS NUMERIC(10,2)) AS Commissions1, CAST(ROUND(Commissions2,2) AS NUMERIC(10,2)) AS Commissions2, "
				+ "CAST(ROUND(FinanceCommissions,2) AS NUMERIC(10,2)) AS FinanceCommissions, FinanceManager, Salesman1, Salesman2, PostedDate, "
				+ "A.SoldDate, A.LotName, "
				+ "CASE WHEN DAY(C.NoteDate) > 15 AND MONTH(DATEADD(MONTH, 1, A.SoldDate)) = MONTH(C.NoteDate) THEN "
				+ "C.NoteDate ELSE A.SoldDate END AS DeletedDate "
				+ "FROM DealsTable A "
				+ "LEFT JOIN InventoryTable B "
				+ "ON A.StockNumber = B.StockNumber "
				+ "LEFT JOIN NotesTable C "
				+ "ON (A.AccountNumber = C.Code AND C.CodeType = 'Deals' AND NoteText = 'Deleted Deal')"
				+ "WHERE AccountNumber = '" + dealNumber + "'";

			dealNumber = dealNumber + "-R";

			//System.out.println(sql);

			ResultSet rs;
			rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

			String[] array = new String[35];

			System.out.println("Deal Number: " + dealNumber);
			int z;

			while (rs.next()) {

				customerNumber = rs.getString("BuyerCode").toString();
				salesperson1Number = rs.getString("Salesman1").toString();
				salesperson2Number = rs.getString("Salesman2").toString();
				financeManager = rs.getString("FinanceManager").toString();
				//postedDate = rs.getString("SoldDate");
				lotName = rs.getString("LotName");
				stockNumber = rs.getString("StockNumber");
				z = 1;

				postedDate = rs.getString("DeletedDate");

				if (journalWholesaleDeletedRadio.isSelected()) {

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 1).toString());
					array[z] = insertSqlWholesaleDeleted(new String[]{"402 - Vehicle Wholesale", "", val, postedDate, "", dealNumber, lotName, ""});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString("PurchasePrice").toString());
					array[z] = insertSqlWholesaleDeleted(new String[]{"600 - COS-Vehicle", val, "", postedDate, "", dealNumber, lotName, ""});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString("Repairs").toString());
					array[z] = insertSqlWholesaleDeleted(new String[]{"603 - COS-Repairs&Transport", val, "", postedDate, "", dealNumber, lotName, ""});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 24).toString());
					array[z] = insertSqlWholesaleDeleted(new String[]{"251 - Vehicle Inventory", "", val, postedDate, stockNumber, dealNumber, lotName, ""});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 6).toString());
					array[z] = insertSqlWholesaleDeleted(new String[]{"321 - Tags & Titles", "", val, postedDate, "", dealNumber, lotName, ""});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 8).toString());
					array[z] = insertSqlWholesaleDeleted(new String[]{"322 - Customer Deposit", val, "", postedDate, customerNumber, dealNumber, lotName, ""});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 9).toString());
					array[z] = insertSqlWholesaleDeleted(new String[]{"211 - Contracts in Transit", val, "", postedDate, customerNumber, dealNumber, lotName, ""});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					if (!"0.00".equals(rs.getString("Commissions1").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("Commissions1").toString());
						array[z] = insertSqlWholesaleDeleted(new String[]{"605 - Sales Commissions", val, "", postedDate, salesperson1Number, dealNumber, lotName, ""});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlWholesaleDeleted(new String[]{"334 - Commissions", "", val, postedDate, salesperson1Number, dealNumber, lotName, ""});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;

					}

					if (!"0.00".equals(rs.getString("Commissions2").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("Commissions2").toString());
						array[z] = insertSqlWholesaleDeleted(new String[]{"605 - Sales Commissions", val, "", postedDate, salesperson2Number, dealNumber, lotName, ""});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlWholesaleDeleted(new String[]{"334 - Commissions", "", val, postedDate, salesperson2Number, dealNumber, lotName, ""});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;

					}

					if (!"0.00".equals(rs.getString("FinanceCommissions").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("FinanceCommissions").toString());
						array[z] = insertSqlWholesaleDeleted(new String[]{"606 - Sales Management", val, "", postedDate, financeManager, dealNumber, lotName, ""});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlWholesaleDeleted(new String[]{"334 - Commissions", "", val, postedDate, financeManager, dealNumber, lotName, ""});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;

					}

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 11).toString());
					array[z] = insertSqlWholesaleDeleted(new String[]{"602 - Discount - Vehicle Sales", val, "", postedDate, "", dealNumber, lotName, ""});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;


				}
				if (journalRetailsDeletedRadio.isSelected()) {

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 1).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"400 - Sales Vehicles", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 17).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"600 - COS-Vehicle", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 23).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"603 - COS-Repairs&Transport", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 24).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"251 - Vehicle Inventory", "", val, postedDate, stockNumber, dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 2).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"445 - GAP Income", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 18).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"648 - COS  - GAP", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 3).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"448 - Product Sales", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 4).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"649 - COS - Product", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 27).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"447 - Warranty Sales", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 28).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"647 - COS - Warranty", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 5).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"333 - Sales Tax Payable", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 6).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"321 - Tags & Titles", "", val, postedDate, "", dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 7).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"401 - Dealer Fees", "", val, postedDate, customerNumber, dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 8).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"322 - Customer Deposit", val, "", postedDate, customerNumber, dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 9).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"211 - Contracts in Transit", val, "", postedDate, customerNumber, dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 25).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"443 - Finance Income", "", val, postedDate, dealNumber, dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 10).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"271 - Finance Income Receivable", val, "", postedDate, dealNumber, dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 11).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"602 - Discount - Vehicle Sales", val, "", postedDate, "", dealNumber, lotName});
					debits += Double.parseDouble(val.replace(",", ""));
					z++;

					tradeInCode1 = rs.getString(i + 31).toString();
					if (!tradeInCode1.equals("0")) {
						acv1 = Double.parseDouble(rs.getString(i + 33).toString());
						val = AccountingUtil.formatAmountForDisplay(acv1.toString());
						array[z] = insertSqlDealsDeleted(new String[]{"251 - Vehicle Inventory", val, "", postedDate, tradeInCode1, dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					tradeInCode2 = rs.getString(i + 32).toString();
					if (!tradeInCode2.equals("0")) {
						acv2 = Double.parseDouble(rs.getString(i + 33).toString());
						val = AccountingUtil.formatAmountForDisplay(acv2.toString());
						array[z] = insertSqlDealsDeleted(new String[]{"251 - Vehicle Inventory", val, "", postedDate, tradeInCode2, dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					Double trade1OverAllowance = Double.parseDouble(rs.getString(i + 35).toString());
					Double val1;
					if (trade1OverAllowance > acv1) {
						val1 = trade1OverAllowance - acv1;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlDealsDeleted(new String[]{"608 - Trade-In Over Allowance", val, "", postedDate, "", dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					} else if (trade1OverAllowance < acv1) {
						val1 = acv1 - trade1OverAllowance;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlDealsDeleted(new String[]{"608 - Trade-In Over Allowance", "", val, postedDate, "", dealNumber, lotName});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					Double trade2OverAllowance = Double.parseDouble(rs.getString(i + 36).toString());
					if (trade2OverAllowance > acv2) {
						val1 = trade2OverAllowance - acv2;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlDealsDeleted(new String[]{"608 - Trade-In Over Allowance", val, "", postedDate, "", dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;
					} else if (trade2OverAllowance < acv2) {
						val1 = acv2 - trade2OverAllowance;
						val = AccountingUtil.formatAmountForDisplay(val1.toString());
						array[z] = insertSqlDealsDeleted(new String[]{"608 - Trade-In Over Allowance", "", val, postedDate, "", dealNumber, lotName});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 26).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"332 - Insurance Payable", "", val, postedDate, dealNumber, dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;

					if (!"0.00".equals(rs.getString("Commissions1").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("Commissions1").toString());
						array[z] = insertSqlDealsDeleted(new String[]{"605 - Sales Commissions", val, "", postedDate, salesperson1Number, dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlDealsDeleted(new String[]{"334 - Commissions", "", val, postedDate, salesperson1Number, dealNumber, lotName});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					if (!"0.00".equals(rs.getString("Commissions2").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("Commissions2").toString());
						array[z] = insertSqlDealsDeleted(new String[]{"605 - Sales Commissions", val, "", postedDate, salesperson2Number, dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlDealsDeleted(new String[]{"334 - Commissions", "", val, postedDate, salesperson2Number, dealNumber, lotName});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					if (!"0.00".equals(rs.getString("FinanceCommissions").toString())) {
						val = AccountingUtil.formatAmountForDisplay(rs.getString("FinanceCommissions").toString());
						array[z] = insertSqlDealsDeleted(new String[]{"606 - Sales Management", val, "", postedDate, financeManager, dealNumber, lotName});
						debits += Double.parseDouble(val.replace(",", ""));
						z++;

						array[z] = insertSqlDealsDeleted(new String[]{"334 - Commissions", "", val, postedDate, financeManager, dealNumber, lotName});
						credits += Double.parseDouble(val.replace(",", ""));
						z++;
					}

					val = AccountingUtil.formatAmountForDisplay(rs.getString(i + 29).toString());
					array[z] = insertSqlDealsDeleted(new String[]{"320 - Vehicle Lien Payoffs", "", val, postedDate, customerNumber, dealNumber, lotName});
					credits += Double.parseDouble(val.replace(",", ""));
					z++;
				}

				debits = Math.round(debits * 100.0) / 100.0;
				credits = Math.round(credits * 100.0) / 100.0;

				if (debits.equals(credits)) {
					System.out.println("Deal: " + dealNumber);

					for (int x = 0; x < array.length; x++) {
						if (array[x] != null) {
							//System.out.println("sql(" + x + "): " + array[x]);
							dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{array[x]}, this);
						}
					}

					sql = "INSERT INTO NotesTable (Code, CodeType, NoteDate, NoteUser, NoteType, NoteText) "
						+ "VALUES('" + dealNumber.replaceAll("-R", "") + "','Deals','" + postedDate + "','System',"
						+ "'REVERSAL','Reversal From Accounting')";

					//sql = "UPDATE DealsTable SET PostedDate = '" + postedDate + "' "
					//	+ " WHERE AccountNumber = '" + dealNumber + "'";
					//System.out.println("INSERT " + sql);
					dms.DMSApp.getApplication().getDBConnection().executeStatements(new String[]{sql}, this);

				} else {
					System.out.println("Deal: " + dealNumber);
					System.out.println("debits: " + debits);
					System.out.println("credit: " + credits);
				}

			}

		} catch (SQLException ex) {
			Logger.getLogger(AccountingWindow.class
				.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private String insertSqlService(String[] myArray) {
		//System.out.println("myArray: " + myArray[0]);
		Double credit = 0.00;
		Double debit = 0.00;

		String sql;
		String accountNumber = myArray[0];
		String postedDate = myArray[3];
		String controlNumber = myArray[4];
		String referenceNumber = myArray[5];
		String lotName = myArray[6];


		if (!myArray[1].isEmpty()) {
			credit = Double.parseDouble(myArray[1].replaceAll(",", ""));
		}

		if (!myArray[2].isEmpty()) {
			debit = Double.parseDouble(myArray[2].replaceAll(",", ""));
		}

		accountNumber = accountNumber.substring(0, accountNumber.indexOf("-"));

		sql = "INSERT INTO AccountingGLTable (AccountNumber, Debit, Credit, ControlNumber, ReferenceNumber, PostDate, GLType, LotName, Class) VALUES("
			+ "'" + accountNumber + "', '" + credit + "', '" + debit + "', '" + controlNumber + "', '" + referenceNumber + "', "
			+ "'" + postedDate + "', 'Service Journal - ETL', "
			+ "'" + lotName + "','Miami:Service'"
			+ ")";

		//System.out.println("sql: " + sql);

		return sql;
	}

	private String insertSqlCollections(String[] myArray) {
		//System.out.println("myArray: " + myArray[0]);
		Double credit = 0.00;
		Double debit = 0.00;

		String sql;
		String accountNumber = myArray[0];
		String postedDate = myArray[3];
		String controlNumber = myArray[4];
		String referenceNumber = myArray[5];
		String lotName = myArray[6];

		if (!myArray[1].isEmpty()) {
			credit = Double.parseDouble(myArray[1].replaceAll(",", ""));
		}

		if (!myArray[2].isEmpty()) {
			debit = Double.parseDouble(myArray[2].replaceAll(",", ""));
		}

		accountNumber = accountNumber.substring(0, accountNumber.indexOf("-"));

		sql = "INSERT INTO AccountingGLTable (AccountNumber, Debit, Credit, ControlNumber, ReferenceNumber, PostDate, GLType, LotName) VALUES("
			+ "'" + accountNumber + "', '" + credit + "', '" + debit + "', '" + controlNumber + "', '" + referenceNumber + "', "
			+ "'" + postedDate + "', 'Collections Journal - ETL', "
			+ "'" + lotName + "'"
			+ ")";

		//System.out.println("sql: " + sql);

		return sql;
	}

	private String insertSqlDeals(String[] myArray) {
		//System.out.println("myArray: " + myArray[0]);
		Double credit = 0.00;
		Double debit = 0.00;

		String sql;
		String accountNumber = myArray[0];
		String postedDate = myArray[3];
		String controlNumber = myArray[4];
		String referenceNumber = myArray[5];
		String lotName = myArray[6];

		if (!myArray[1].isEmpty()) {
			debit = Double.parseDouble(myArray[1].replaceAll(",", ""));
		}

		if (!myArray[2].isEmpty()) {
			credit = Double.parseDouble(myArray[2].replaceAll(",", ""));
		}

		accountNumber = accountNumber.substring(0, accountNumber.indexOf("-"));

		sql = "INSERT INTO AccountingGLTable (AccountNumber, Debit, Credit, ControlNumber, ReferenceNumber, PostDate, GLType, LotName) VALUES("
			+ "'" + accountNumber + "', '" + debit + "', '" + credit + "', '" + controlNumber + "', '" + referenceNumber + "', "
			+ "'" + postedDate + "', 'Deals Journal - ETL', "
			+ "'" + lotName + "'"
			+ ")";

		//System.out.println("sql: " + sql);

		return sql;
	}

	private String insertSqlDealsDeleted(String[] myArray) {
		//System.out.println("myArray: " + myArray[0]);
		Double credit = 0.00;
		Double debit = 0.00;

		String sql;
		String accountNumber = myArray[0];
		String postedDate = myArray[3];
		String controlNumber = myArray[4];
		String referenceNumber = myArray[5];
		String lotName = myArray[6];

		if (!myArray[1].isEmpty()) {
			debit = Double.parseDouble(myArray[1].replaceAll(",", ""));
		}

		if (!myArray[2].isEmpty()) {
			credit = Double.parseDouble(myArray[2].replaceAll(",", ""));
		}

		accountNumber = accountNumber.substring(0, accountNumber.indexOf("-"));

		sql = "INSERT INTO AccountingGLTable (AccountNumber, Debit, Credit, ControlNumber, ReferenceNumber, PostDate, GLType, LotName) VALUES("
			+ "'" + accountNumber + "', '" + credit + "', '" + debit + "', '" + controlNumber + "', '" + referenceNumber + "', "
			+ "'" + postedDate + "', 'Deals Reversal Journal - ETL', "
			+ "'" + lotName + "'"
			+ ")";

		//System.out.println("sql: " + sql);

		return sql;
	}

	private String insertSqlWholesale(String[] myArray) {
		//System.out.println("myArray: " + myArray[0]);
		Double credit = 0.00;
		Double debit = 0.00;

		String sql;
		String accountNumber = myArray[0];
		String postedDate = myArray[3];
		String controlNumber = myArray[4];
		String referenceNumber = myArray[5];
		String lotName = myArray[6];
		String memo = myArray[7];

		if (!myArray[1].isEmpty()) {
			debit = Double.parseDouble(myArray[1].replaceAll(",", ""));
		}

		if (!myArray[2].isEmpty()) {
			credit = Double.parseDouble(myArray[2].replaceAll(",", ""));
		}

		accountNumber = accountNumber.substring(0, accountNumber.indexOf("-"));

		sql = "INSERT INTO AccountingGLTable (AccountNumber, Debit, Credit, ControlNumber, ReferenceNumber, PostDate, GLType, LotName, Memo) VALUES("
			+ "'" + accountNumber + "', '" + debit + "', '" + credit + "', '" + controlNumber + "', '" + referenceNumber + "', "
			+ "'" + postedDate + "', 'Wholesale Journal - ETL', "
			+ "'" + lotName + "', '" + memo + "'"
			+ ")";

		//System.out.println("sql: " + sql);

		return sql;
	}

	private String insertSqlWholesaleDeleted(String[] myArray) {
		//System.out.println("myArray: " + myArray[0]);
		Double credit = 0.00;
		Double debit = 0.00;

		String sql;
		String accountNumber = myArray[0];
		String postedDate = myArray[3];
		String controlNumber = myArray[4];
		String referenceNumber = myArray[5];
		String lotName = myArray[6];
		String memo = myArray[7];

		if (!myArray[1].isEmpty()) {
			debit = Double.parseDouble(myArray[1].replaceAll(",", ""));
		}

		if (!myArray[2].isEmpty()) {
			credit = Double.parseDouble(myArray[2].replaceAll(",", ""));
		}

		accountNumber = accountNumber.substring(0, accountNumber.indexOf("-"));

		sql = "INSERT INTO AccountingGLTable (AccountNumber, Debit, Credit, ControlNumber, ReferenceNumber, PostDate, GLType, LotName, Memo) VALUES("
			+ "'" + accountNumber + "', '" + credit + "', '" + debit + "', '" + controlNumber + "', '" + referenceNumber + "', "
			+ "'" + postedDate + "', 'Wholesale Reversal Journal - ETL', "
			+ "'" + lotName + "', '" + memo + "'"
			+ ")";

		//System.out.println("sql: " + sql);

		return sql;
	}
}