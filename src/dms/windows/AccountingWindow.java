/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CashierWindow.java
 *
 * Created on Dec 12, 2011, 11:05:17 PM
 */
package dms.windows;

import dms.util.AccountingUtil;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.print.PageFormat;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.PrintService;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.swing.JRViewer;

/**
 *
 * @author Administrator
 */
public class AccountingWindow extends javax.swing.JPanel
{

  private static dms.panels.Journals journalsPanel;
  private static dms.panels.BankingPanel bankingPanel;
  private static dms.panels.COAPanel COAPanel;
  public static dms.panels.AccountsPayablePanel accountsPayablePanel;
  // var to addRow for billExpensesTable
  DecimalFormat df = new DecimalFormat("#0.00");
  String account = null;
  String amount = null;
  int enterCounter = 0;
  int rowNo = 0;
  PrinterJob printjob = PrinterJob.getPrinterJob();
  String printerName = "";
  String defaultPrinterName = "";
  boolean printerNotAssigned = false;
  static PrintService[] printServices;
  static PrintService printService;
  static PageFormat pageFormat;

  /**
   * Creates new form CashierWindow
   */
  public AccountingWindow(JFrame jf)
  {
    mainFrame = jf;
    mainFrame.setTitle("FFC Accounting");
    initComponents();
    AccountingUtil.loadChartOfAccounts();
    //journalsPanel = new dms.panels.Journals();
    journalsPanel = dms.panels.Journals.getInstance();
    //accountsPayablePanel = new dms.panels.AccountsPayablePanel();
    accountsPayablePanel = dms.panels.AccountsPayablePanel.getInstance();
    //bankingPanel = new dms.panels.BankingPanel();
    bankingPanel = dms.panels.BankingPanel.getInstance();
    //COAPanel = new dms.panels.COAPanel();
    COAPanel = dms.panels.COAPanel.getInstance();

    (jPanel11).add(new dms.panels.ToolsPanel());
    (jPanel63).add(journalsPanel);
    (jPanel65).add(COAPanel);
    (apBillsPanel).add(accountsPayablePanel);
    (jPanel91).add(bankingPanel);

    resetWindow();
    setMainFrame(mainFrame);
  }

  public static JFrame getMainFrame()
  {
    return mainFrame;
  }

  public static void setMainFrame(JFrame mainFrame)
  {
    AccountingWindow.mainFrame = mainFrame;
  }

  public static void disposeAccountingWindow()
  {
    System.out.println("Resetting Window ...");
    //mainFrame.dispose();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    buttonGroup1 = new javax.swing.ButtonGroup();
    buttonGroup2 = new javax.swing.ButtonGroup();
    buttonGroup3 = new javax.swing.ButtonGroup();
    buttonGroup4 = new javax.swing.ButtonGroup();
    buttonGroup5 = new javax.swing.ButtonGroup();
    buttonGroup6 = new javax.swing.ButtonGroup();
    buttonGroup8 = new javax.swing.ButtonGroup();
    collectionsPopup = new javax.swing.JDialog(mainFrame,true);
    jPanel72 = new javax.swing.JPanel();
    jPanel73 = new javax.swing.JPanel();
    collectPopupOkButton = new javax.swing.JButton();
    collectPopupCancelButton = new javax.swing.JButton();
    jPanel76 = new javax.swing.JPanel();
    jPanel80 = new javax.swing.JPanel();
    jPanel82 = new javax.swing.JPanel();
    jLabel98 = new javax.swing.JLabel();
    jLabel106 = new javax.swing.JLabel();
    jLabel109 = new javax.swing.JLabel();
    collectReasonLabel = new javax.swing.JLabel();
    collectReasonLabel1 = new javax.swing.JLabel();
    jPanel83 = new javax.swing.JPanel();
    collectCashField = new javax.swing.JFormattedTextField();
    collectCheckField = new javax.swing.JFormattedTextField();
    collectChargeField = new javax.swing.JFormattedTextField();
    collectReasonDD = new javax.swing.JComboBox();
    jTextField10 = new javax.swing.JTextField();
    collectReasonPanel = new javax.swing.JPanel();
    jScrollPane7 = new javax.swing.JScrollPane();
    collectReasonField = new javax.swing.JTextArea();
    payoutPopup = new javax.swing.JDialog(mainFrame,true);
    jPanel74 = new javax.swing.JPanel();
    jPanel75 = new javax.swing.JPanel();
    jButton32 = new javax.swing.JButton();
    jButton33 = new javax.swing.JButton();
    jPanel77 = new javax.swing.JPanel();
    jPanel84 = new javax.swing.JPanel();
    jPanel85 = new javax.swing.JPanel();
    jLabel99 = new javax.swing.JLabel();
    payReasonLabel = new javax.swing.JLabel();
    payReasonLabel1 = new javax.swing.JLabel();
    payReasonLabel2 = new javax.swing.JLabel();
    jPanel86 = new javax.swing.JPanel();
    payCashField = new javax.swing.JFormattedTextField();
    payReasonDD = new javax.swing.JComboBox();
    jTextField16 = new javax.swing.JTextField();
    jTextField17 = new javax.swing.JTextField();
    payReasonPanel = new javax.swing.JPanel();
    jScrollPane8 = new javax.swing.JScrollPane();
    payReasonField = new javax.swing.JTextArea();
    accountingPopup = new javax.swing.JDialog();
    jPanel78 = new javax.swing.JPanel();
    jPanel79 = new javax.swing.JPanel();
    jButton34 = new javax.swing.JButton();
    jButton35 = new javax.swing.JButton();
    jPanel81 = new javax.swing.JPanel();
    jPanel87 = new javax.swing.JPanel();
    jPanel88 = new javax.swing.JPanel();
    jLabel53 = new javax.swing.JLabel();
    jLabel100 = new javax.swing.JLabel();
    payReasonLabel4 = new javax.swing.JLabel();
    payReasonLabel5 = new javax.swing.JLabel();
    jPanel89 = new javax.swing.JPanel();
    jLabel54 = new javax.swing.JLabel();
    accountingAmountField = new javax.swing.JFormattedTextField();
    accountingAmountField1 = new javax.swing.JFormattedTextField();
    payReasonPanel1 = new javax.swing.JPanel();
    jScrollPane11 = new javax.swing.JScrollPane();
    accountingCommentField = new javax.swing.JTextArea();
    printPreview = new javax.swing.JDialog(mainFrame, true);
    printPreviewPanel = new javax.swing.JPanel();
    assignCollectionPopup = new javax.swing.JDialog();
    jPanel57 = new javax.swing.JPanel();
    jButton8 = new javax.swing.JButton();
    jButton9 = new javax.swing.JButton();
    jPanel61 = new javax.swing.JPanel();
    jLabel29 = new javax.swing.JLabel();
    jTextField12 = new javax.swing.JTextField();
    jButton10 = new javax.swing.JButton();
    jPanel62 = new javax.swing.JPanel();
    jComboBox1 = new javax.swing.JComboBox();
    jPanel58 = new javax.swing.JPanel();
    jScrollPane5 = new javax.swing.JScrollPane();
    jTable2 = new javax.swing.JTable();
    coaPopup = new javax.swing.JDialog(mainFrame,true);
    jPanel97 = new javax.swing.JPanel();
    jPanel99 = new javax.swing.JPanel();
    coaPopupOkButton = new javax.swing.JButton();
    coaPopupCancelButton = new javax.swing.JButton();
    jPanel100 = new javax.swing.JPanel();
    jPanel101 = new javax.swing.JPanel();
    filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(15, 15), new java.awt.Dimension(15, 15), new java.awt.Dimension(32767, 15));
    jPanel102 = new javax.swing.JPanel();
    filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
    jLabel101 = new javax.swing.JLabel();
    jLabel107 = new javax.swing.JLabel();
    jLabel110 = new javax.swing.JLabel();
    jPanel107 = new javax.swing.JPanel();
    filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
    coaAccountField = new javax.swing.JFormattedTextField();
    jTextField2 = new javax.swing.JTextField();
    coaTypeField = new javax.swing.JComboBox();
    filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(15, 15), new java.awt.Dimension(15, 15), new java.awt.Dimension(32767, 15));
    buttonGroup7 = new javax.swing.ButtonGroup();
    batchOutDialog = new javax.swing.JDialog();
    jPanel70 = new javax.swing.JPanel();
    jPanel71 = new javax.swing.JPanel();
    jPanel93 = new javax.swing.JPanel();
    jScrollPane16 = new javax.swing.JScrollPane();
    jTable4 = new javax.swing.JTable();
    jPanel94 = new javax.swing.JPanel();
    jPanel16 = new javax.swing.JPanel();
    jPanel23 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    chargeTotal = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    jPanel95 = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    jButton2 = new javax.swing.JButton();
    jLabel5 = new javax.swing.JLabel();
    jPanel90 = new javax.swing.JPanel();
    jPanel96 = new javax.swing.JPanel();
    jScrollPane18 = new javax.swing.JScrollPane();
    jTable5 = new javax.swing.JTable();
    jPanel98 = new javax.swing.JPanel();
    jPanel103 = new javax.swing.JPanel();
    jPanel104 = new javax.swing.JPanel();
    jLabel7 = new javax.swing.JLabel();
    checksTotal = new javax.swing.JTextField();
    jLabel15 = new javax.swing.JLabel();
    jPanel105 = new javax.swing.JPanel();
    jLabel17 = new javax.swing.JLabel();
    jButton11 = new javax.swing.JButton();
    jLabel18 = new javax.swing.JLabel();
    jPanel92 = new javax.swing.JPanel();
    jPanel106 = new javax.swing.JPanel();
    jScrollPane19 = new javax.swing.JScrollPane();
    jTable6 = new javax.swing.JTable();
    jPanel108 = new javax.swing.JPanel();
    jPanel109 = new javax.swing.JPanel();
    jPanel110 = new javax.swing.JPanel();
    jLabel19 = new javax.swing.JLabel();
    cashTotal = new javax.swing.JTextField();
    jLabel20 = new javax.swing.JLabel();
    jPanel111 = new javax.swing.JPanel();
    jLabel21 = new javax.swing.JLabel();
    jButton12 = new javax.swing.JButton();
    jLabel24 = new javax.swing.JLabel();
    jideTabbedPane2 = new com.jidesoft.swing.JideTabbedPane();
    jideTabbedPane1 = new com.jidesoft.swing.JideTabbedPane();
    jPanel1 = new javax.swing.JPanel();
    jSplitPane1 = new javax.swing.JSplitPane();
    jPanel2 = new javax.swing.JPanel();
    jPanel29 = new javax.swing.JPanel();
    jPanel30 = new javax.swing.JPanel();
    jPanel3 = new javax.swing.JPanel();
    jLabel117 = new javax.swing.JLabel();
    cashierCollectSearch = new javax.swing.JTextField();
    searchButton = new javax.swing.JButton();
    jPanel22 = new javax.swing.JPanel();
    jLabel122 = new javax.swing.JLabel();
    itemsLabel = new javax.swing.JLabel();
    jPanel21 = new javax.swing.JPanel();
    newDealButton = new javax.swing.JButton();
    transferDealButton = new javax.swing.JButton();
    editDealButton = new javax.swing.JButton();
    deleteDealButton = new javax.swing.JButton();
    collectViewsPanel = new javax.swing.JPanel();
    dealViewsPanel = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    dealsCollectTable = new uic.widgets.UICTable();
    serviceViewsPanel = new javax.swing.JPanel();
    jScrollPane4 = new javax.swing.JScrollPane();
    serviceCollectTable = new uic.widgets.UICTable();
    otherViewsPanel = new javax.swing.JPanel();
    jLabel61 = new javax.swing.JLabel();
    jPanel31 = new javax.swing.JPanel();
    jLabel46 = new javax.swing.JLabel();
    collectDealsButton = new javax.swing.JRadioButton();
    collectServiceButton = new javax.swing.JRadioButton();
    collectOtherButton = new javax.swing.JRadioButton();
    printListButton = new javax.swing.JButton();
    jPanel4 = new javax.swing.JPanel();
    collectionInfoPanel = new javax.swing.JPanel();
    jPanel13 = new javax.swing.JPanel();
    jPanel12 = new javax.swing.JPanel();
    jPanel17 = new javax.swing.JPanel();
    jPanel18 = new javax.swing.JPanel();
    jPanel32 = new javax.swing.JPanel();
    jFormattedTextField1 = new javax.swing.JFormattedTextField();
    jFormattedTextField3 = new javax.swing.JFormattedTextField();
    jPanel28 = new javax.swing.JPanel();
    jLabel4 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    jPanel19 = new javax.swing.JPanel();
    jPanel45 = new javax.swing.JPanel();
    jTextField13 = new javax.swing.JTextField();
    jTextField14 = new javax.swing.JTextField();
    jTextField15 = new javax.swing.JTextField();
    jFormattedTextField18 = new javax.swing.JFormattedTextField();
    jFormattedTextField19 = new javax.swing.JFormattedTextField();
    jPanel43 = new javax.swing.JPanel();
    jLabel30 = new javax.swing.JLabel();
    jLabel31 = new javax.swing.JLabel();
    jLabel32 = new javax.swing.JLabel();
    jLabel33 = new javax.swing.JLabel();
    jLabel34 = new javax.swing.JLabel();
    jPanel59 = new javax.swing.JPanel();
    jScrollPane9 = new javax.swing.JScrollPane();
    uICTable1 = new uic.widgets.UICTable();
    jPanel47 = new javax.swing.JPanel();
    jButton4 = new javax.swing.JButton();
    jLabel48 = new javax.swing.JLabel();
    jLabel49 = new javax.swing.JLabel();
    jPanel14 = new javax.swing.JPanel();
    jPanel33 = new javax.swing.JPanel();
    jLabel8 = new javax.swing.JLabel();
    jLabel9 = new javax.swing.JLabel();
    jLabel10 = new javax.swing.JLabel();
    jLabel13 = new javax.swing.JLabel();
    jLabel23 = new javax.swing.JLabel();
    jLabel14 = new javax.swing.JLabel();
    jLabel38 = new javax.swing.JLabel();
    jPanel34 = new javax.swing.JPanel();
    jTextField4 = new javax.swing.JTextField();
    jTextField5 = new javax.swing.JTextField();
    jTextField6 = new javax.swing.JTextField();
    jFormattedTextField7 = new javax.swing.JFormattedTextField();
    jFormattedTextField9 = new javax.swing.JFormattedTextField();
    jFormattedTextField8 = new javax.swing.JFormattedTextField();
    jFormattedTextField23 = new javax.swing.JFormattedTextField();
    jPanel60 = new javax.swing.JPanel();
    jScrollPane10 = new javax.swing.JScrollPane();
    uICTable2 = new uic.widgets.UICTable();
    jPanel46 = new javax.swing.JPanel();
    jButton3 = new javax.swing.JButton();
    jLabel44 = new javax.swing.JLabel();
    jLabel45 = new javax.swing.JLabel();
    jPanel49 = new javax.swing.JPanel();
    jPanel66 = new javax.swing.JPanel();
    jScrollPane17 = new javax.swing.JScrollPane();
    uICTable3 = new uic.widgets.UICTable();
    jPanel67 = new javax.swing.JPanel();
    jButton15 = new javax.swing.JButton();
    jLabel47 = new javax.swing.JLabel();
    jLabel56 = new javax.swing.JLabel();
    jPanel8 = new javax.swing.JPanel();
    jPanel53 = new javax.swing.JPanel();
    jPanel25 = new javax.swing.JPanel();
    jPanel26 = new javax.swing.JPanel();
    jLabel40 = new javax.swing.JLabel();
    collectShiftCashCollectedField = new javax.swing.JFormattedTextField();
    jLabel41 = new javax.swing.JLabel();
    collectShiftChecksCollectedField = new javax.swing.JFormattedTextField();
    jLabel42 = new javax.swing.JLabel();
    collectShiftChargeCollectedField = new javax.swing.JFormattedTextField();
    jLabel43 = new javax.swing.JLabel();
    collectShiftTotalCollectedField = new javax.swing.JFormattedTextField();
    jScrollPane6 = new javax.swing.JScrollPane();
    shiftCollectTable = new com.jidesoft.grid.CellSpanTable();
    jPanel27 = new javax.swing.JPanel();
    printShiftCollect = new javax.swing.JButton();
    jLabel12 = new javax.swing.JLabel();
    jLabel39 = new javax.swing.JLabel();
    jPanel5 = new javax.swing.JPanel();
    jSplitPane5 = new javax.swing.JSplitPane();
    jPanel6 = new javax.swing.JPanel();
    jPanel7 = new javax.swing.JPanel();
    jLabel16 = new javax.swing.JLabel();
    jFormattedTextField10 = new javax.swing.JFormattedTextField();
    jPanel35 = new javax.swing.JPanel();
    jPanel24 = new javax.swing.JPanel();
    newDealButton2 = new javax.swing.JButton();
    editDealButton2 = new javax.swing.JButton();
    deleteDealButton2 = new javax.swing.JButton();
    payViewsPanel1 = new javax.swing.JPanel();
    dealViewsPanel1 = new javax.swing.JPanel();
    jScrollPane14 = new javax.swing.JScrollPane();
    shiftCollectTable1 = new com.jidesoft.grid.CellSpanTable();
    jPanel37 = new javax.swing.JPanel();
    printShiftPay = new javax.swing.JButton();
    filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
    filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
    jPanel15 = new javax.swing.JPanel();
    jPanel9 = new javax.swing.JPanel();
    jPanel10 = new javax.swing.JPanel();
    jPanel42 = new javax.swing.JPanel();
    jScrollPane3 = new javax.swing.JScrollPane();
    jTable3 = new uic.widgets.UICTable();
    jPanel44 = new javax.swing.JPanel();
    takeInAccounting = new javax.swing.JButton();
    giveOutAccounting = new javax.swing.JButton();
    refreshAccounting = new javax.swing.JButton();
    deleteDealButton3 = new javax.swing.JButton();
    cashierButton3 = new javax.swing.JButton();
    printListButton3 = new javax.swing.JButton();
    jPanel20 = new javax.swing.JPanel();
    jPanel55 = new javax.swing.JPanel();
    jScrollPane12 = new javax.swing.JScrollPane();
    uICTable4 = new com.jidesoft.grid.CellSpanTable();
    jPanel68 = new javax.swing.JPanel();
    jButton16 = new javax.swing.JButton();
    jLabel11 = new javax.swing.JLabel();
    jFormattedTextField5 = new javax.swing.JFormattedTextField();
    cashierBatchOut = new javax.swing.JButton();
    jPanel56 = new javax.swing.JPanel();
    jScrollPane13 = new javax.swing.JScrollPane();
    uICTable5 = new com.jidesoft.grid.CellSpanTable();
    jPanel69 = new javax.swing.JPanel();
    jButton17 = new javax.swing.JButton();
    jLabel22 = new javax.swing.JLabel();
    jFormattedTextField6 = new javax.swing.JFormattedTextField();
    jPanel36 = new javax.swing.JPanel();
    jPanel40 = new javax.swing.JPanel();
    jPanel48 = new javax.swing.JPanel();
    jLabel55 = new javax.swing.JLabel();
    jTextField11 = new javax.swing.JTextField();
    jButton1 = new javax.swing.JButton();
    jPanel50 = new javax.swing.JPanel();
    jPanel51 = new javax.swing.JPanel();
    jCheckBox1 = new javax.swing.JCheckBox();
    jCheckBox2 = new javax.swing.JCheckBox();
    jPanel52 = new javax.swing.JPanel();
    jCheckBox3 = new javax.swing.JCheckBox();
    jCheckBox4 = new javax.swing.JCheckBox();
    jCheckBox5 = new javax.swing.JCheckBox();
    jPanel54 = new javax.swing.JPanel();
    jButton5 = new javax.swing.JButton();
    jButton6 = new javax.swing.JButton();
    jButton7 = new javax.swing.JButton();
    jPanel41 = new javax.swing.JPanel();
    jScrollPane2 = new javax.swing.JScrollPane();
    jTable1 = new javax.swing.JTable();
    jPanel38 = new javax.swing.JPanel();
    quickBooksButtonPanel = new javax.swing.JPanel();
    quickBooksRefreshButton = new javax.swing.JButton();
    quickBooksUpdateButton = new javax.swing.JButton();
    quickBooksPanel = new javax.swing.JPanel();
    quickBooksBatchPanel = new javax.swing.JPanel();
    jScrollPane15 = new javax.swing.JScrollPane();
    quickBooksBatchTable = new javax.swing.JTable();
    apBillsPanel = new javax.swing.JPanel();
    jPanel65 = new javax.swing.JPanel();
    jPanel63 = new javax.swing.JPanel();
    jPanel91 = new javax.swing.JPanel();
    jPanel11 = new javax.swing.JPanel();

    collectionsPopup.setPreferredSize(cpopupSize);
    collectionsPopup.setSize(cpopupSize);
    collectionsPopup.setMaximumSize(cpopupSize);
    collectionsPopup.setMinimumSize(cpopupSize);
    collectionsPopup.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(dms.DMSApp.class).getContext().getResourceMap(AccountingWindow.class);
    collectionsPopup.setTitle(resourceMap.getString("collectionsPopup.title")); // NOI18N
    collectionsPopup.setLocationByPlatform(true);
    collectionsPopup.setMinimumSize(new java.awt.Dimension(350, 305));
    collectionsPopup.setModal(true);
    collectionsPopup.setName("collectionsPopup"); // NOI18N
    collectionsPopup.setResizable(false);
    collectionsPopup.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

    jPanel72.setBackground(resourceMap.getColor("jPanel72.background")); // NOI18N
    jPanel72.setName("jPanel72"); // NOI18N
    jPanel72.setLayout(new java.awt.BorderLayout());

    jPanel73.setBackground(resourceMap.getColor("jPanel73.background")); // NOI18N
    jPanel73.setName("jPanel73"); // NOI18N
    jPanel73.setLayout(new javax.swing.BoxLayout(jPanel73, javax.swing.BoxLayout.Y_AXIS));

    collectPopupOkButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    collectPopupOkButton.setIcon(resourceMap.getIcon("collectPopupOkButton.icon")); // NOI18N
    collectPopupOkButton.setText(resourceMap.getString("collectPopupOkButton.text")); // NOI18N
    collectPopupOkButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    collectPopupOkButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    collectPopupOkButton.setMaximumSize(new java.awt.Dimension(100, 30));
    collectPopupOkButton.setMinimumSize(new java.awt.Dimension(100, 30));
    collectPopupOkButton.setName("collectPopupOkButton"); // NOI18N
    collectPopupOkButton.setOpaque(false);
    collectPopupOkButton.setPreferredSize(new java.awt.Dimension(100, 30));
    collectPopupOkButton.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        collectPopupButtonsClicked(evt);
      }
    });
    jPanel73.add(collectPopupOkButton);

    collectPopupCancelButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    collectPopupCancelButton.setIcon(resourceMap.getIcon("collectPopupCancelButton.icon")); // NOI18N
    collectPopupCancelButton.setText(resourceMap.getString("collectPopupCancelButton.text")); // NOI18N
    collectPopupCancelButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    collectPopupCancelButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    collectPopupCancelButton.setMaximumSize(new java.awt.Dimension(100, 30));
    collectPopupCancelButton.setMinimumSize(new java.awt.Dimension(100, 30));
    collectPopupCancelButton.setName("collectPopupCancelButton"); // NOI18N
    collectPopupCancelButton.setOpaque(false);
    collectPopupCancelButton.setPreferredSize(new java.awt.Dimension(100, 30));
    collectPopupCancelButton.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        collectPopupButtonsClicked(evt);
      }
    });
    jPanel73.add(collectPopupCancelButton);

    jPanel72.add(jPanel73, java.awt.BorderLayout.WEST);

    jPanel76.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel76.setName("jPanel76"); // NOI18N
    jPanel76.setOpaque(false);
    jPanel76.setLayout(new java.awt.GridLayout(0, 1));

    jPanel80.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel80.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13), resourceMap.getColor("jPanel80.border.titleColor"))); // NOI18N
    jPanel80.setName("jPanel80"); // NOI18N
    jPanel80.setOpaque(false);
    jPanel80.setLayout(new java.awt.BorderLayout(5, 0));

    jPanel82.setName("jPanel82"); // NOI18N
    jPanel82.setOpaque(false);
    jPanel82.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

    jLabel98.setFont(resourceMap.getFont("jLabel98.font")); // NOI18N
    jLabel98.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel98.setText(resourceMap.getString("jLabel98.text")); // NOI18N
    jLabel98.setName("jLabel98"); // NOI18N
    jPanel82.add(jLabel98);

    jLabel106.setFont(resourceMap.getFont("jLabel106.font")); // NOI18N
    jLabel106.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel106.setText(resourceMap.getString("jLabel106.text")); // NOI18N
    jLabel106.setName("jLabel106"); // NOI18N
    jPanel82.add(jLabel106);

    jLabel109.setFont(resourceMap.getFont("jLabel109.font")); // NOI18N
    jLabel109.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel109.setText(resourceMap.getString("jLabel109.text")); // NOI18N
    jLabel109.setName("jLabel109"); // NOI18N
    jPanel82.add(jLabel109);

    collectReasonLabel.setFont(resourceMap.getFont("collectReasonLabel.font")); // NOI18N
    collectReasonLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    collectReasonLabel.setText(resourceMap.getString("collectReasonLabel.text")); // NOI18N
    collectReasonLabel.setName("collectReasonLabel"); // NOI18N
    jPanel82.add(collectReasonLabel);

    collectReasonLabel1.setFont(resourceMap.getFont("collectReasonLabel1.font")); // NOI18N
    collectReasonLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    collectReasonLabel1.setText(resourceMap.getString("collectReasonLabel1.text")); // NOI18N
    collectReasonLabel1.setName("collectReasonLabel1"); // NOI18N
    jPanel82.add(collectReasonLabel1);

    jPanel80.add(jPanel82, java.awt.BorderLayout.WEST);

    jPanel83.setName("jPanel83"); // NOI18N
    jPanel83.setOpaque(false);
    jPanel83.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

    collectCashField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
    collectCashField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    collectCashField.setName("collectCashField"); // NOI18N
    collectCashField.setValue(0.00);
    jPanel83.add(collectCashField);

    collectCheckField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
    collectCheckField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    collectCheckField.setName("collectCheckField"); // NOI18N
    collectCheckField.setValue(0.00);
    jPanel83.add(collectCheckField);

    collectChargeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
    collectChargeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    collectChargeField.setName("collectChargeField"); // NOI18N
    collectChargeField.setValue(0.00);
    jPanel83.add(collectChargeField);

    collectReasonDD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Down Payment", "Tag" }));
    collectReasonDD.setName("collectReasonDD"); // NOI18N
    jPanel83.add(collectReasonDD);

    jTextField10.setFont(getFont());
    jTextField10.setText(resourceMap.getString("jTextField10.text")); // NOI18N
    jTextField10.setName("jTextField10"); // NOI18N
    jPanel83.add(jTextField10);

    jPanel80.add(jPanel83, java.awt.BorderLayout.CENTER);

    jPanel76.add(jPanel80);

    collectReasonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("collectReasonPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("collectReasonPanel.border.titleFont"), resourceMap.getColor("collectReasonPanel.border.titleColor"))); // NOI18N
    collectReasonPanel.setName("collectReasonPanel"); // NOI18N
    collectReasonPanel.setOpaque(false);
    collectReasonPanel.setLayout(new java.awt.GridLayout(1, 0));

    jScrollPane7.setName("jScrollPane7"); // NOI18N

    collectReasonField.setColumns(250);
    collectReasonField.setLineWrap(true);
    collectReasonField.setRows(15);
    collectReasonField.setWrapStyleWord(true);
    collectReasonField.setName("collectReasonField"); // NOI18N
    jScrollPane7.setViewportView(collectReasonField);

    collectReasonPanel.add(jScrollPane7);

    jPanel76.add(collectReasonPanel);

    jPanel72.add(jPanel76, java.awt.BorderLayout.CENTER);

    collectionsPopup.getContentPane().add(jPanel72);

    payoutPopup.setPreferredSize(cpopupSize);
    payoutPopup.setSize(cpopupSize);
    payoutPopup.setMaximumSize(cpopupSize);
    payoutPopup.setMinimumSize(cpopupSize);
    payoutPopup.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    payoutPopup.setTitle(resourceMap.getString("payoutPopup.title")); // NOI18N
    payoutPopup.setLocationByPlatform(true);
    payoutPopup.setModal(true);
    payoutPopup.setName("payoutPopup"); // NOI18N
    payoutPopup.setResizable(false);
    payoutPopup.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

    jPanel74.setBackground(resourceMap.getColor("jPanel74.background")); // NOI18N
    jPanel74.setName("jPanel74"); // NOI18N
    jPanel74.setLayout(new java.awt.BorderLayout());

    jPanel75.setBackground(resourceMap.getColor("jPanel75.background")); // NOI18N
    jPanel75.setName("jPanel75"); // NOI18N
    jPanel75.setLayout(new javax.swing.BoxLayout(jPanel75, javax.swing.BoxLayout.Y_AXIS));

    jButton32.setFont(resourceMap.getFont("jButton32.font")); // NOI18N
    jButton32.setIcon(resourceMap.getIcon("jButton32.icon")); // NOI18N
    jButton32.setText(resourceMap.getString("jButton32.text")); // NOI18N
    jButton32.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jButton32.setMargin(new java.awt.Insets(2, 2, 2, 2));
    jButton32.setMaximumSize(new java.awt.Dimension(100, 30));
    jButton32.setMinimumSize(new java.awt.Dimension(100, 30));
    jButton32.setName("jButton32"); // NOI18N
    jButton32.setOpaque(false);
    jButton32.setPreferredSize(new java.awt.Dimension(100, 30));
    jButton32.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        payPopupButtonsClicked(evt);
      }
    });
    jPanel75.add(jButton32);

    jButton33.setFont(resourceMap.getFont("jButton33.font")); // NOI18N
    jButton33.setIcon(resourceMap.getIcon("jButton33.icon")); // NOI18N
    jButton33.setText(resourceMap.getString("jButton33.text")); // NOI18N
    jButton33.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jButton33.setMargin(new java.awt.Insets(2, 2, 2, 2));
    jButton33.setMaximumSize(new java.awt.Dimension(100, 30));
    jButton33.setMinimumSize(new java.awt.Dimension(100, 30));
    jButton33.setName("jButton33"); // NOI18N
    jButton33.setOpaque(false);
    jButton33.setPreferredSize(new java.awt.Dimension(100, 30));
    jButton33.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        payPopupButtonsClicked(evt);
      }
    });
    jPanel75.add(jButton33);

    jPanel74.add(jPanel75, java.awt.BorderLayout.WEST);

    jPanel77.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel77.setName("jPanel77"); // NOI18N
    jPanel77.setOpaque(false);
    jPanel77.setLayout(new java.awt.GridLayout(0, 1));

    jPanel84.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel84.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel84.border.titleFont"), resourceMap.getColor("jPanel84.border.titleColor"))); // NOI18N
    jPanel84.setName("jPanel84"); // NOI18N
    jPanel84.setOpaque(false);
    jPanel84.setLayout(new java.awt.BorderLayout(5, 0));

    jPanel85.setName("jPanel85"); // NOI18N
    jPanel85.setOpaque(false);
    jPanel85.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

    jLabel99.setFont(resourceMap.getFont("jLabel99.font")); // NOI18N
    jLabel99.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel99.setText(resourceMap.getString("jLabel99.text")); // NOI18N
    jLabel99.setName("jLabel99"); // NOI18N
    jPanel85.add(jLabel99);

    payReasonLabel.setFont(resourceMap.getFont("payReasonLabel.font")); // NOI18N
    payReasonLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    payReasonLabel.setText(resourceMap.getString("payReasonLabel.text")); // NOI18N
    payReasonLabel.setName("payReasonLabel"); // NOI18N
    jPanel85.add(payReasonLabel);

    payReasonLabel1.setFont(resourceMap.getFont("payReasonLabel1.font")); // NOI18N
    payReasonLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    payReasonLabel1.setText(resourceMap.getString("payReasonLabel1.text")); // NOI18N
    payReasonLabel1.setName("payReasonLabel1"); // NOI18N
    jPanel85.add(payReasonLabel1);

    payReasonLabel2.setFont(resourceMap.getFont("payReasonLabel2.font")); // NOI18N
    payReasonLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    payReasonLabel2.setText(resourceMap.getString("payReasonLabel2.text")); // NOI18N
    payReasonLabel2.setName("payReasonLabel2"); // NOI18N
    jPanel85.add(payReasonLabel2);

    jPanel84.add(jPanel85, java.awt.BorderLayout.WEST);

    jPanel86.setName("jPanel86"); // NOI18N
    jPanel86.setOpaque(false);
    jPanel86.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

    payCashField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
    payCashField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    payCashField.setName("payCashField"); // NOI18N
    payCashField.setValue(0.00);
    jPanel86.add(payCashField);

    payReasonDD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Other", "Gas", "Parts", "Shop Supplies", "Misc." }));
    payReasonDD.setName("payReasonDD"); // NOI18N
    jPanel86.add(payReasonDD);

    jTextField16.setText(resourceMap.getString("jTextField16.text")); // NOI18N
    jTextField16.setName("jTextField16"); // NOI18N
    jPanel86.add(jTextField16);

    jTextField17.setText(resourceMap.getString("jTextField17.text")); // NOI18N
    jTextField17.setName("jTextField17"); // NOI18N
    jPanel86.add(jTextField17);

    jPanel84.add(jPanel86, java.awt.BorderLayout.CENTER);

    jPanel77.add(jPanel84);

    payReasonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("payReasonPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("payReasonPanel.border.titleFont"), resourceMap.getColor("payReasonPanel.border.titleColor"))); // NOI18N
    payReasonPanel.setName("payReasonPanel"); // NOI18N
    payReasonPanel.setOpaque(false);
    payReasonPanel.setLayout(new java.awt.GridLayout(1, 0));

    jScrollPane8.setName("jScrollPane8"); // NOI18N

    payReasonField.setColumns(250);
    payReasonField.setLineWrap(true);
    payReasonField.setRows(15);
    payReasonField.setWrapStyleWord(true);
    payReasonField.setName("payReasonField"); // NOI18N
    jScrollPane8.setViewportView(payReasonField);

    payReasonPanel.add(jScrollPane8);

    jPanel77.add(payReasonPanel);

    jPanel74.add(jPanel77, java.awt.BorderLayout.CENTER);

    payoutPopup.getContentPane().add(jPanel74);

    accountingPopup.setPreferredSize(apopupSize);
    accountingPopup.setSize(apopupSize);
    accountingPopup.setMaximumSize(apopupSize);
    accountingPopup.setMinimumSize(apopupSize);
    accountingPopup.setName("accountingPopup"); // NOI18N
    accountingPopup.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

    jPanel78.setBackground(resourceMap.getColor("jPanel78.background")); // NOI18N
    jPanel78.setName("jPanel78"); // NOI18N
    jPanel78.setLayout(new java.awt.BorderLayout());

    jPanel79.setBackground(resourceMap.getColor("jPanel79.background")); // NOI18N
    jPanel79.setName("jPanel79"); // NOI18N
    jPanel79.setLayout(new javax.swing.BoxLayout(jPanel79, javax.swing.BoxLayout.Y_AXIS));

    jButton34.setFont(getFont());
    jButton34.setIcon(resourceMap.getIcon("jButton34.icon")); // NOI18N
    jButton34.setText(resourceMap.getString("jButton34.text")); // NOI18N
    jButton34.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jButton34.setMargin(new java.awt.Insets(2, 2, 2, 2));
    jButton34.setMaximumSize(new java.awt.Dimension(100, 30));
    jButton34.setMinimumSize(new java.awt.Dimension(100, 30));
    jButton34.setName("jButton34"); // NOI18N
    jButton34.setOpaque(false);
    jButton34.setPreferredSize(new java.awt.Dimension(100, 30));
    jButton34.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        accountingPopupButtonsClicked(evt);
      }
    });
    jPanel79.add(jButton34);

    jButton35.setFont(getFont());
    jButton35.setIcon(resourceMap.getIcon("jButton35.icon")); // NOI18N
    jButton35.setText(resourceMap.getString("jButton35.text")); // NOI18N
    jButton35.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jButton35.setMargin(new java.awt.Insets(2, 2, 2, 2));
    jButton35.setMaximumSize(new java.awt.Dimension(100, 30));
    jButton35.setMinimumSize(new java.awt.Dimension(100, 30));
    jButton35.setName("jButton35"); // NOI18N
    jButton35.setOpaque(false);
    jButton35.setPreferredSize(new java.awt.Dimension(100, 30));
    jButton35.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        accountingPopupButtonsClicked(evt);
      }
    });
    jPanel79.add(jButton35);

    jPanel78.add(jPanel79, java.awt.BorderLayout.WEST);

    jPanel81.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel81.setName("jPanel81"); // NOI18N
    jPanel81.setOpaque(false);
    jPanel81.setLayout(new java.awt.GridLayout(0, 1));

    jPanel87.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel87.border.titleFont"), resourceMap.getColor("jPanel87.border.titleColor"))); // NOI18N
    jPanel87.setName("jPanel87"); // NOI18N
    jPanel87.setOpaque(false);
    jPanel87.setLayout(new java.awt.BorderLayout(5, 0));

    jPanel88.setName("jPanel88"); // NOI18N
    jPanel88.setOpaque(false);
    jPanel88.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

    jLabel53.setText(resourceMap.getString("jLabel53.text")); // NOI18N
    jLabel53.setName("jLabel53"); // NOI18N
    jPanel88.add(jLabel53);

    jLabel100.setFont(getFont());
    jLabel100.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel100.setText(resourceMap.getString("jLabel100.text")); // NOI18N
    jLabel100.setMaximumSize(new java.awt.Dimension(80, 16));
    jLabel100.setMinimumSize(new java.awt.Dimension(80, 16));
    jLabel100.setName("jLabel100"); // NOI18N
    jLabel100.setPreferredSize(new java.awt.Dimension(80, 16));
    jPanel88.add(jLabel100);

    payReasonLabel4.setFont(getFont());
    payReasonLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    payReasonLabel4.setText(resourceMap.getString("payReasonLabel4.text")); // NOI18N
    payReasonLabel4.setName("payReasonLabel4"); // NOI18N
    jPanel88.add(payReasonLabel4);

    payReasonLabel5.setFont(resourceMap.getFont("payReasonLabel5.font")); // NOI18N
    payReasonLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    payReasonLabel5.setText(resourceMap.getString("payReasonLabel5.text")); // NOI18N
    payReasonLabel5.setName("payReasonLabel5"); // NOI18N
    jPanel88.add(payReasonLabel5);

    jPanel87.add(jPanel88, java.awt.BorderLayout.WEST);

    jPanel89.setName("jPanel89"); // NOI18N
    jPanel89.setOpaque(false);
    jPanel89.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

    jLabel54.setText(resourceMap.getString("jLabel54.text")); // NOI18N
    jLabel54.setName("jLabel54"); // NOI18N
    jPanel89.add(jLabel54);

    accountingAmountField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
    accountingAmountField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    accountingAmountField.setName("accountingAmountField"); // NOI18N
    accountingAmountField.setValue(0.00);
    jPanel89.add(accountingAmountField);

    accountingAmountField1.setEditable(false);
    accountingAmountField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
    accountingAmountField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    accountingAmountField1.setName("accountingAmountField1"); // NOI18N
    accountingAmountField1.setOpaque(false);
    accountingAmountField1.setValue(0.00);
    jPanel89.add(accountingAmountField1);

    jPanel87.add(jPanel89, java.awt.BorderLayout.CENTER);

    jPanel81.add(jPanel87);

    payReasonPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("payReasonPanel1.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), resourceMap.getColor("payReasonPanel1.border.titleColor"))); // NOI18N
    payReasonPanel1.setName("payReasonPanel1"); // NOI18N
    payReasonPanel1.setOpaque(false);
    payReasonPanel1.setLayout(new java.awt.GridLayout(1, 0));

    jScrollPane11.setName("jScrollPane11"); // NOI18N

    accountingCommentField.setColumns(250);
    accountingCommentField.setLineWrap(true);
    accountingCommentField.setRows(15);
    accountingCommentField.setWrapStyleWord(true);
    accountingCommentField.setName("accountingCommentField"); // NOI18N
    jScrollPane11.setViewportView(accountingCommentField);

    payReasonPanel1.add(jScrollPane11);

    jPanel81.add(payReasonPanel1);

    jPanel78.add(jPanel81, java.awt.BorderLayout.CENTER);

    accountingPopup.getContentPane().add(jPanel78);

    printPreview.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    printPreview.setTitle(resourceMap.getString("printPreview.title")); // NOI18N
    printPreview.setLocationByPlatform(true);
    printPreview.setMinimumSize(new java.awt.Dimension(500, 600));
    printPreview.setMaximumSize(new java.awt.Dimension(500, 600));
    printPreview.setPreferredSize(new java.awt.Dimension(500, 600));
    printPreview.setModal(true);
    printPreview.setName("printPreview"); // NOI18N
    printPreview.setResizable(false);
    printPreview.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

    printPreviewPanel.setName("printPreviewPanel"); // NOI18N
    printPreviewPanel.setLayout(new java.awt.GridLayout(1, 0));
    printPreview.getContentPane().add(printPreviewPanel);

    assignCollectionPopup.setName("assignCollectionPopup"); // NOI18N
    assignCollectionPopup.setMaximumSize(assignpopupSize);
    assignCollectionPopup.setMinimumSize(assignpopupSize);
    assignCollectionPopup.setPreferredSize(assignpopupSize);

    jPanel57.setMaximumSize(new java.awt.Dimension(200, 25412));
    jPanel57.setMinimumSize(new java.awt.Dimension(200, 200));
    jPanel57.setName("jPanel57"); // NOI18N
    jPanel57.setPreferredSize(new java.awt.Dimension(200, 622));

    jButton8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jButton8.setIcon(resourceMap.getIcon("jButton8.icon")); // NOI18N
    jButton8.setText(resourceMap.getString("jButton8.text")); // NOI18N
    jButton8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jButton8.setMargin(new java.awt.Insets(2, 2, 2, 2));
    jButton8.setName("jButton8"); // NOI18N
    jButton8.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        assignCollectionButtonsClicked(evt);
      }
    });

    jButton9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jButton9.setIcon(resourceMap.getIcon("jButton9.icon")); // NOI18N
    jButton9.setText(resourceMap.getString("jButton9.text")); // NOI18N
    jButton9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jButton9.setMargin(new java.awt.Insets(2, 2, 2, 2));
    jButton9.setName("jButton9"); // NOI18N
    jButton9.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        assignCollectionButtonsClicked(evt);
      }
    });

    jPanel61.setName("jPanel61"); // NOI18N
    jPanel61.setLayout(new javax.swing.BoxLayout(jPanel61, javax.swing.BoxLayout.X_AXIS));

    jLabel29.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jLabel29.setText(resourceMap.getString("jLabel29.text")); // NOI18N
    jLabel29.setName("jLabel29"); // NOI18N
    jPanel61.add(jLabel29);

    jTextField12.setText(resourceMap.getString("jTextField12.text")); // NOI18N
    jTextField12.setName("jTextField12"); // NOI18N
    jTextField12.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyReleased(java.awt.event.KeyEvent evt)
      {
        assignSearchEnterKey(evt);
      }
    });
    jPanel61.add(jTextField12);

    jButton10.setIcon(resourceMap.getIcon("jButton10.icon")); // NOI18N
    jButton10.setText(resourceMap.getString("jButton10.text")); // NOI18N
    jButton10.setMargin(new java.awt.Insets(0, 0, 0, 0));
    jButton10.setMaximumSize(new java.awt.Dimension(21, 21));
    jButton10.setMinimumSize(new java.awt.Dimension(21, 21));
    jButton10.setName("jButton10"); // NOI18N
    jButton10.setPreferredSize(new java.awt.Dimension(21, 21));
    jButton10.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        assignCollectionSearchClicked(evt);
      }
    });
    jPanel61.add(jButton10);

    jPanel62.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel62.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(0, 0, 153))); // NOI18N
    jPanel62.setName("jPanel62"); // NOI18N
    jPanel62.setLayout(new java.awt.GridLayout(1, 0));

    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Down Payment", "Tag" }));
    jComboBox1.setName("jComboBox1"); // NOI18N
    jPanel62.add(jComboBox1);

    javax.swing.GroupLayout jPanel57Layout = new javax.swing.GroupLayout(jPanel57);
    jPanel57.setLayout(jPanel57Layout);
    jPanel57Layout.setHorizontalGroup(
      jPanel57Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel57Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel57Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jPanel61, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
          .addComponent(jPanel62, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
          .addGroup(jPanel57Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
            .addComponent(jButton9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanel57Layout.setVerticalGroup(
      jPanel57Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel57Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel61, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(jPanel62, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton8)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton9)
        .addContainerGap(174, Short.MAX_VALUE))
    );

    assignCollectionPopup.getContentPane().add(jPanel57, java.awt.BorderLayout.LINE_START);

    jPanel58.setName("jPanel58"); // NOI18N
    jPanel58.setLayout(new java.awt.GridLayout(1, 0));

    jScrollPane5.setName("jScrollPane5"); // NOI18N

    jTable2.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Account #", "Customer", "Vehicle"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    jTable2.setFillsViewportHeight(true);
    jTable2.setName("jTable2"); // NOI18N
    jTable2.getTableHeader().setReorderingAllowed(false);
    jScrollPane5.setViewportView(jTable2);

    jPanel58.add(jScrollPane5);

    assignCollectionPopup.getContentPane().add(jPanel58, java.awt.BorderLayout.CENTER);

    coaPopup.setPreferredSize(coaPopupSize);
    coaPopup.setSize(coaPopupSize);
    coaPopup.setMaximumSize(coaPopupSize);
    coaPopup.setMinimumSize(coaPopupSize);
    coaPopup.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    coaPopup.setTitle(resourceMap.getString("coaPopup.title")); // NOI18N
    coaPopup.setLocationByPlatform(true);
    coaPopup.setMinimumSize(new java.awt.Dimension(610, 180));
    coaPopup.setModal(true);
    coaPopup.setName("coaPopup"); // NOI18N
    coaPopup.setResizable(false);
    coaPopup.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

    jPanel97.setBackground(resourceMap.getColor("jPanel97.background")); // NOI18N
    jPanel97.setName("jPanel97"); // NOI18N
    jPanel97.setLayout(new java.awt.BorderLayout());

    jPanel99.setBackground(resourceMap.getColor("jPanel99.background")); // NOI18N
    jPanel99.setName("jPanel99"); // NOI18N
    jPanel99.setLayout(new javax.swing.BoxLayout(jPanel99, javax.swing.BoxLayout.Y_AXIS));

    coaPopupOkButton.setFont(resourceMap.getFont("coaPopupOkButton.font")); // NOI18N
    coaPopupOkButton.setIcon(resourceMap.getIcon("coaPopupOkButton.icon")); // NOI18N
    coaPopupOkButton.setText(resourceMap.getString("coaPopupOkButton.text")); // NOI18N
    coaPopupOkButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    coaPopupOkButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    coaPopupOkButton.setMaximumSize(new java.awt.Dimension(100, 30));
    coaPopupOkButton.setMinimumSize(new java.awt.Dimension(100, 30));
    coaPopupOkButton.setName("coaPopupOkButton"); // NOI18N
    coaPopupOkButton.setOpaque(false);
    coaPopupOkButton.setPreferredSize(new java.awt.Dimension(100, 30));
    coaPopupOkButton.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        coaPopupButtonsClicked(evt);
      }
    });
    jPanel99.add(coaPopupOkButton);

    coaPopupCancelButton.setFont(resourceMap.getFont("coaPopupCancelButton.font")); // NOI18N
    coaPopupCancelButton.setIcon(resourceMap.getIcon("coaPopupCancelButton.icon")); // NOI18N
    coaPopupCancelButton.setText(resourceMap.getString("coaPopupCancelButton.text")); // NOI18N
    coaPopupCancelButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    coaPopupCancelButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    coaPopupCancelButton.setMaximumSize(new java.awt.Dimension(100, 30));
    coaPopupCancelButton.setMinimumSize(new java.awt.Dimension(100, 30));
    coaPopupCancelButton.setName("coaPopupCancelButton"); // NOI18N
    coaPopupCancelButton.setOpaque(false);
    coaPopupCancelButton.setPreferredSize(new java.awt.Dimension(100, 30));
    coaPopupCancelButton.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        coaPopupButtonsClicked(evt);
      }
    });
    jPanel99.add(coaPopupCancelButton);

    jPanel97.add(jPanel99, java.awt.BorderLayout.WEST);

    jPanel100.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel100.setName("jPanel100"); // NOI18N
    jPanel100.setOpaque(false);
    jPanel100.setLayout(new java.awt.GridLayout(0, 1));

    jPanel101.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel101.border.titleFont"), resourceMap.getColor("jPanel101.border.titleColor"))); // NOI18N
    jPanel101.setName("jPanel101"); // NOI18N
    jPanel101.setOpaque(false);
    jPanel101.setLayout(new javax.swing.BoxLayout(jPanel101, javax.swing.BoxLayout.X_AXIS));

    filler9.setName("filler9"); // NOI18N
    jPanel101.add(filler9);

    jPanel102.setName("jPanel102"); // NOI18N
    jPanel102.setOpaque(false);
    jPanel102.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

    filler5.setName("filler5"); // NOI18N
    jPanel102.add(filler5);

    jLabel101.setFont(resourceMap.getFont("jLabel101.font")); // NOI18N
    jLabel101.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel101.setText(resourceMap.getString("jLabel101.text")); // NOI18N
    jLabel101.setName("jLabel101"); // NOI18N
    jPanel102.add(jLabel101);

    jLabel107.setFont(resourceMap.getFont("jLabel107.font")); // NOI18N
    jLabel107.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel107.setText(resourceMap.getString("jLabel107.text")); // NOI18N
    jLabel107.setName("jLabel107"); // NOI18N
    jPanel102.add(jLabel107);

    jLabel110.setFont(resourceMap.getFont("jLabel110.font")); // NOI18N
    jLabel110.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel110.setText(resourceMap.getString("jLabel110.text")); // NOI18N
    jLabel110.setName("jLabel110"); // NOI18N
    jPanel102.add(jLabel110);

    jPanel101.add(jPanel102);

    jPanel107.setMinimumSize(new java.awt.Dimension(114, 160));
    jPanel107.setName("jPanel107"); // NOI18N
    jPanel107.setOpaque(false);
    jPanel107.setPreferredSize(new java.awt.Dimension(1106, 160));
    jPanel107.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

    filler6.setName("filler6"); // NOI18N
    jPanel107.add(filler6);

    coaAccountField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
    coaAccountField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    coaAccountField.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    coaAccountField.setName("coaAccountField"); // NOI18N
    coaAccountField.setValue(0.00);
    jPanel107.add(coaAccountField);

    jTextField2.setColumns(100);
    jTextField2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jTextField2.setText(resourceMap.getString("jTextField2.text")); // NOI18N
    jTextField2.setName("jTextField2"); // NOI18N
    jTextField2.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyReleased(java.awt.event.KeyEvent evt)
      {
        coaPopupDescTyped(evt);
      }
    });
    jPanel107.add(jTextField2);

    coaTypeField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bank", "Cash", "Other Current Asset", "Fixed Asset", "Other Asset", "Accounts Payable", "Other Current Liability", "Long Term Liability", "Equity", "Income", "Cost of Goods Sold", "Expense", "Other Income" }));
    coaTypeField.setMinimumSize(new java.awt.Dimension(114, 30));
    coaTypeField.setName("coaTypeField"); // NOI18N
    coaTypeField.setPreferredSize(new java.awt.Dimension(114, 30));
    jPanel107.add(coaTypeField);

    jPanel101.add(jPanel107);

    filler7.setName("filler7"); // NOI18N
    jPanel101.add(filler7);

    jPanel100.add(jPanel101);

    jPanel97.add(jPanel100, java.awt.BorderLayout.CENTER);

    coaPopup.getContentPane().add(jPanel97);

    batchOutDialog.setBackground(resourceMap.getColor("batchOutDialog.background")); // NOI18N
    batchOutDialog.setName("batchOutDialog"); // NOI18N
    batchOutDialog.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

    jPanel70.setBackground(resourceMap.getColor("jPanel70.background")); // NOI18N
    jPanel70.setName("jPanel70"); // NOI18N
    jPanel70.setLayout(new java.awt.GridLayout());

    jPanel71.setName("jPanel71"); // NOI18N
    jPanel71.setOpaque(false);
    jPanel71.setPreferredSize(new java.awt.Dimension(333, 601));
    jPanel71.setLayout(new javax.swing.BoxLayout(jPanel71, javax.swing.BoxLayout.PAGE_AXIS));

    jPanel93.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel93.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, getFont())); // NOI18N
    jPanel93.setName("jPanel93"); // NOI18N
    jPanel93.setOpaque(false);
    jPanel93.setPreferredSize(new java.awt.Dimension(333, 700));
    jPanel93.setLayout(new javax.swing.BoxLayout(jPanel93, javax.swing.BoxLayout.LINE_AXIS));

    jScrollPane16.setName("jScrollPane16"); // NOI18N
    jScrollPane16.setOpaque(false);

    jTable4.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Transaction #", "Date", "Customer", "Description", "Amount"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    jTable4.setName("jTable4"); // NOI18N
    jTable4.setOpaque(false);
    jTable4.getTableHeader().setReorderingAllowed(false);
    jScrollPane16.setViewportView(jTable4);
    if (jTable4.getColumnModel().getColumnCount() > 0)
    {
      jTable4.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable4.columnModel.title0")); // NOI18N
      jTable4.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTable4.columnModel.title1")); // NOI18N
      jTable4.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTable4.columnModel.title2")); // NOI18N
      jTable4.getColumnModel().getColumn(4).setMinWidth(50);
      jTable4.getColumnModel().getColumn(4).setPreferredWidth(50);
      jTable4.getColumnModel().getColumn(4).setMaxWidth(50);
      jTable4.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTable4.columnModel.title3")); // NOI18N
    }

    jPanel93.add(jScrollPane16);

    jPanel71.add(jPanel93);

    jPanel94.setMaximumSize(new java.awt.Dimension(333, 100));
    jPanel94.setMinimumSize(new java.awt.Dimension(333, 100));
    jPanel94.setName("jPanel94"); // NOI18N
    jPanel94.setOpaque(false);
    jPanel94.setPreferredSize(new java.awt.Dimension(333, 100));
    jPanel94.setLayout(new javax.swing.BoxLayout(jPanel94, javax.swing.BoxLayout.LINE_AXIS));

    jPanel16.setName("jPanel16"); // NOI18N
    jPanel16.setOpaque(false);
    jPanel16.setLayout(new javax.swing.BoxLayout(jPanel16, javax.swing.BoxLayout.LINE_AXIS));

    jPanel23.setName("jPanel23"); // NOI18N
    jPanel23.setOpaque(false);
    jPanel23.setLayout(new java.awt.GridLayout(3, 1));

    jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
    jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
    jLabel1.setName("jLabel1"); // NOI18N
    jPanel23.add(jLabel1);

    chargeTotal.setText(resourceMap.getString("chargeTotal.text")); // NOI18N
    chargeTotal.setMaximumSize(new java.awt.Dimension(46, 20));
    chargeTotal.setMinimumSize(new java.awt.Dimension(46, 20));
    chargeTotal.setName("chargeTotal"); // NOI18N
    jPanel23.add(chargeTotal);

    jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
    jLabel2.setName("jLabel2"); // NOI18N
    jPanel23.add(jLabel2);

    jPanel16.add(jPanel23);

    jPanel95.setName("jPanel95"); // NOI18N
    jPanel95.setOpaque(false);
    jPanel95.setLayout(new java.awt.GridLayout(3, 1));

    jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
    jLabel3.setName("jLabel3"); // NOI18N
    jPanel95.add(jLabel3);

    jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
    jButton2.setName("jButton2"); // NOI18N
    jButton2.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        jButton2MouseClicked(evt);
      }
    });
    jPanel95.add(jButton2);

    jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
    jLabel5.setName("jLabel5"); // NOI18N
    jPanel95.add(jLabel5);

    jPanel16.add(jPanel95);

    jPanel94.add(jPanel16);

    jPanel71.add(jPanel94);

    jPanel70.add(jPanel71);

    jPanel90.setName("jPanel90"); // NOI18N
    jPanel90.setOpaque(false);
    jPanel90.setPreferredSize(new java.awt.Dimension(333, 601));
    jPanel90.setLayout(new javax.swing.BoxLayout(jPanel90, javax.swing.BoxLayout.PAGE_AXIS));

    jPanel96.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel96.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, getFont())); // NOI18N
    jPanel96.setName("jPanel96"); // NOI18N
    jPanel96.setOpaque(false);
    jPanel96.setPreferredSize(new java.awt.Dimension(333, 700));
    jPanel96.setLayout(new javax.swing.BoxLayout(jPanel96, javax.swing.BoxLayout.LINE_AXIS));

    jScrollPane18.setName("jScrollPane18"); // NOI18N
    jScrollPane18.setOpaque(false);

    jTable5.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Transaction #", "Date", "Customer", "Description", "Amount"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    jTable5.setName("jTable5"); // NOI18N
    jTable5.setOpaque(false);
    jTable5.getTableHeader().setReorderingAllowed(false);
    jScrollPane18.setViewportView(jTable5);
    if (jTable5.getColumnModel().getColumnCount() > 0)
    {
      jTable5.getColumnModel().getColumn(0).setMinWidth(30);
      jTable5.getColumnModel().getColumn(0).setPreferredWidth(30);
      jTable5.getColumnModel().getColumn(0).setMaxWidth(30);
      jTable5.getColumnModel().getColumn(1).setMinWidth(60);
      jTable5.getColumnModel().getColumn(1).setPreferredWidth(60);
      jTable5.getColumnModel().getColumn(1).setMaxWidth(60);
      jTable5.getColumnModel().getColumn(4).setMinWidth(50);
      jTable5.getColumnModel().getColumn(4).setPreferredWidth(50);
      jTable5.getColumnModel().getColumn(4).setMaxWidth(50);
      jTable5.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTable4.columnModel.title3")); // NOI18N
    }

    jPanel96.add(jScrollPane18);

    jPanel90.add(jPanel96);

    jPanel98.setMaximumSize(new java.awt.Dimension(333, 100));
    jPanel98.setMinimumSize(new java.awt.Dimension(333, 100));
    jPanel98.setName("jPanel98"); // NOI18N
    jPanel98.setOpaque(false);
    jPanel98.setPreferredSize(new java.awt.Dimension(333, 100));
    jPanel98.setLayout(new javax.swing.BoxLayout(jPanel98, javax.swing.BoxLayout.LINE_AXIS));

    jPanel103.setName("jPanel103"); // NOI18N
    jPanel103.setOpaque(false);
    jPanel103.setLayout(new javax.swing.BoxLayout(jPanel103, javax.swing.BoxLayout.LINE_AXIS));

    jPanel104.setName("jPanel104"); // NOI18N
    jPanel104.setOpaque(false);
    jPanel104.setLayout(new java.awt.GridLayout(3, 1));

    jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
    jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
    jLabel7.setName("jLabel7"); // NOI18N
    jPanel104.add(jLabel7);

    checksTotal.setText(resourceMap.getString("checksTotal.text")); // NOI18N
    checksTotal.setMaximumSize(new java.awt.Dimension(46, 20));
    checksTotal.setMinimumSize(new java.awt.Dimension(46, 20));
    checksTotal.setName("checksTotal"); // NOI18N
    jPanel104.add(checksTotal);

    jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
    jLabel15.setName("jLabel15"); // NOI18N
    jPanel104.add(jLabel15);

    jPanel103.add(jPanel104);

    jPanel105.setName("jPanel105"); // NOI18N
    jPanel105.setOpaque(false);
    jPanel105.setLayout(new java.awt.GridLayout(3, 1));

    jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
    jLabel17.setName("jLabel17"); // NOI18N
    jPanel105.add(jLabel17);

    jButton11.setText(resourceMap.getString("jButton11.text")); // NOI18N
    jButton11.setName("jButton11"); // NOI18N
    jPanel105.add(jButton11);

    jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
    jLabel18.setName("jLabel18"); // NOI18N
    jPanel105.add(jLabel18);

    jPanel103.add(jPanel105);

    jPanel98.add(jPanel103);

    jPanel90.add(jPanel98);

    jPanel70.add(jPanel90);

    jPanel92.setName("jPanel92"); // NOI18N
    jPanel92.setOpaque(false);
    jPanel92.setPreferredSize(new java.awt.Dimension(333, 601));
    jPanel92.setLayout(new javax.swing.BoxLayout(jPanel92, javax.swing.BoxLayout.PAGE_AXIS));

    jPanel106.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel106.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, getFont())); // NOI18N
    jPanel106.setName("jPanel106"); // NOI18N
    jPanel106.setOpaque(false);
    jPanel106.setPreferredSize(new java.awt.Dimension(333, 700));
    jPanel106.setLayout(new javax.swing.BoxLayout(jPanel106, javax.swing.BoxLayout.LINE_AXIS));

    jScrollPane19.setName("jScrollPane19"); // NOI18N
    jScrollPane19.setOpaque(false);

    jTable6.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Transaction #", "Date", "Customer", "Description", "Amount"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    jTable6.setName("jTable6"); // NOI18N
    jTable6.setOpaque(false);
    jTable6.getTableHeader().setReorderingAllowed(false);
    jScrollPane19.setViewportView(jTable6);
    if (jTable6.getColumnModel().getColumnCount() > 0)
    {
      jTable6.getColumnModel().getColumn(0).setMinWidth(30);
      jTable6.getColumnModel().getColumn(0).setPreferredWidth(30);
      jTable6.getColumnModel().getColumn(0).setMaxWidth(30);
      jTable6.getColumnModel().getColumn(1).setMinWidth(60);
      jTable6.getColumnModel().getColumn(1).setPreferredWidth(60);
      jTable6.getColumnModel().getColumn(1).setMaxWidth(60);
      jTable6.getColumnModel().getColumn(4).setMinWidth(50);
      jTable6.getColumnModel().getColumn(4).setPreferredWidth(50);
      jTable6.getColumnModel().getColumn(4).setMaxWidth(50);
      jTable6.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTable4.columnModel.title3")); // NOI18N
    }

    jPanel106.add(jScrollPane19);

    jPanel92.add(jPanel106);

    jPanel108.setMaximumSize(new java.awt.Dimension(333, 100));
    jPanel108.setMinimumSize(new java.awt.Dimension(333, 100));
    jPanel108.setName("jPanel108"); // NOI18N
    jPanel108.setOpaque(false);
    jPanel108.setPreferredSize(new java.awt.Dimension(333, 100));
    jPanel108.setLayout(new javax.swing.BoxLayout(jPanel108, javax.swing.BoxLayout.LINE_AXIS));

    jPanel109.setName("jPanel109"); // NOI18N
    jPanel109.setOpaque(false);
    jPanel109.setLayout(new javax.swing.BoxLayout(jPanel109, javax.swing.BoxLayout.LINE_AXIS));

    jPanel110.setName("jPanel110"); // NOI18N
    jPanel110.setOpaque(false);
    jPanel110.setLayout(new java.awt.GridLayout(3, 1));

    jLabel19.setFont(resourceMap.getFont("jLabel19.font")); // NOI18N
    jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
    jLabel19.setName("jLabel19"); // NOI18N
    jPanel110.add(jLabel19);

    cashTotal.setText(resourceMap.getString("cashTotal.text")); // NOI18N
    cashTotal.setMaximumSize(new java.awt.Dimension(46, 20));
    cashTotal.setMinimumSize(new java.awt.Dimension(46, 20));
    cashTotal.setName("cashTotal"); // NOI18N
    jPanel110.add(cashTotal);

    jLabel20.setText(resourceMap.getString("jLabel20.text")); // NOI18N
    jLabel20.setName("jLabel20"); // NOI18N
    jPanel110.add(jLabel20);

    jPanel109.add(jPanel110);

    jPanel111.setName("jPanel111"); // NOI18N
    jPanel111.setOpaque(false);
    jPanel111.setLayout(new java.awt.GridLayout(3, 1));

    jLabel21.setText(resourceMap.getString("jLabel21.text")); // NOI18N
    jLabel21.setName("jLabel21"); // NOI18N
    jPanel111.add(jLabel21);

    jButton12.setText(resourceMap.getString("jButton12.text")); // NOI18N
    jButton12.setName("jButton12"); // NOI18N
    jPanel111.add(jButton12);

    jLabel24.setText(resourceMap.getString("jLabel24.text")); // NOI18N
    jLabel24.setName("jLabel24"); // NOI18N
    jPanel111.add(jLabel24);

    jPanel109.add(jPanel111);

    jPanel108.add(jPanel109);

    jPanel92.add(jPanel108);

    jPanel70.add(jPanel92);

    batchOutDialog.getContentPane().add(jPanel70);

    setBackground(resourceMap.getColor("CashierWindow.background")); // NOI18N
    setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    setName("CashierWindow"); // NOI18N
    addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        cashierWindowShown(evt);
      }
    });
    setLayout(new java.awt.GridLayout(1, 0));

    jideTabbedPane2.setBoldActiveTab(true);
    jideTabbedPane2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
    jideTabbedPane2.setName("jideTabbedPane2"); // NOI18N
    jideTabbedPane2.setSelectedTabFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jideTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        jideTabbedPane2MouseClicked(evt);
      }
    });

    jideTabbedPane1.setBoldActiveTab(true);
    jideTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
    jideTabbedPane1.setName("jideTabbedPane1"); // NOI18N
    jideTabbedPane1.setSelectedTabFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

    jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
    jPanel1.setFont(resourceMap.getFont("jPanel1.font")); // NOI18N
    jPanel1.setName("jPanel1"); // NOI18N
    jPanel1.setLayout(new java.awt.GridLayout(1, 1));

    jSplitPane1.setBackground(resourceMap.getColor("jSplitPane1.background")); // NOI18N
    jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    jSplitPane1.setName("jSplitPane1"); // NOI18N

    jPanel2.setBackground(resourceMap.getColor("jPanel2.background")); // NOI18N
    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel2.setMinimumSize(new java.awt.Dimension(25, 200));
    jPanel2.setName("jPanel2"); // NOI18N
    jPanel2.setPreferredSize(new java.awt.Dimension(400, 300));
    jPanel2.setLayout(new java.awt.BorderLayout(0, 4));

    jPanel29.setName("jPanel29"); // NOI18N
    jPanel29.setOpaque(false);
    jPanel29.setLayout(new java.awt.BorderLayout(0, 5));

    jPanel30.setMinimumSize(new java.awt.Dimension(819, 35));
    jPanel30.setName("jPanel30"); // NOI18N
    jPanel30.setOpaque(false);
    jPanel30.setPreferredSize(new java.awt.Dimension(819, 35));
    jPanel30.setLayout(new javax.swing.BoxLayout(jPanel30, javax.swing.BoxLayout.X_AXIS));

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel3.setMaximumSize(new java.awt.Dimension(200, 35));
    jPanel3.setMinimumSize(new java.awt.Dimension(200, 35));
    jPanel3.setName("jPanel3"); // NOI18N
    jPanel3.setOpaque(false);
    jPanel3.setPreferredSize(new java.awt.Dimension(200, 35));
    jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.X_AXIS));

    jLabel117.setFont(getFont());
    jLabel117.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel117.setText(resourceMap.getString("jLabel117.text")); // NOI18N
    jLabel117.setName("jLabel117"); // NOI18N
    jPanel3.add(jLabel117);

    cashierCollectSearch.setFont(resourceMap.getFont("cashierCollectSearch.font")); // NOI18N
    cashierCollectSearch.setName("cashierCollectSearch"); // NOI18N
    cashierCollectSearch.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyReleased(java.awt.event.KeyEvent evt)
      {
        searchEnterKeyed(evt);
      }
    });
    jPanel3.add(cashierCollectSearch);

    searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dms/windows/resources/Search-button-green-20.png"))); // NOI18N
    searchButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    searchButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
    searchButton.setMaximumSize(new java.awt.Dimension(20, 20));
    searchButton.setMinimumSize(new java.awt.Dimension(20, 20));
    searchButton.setName("searchButton"); // NOI18N
    searchButton.setPreferredSize(new java.awt.Dimension(20, 20));
    searchButton.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        searchButtonClicked(evt);
      }
    });
    jPanel3.add(searchButton);

    jPanel30.add(jPanel3);

    jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel22.setMaximumSize(new java.awt.Dimension(125, 35));
    jPanel22.setMinimumSize(new java.awt.Dimension(125, 35));
    jPanel22.setName("jPanel22"); // NOI18N
    jPanel22.setOpaque(false);
    jPanel22.setPreferredSize(new java.awt.Dimension(125, 35));
    jPanel22.setLayout(new java.awt.GridLayout(1, 2, 10, 0));

    jLabel122.setFont(getFont());
    jLabel122.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel122.setText(resourceMap.getString("jLabel122.text")); // NOI18N
    jLabel122.setName("jLabel122"); // NOI18N
    jPanel22.add(jLabel122);

    itemsLabel.setFont(getFont());
    itemsLabel.setForeground(resourceMap.getColor("itemsLabel.foreground")); // NOI18N
    itemsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    itemsLabel.setName("itemsLabel"); // NOI18N
    jPanel22.add(itemsLabel);

    jPanel30.add(jPanel22);

    jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel21.setMaximumSize(new java.awt.Dimension(32767, 35));
    jPanel21.setMinimumSize(new java.awt.Dimension(250, 35));
    jPanel21.setName("jPanel21"); // NOI18N
    jPanel21.setOpaque(false);
    jPanel21.setPreferredSize(new java.awt.Dimension(498, 35));
    jPanel21.setLayout(new java.awt.GridLayout(1, 0));

    newDealButton.setFont(getFont());
    newDealButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dms/windows/resources/edit_add-22.png"))); // NOI18N
    newDealButton.setText(resourceMap.getString("newDealButton.text")); // NOI18N
    newDealButton.setBorder(null);
    newDealButton.setBorderPainted(false);
    newDealButton.setFocusPainted(false);
    newDealButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    newDealButton.setMargin(new java.awt.Insets(14, 14, 14, 14));
    newDealButton.setMaximumSize(new java.awt.Dimension(106, 40));
    newDealButton.setMinimumSize(new java.awt.Dimension(106, 40));
    newDealButton.setName("newDealButton"); // NOI18N
    newDealButton.setOpaque(false);
    newDealButton.setPreferredSize(new java.awt.Dimension(106, 40));
    newDealButton.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        collectionsButtonsClicked(evt);
      }
    });
    jPanel21.add(newDealButton);

    transferDealButton.setText(resourceMap.getString("transferDealButton.text")); // NOI18N
    transferDealButton.setBorderPainted(false);
    transferDealButton.setContentAreaFilled(false);
    transferDealButton.setDoubleBuffered(true);
    transferDealButton.setEnabled(false);
    transferDealButton.setFocusTraversalPolicyProvider(true);
    transferDealButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    transferDealButton.setMargin(new java.awt.Insets(14, 14, 14, 14));
    transferDealButton.setName("transferDealButton"); // NOI18N
    jPanel21.add(transferDealButton);

    editDealButton.setFont(getFont());
    editDealButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dms/windows/resources/edit-22.png"))); // NOI18N
    editDealButton.setText(resourceMap.getString("editDealButton.text")); // NOI18N
    editDealButton.setBorder(null);
    editDealButton.setBorderPainted(false);
    editDealButton.setFocusPainted(false);
    editDealButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    editDealButton.setMargin(new java.awt.Insets(14, 14, 14, 14));
    editDealButton.setMaximumSize(new java.awt.Dimension(106, 40));
    editDealButton.setMinimumSize(new java.awt.Dimension(106, 40));
    editDealButton.setName("editDealButton"); // NOI18N
    editDealButton.setOpaque(false);
    editDealButton.setPreferredSize(new java.awt.Dimension(106, 40));
    editDealButton.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        collectionsButtonsClicked(evt);
      }
    });
    jPanel21.add(editDealButton);

    deleteDealButton.setFont(getFont());
    deleteDealButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dms/windows/resources/edit_remove-22.png"))); // NOI18N
    deleteDealButton.setText(resourceMap.getString("deleteDealButton.text")); // NOI18N
    deleteDealButton.setBorder(null);
    deleteDealButton.setBorderPainted(false);
    deleteDealButton.setFocusPainted(false);
    deleteDealButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    deleteDealButton.setMargin(new java.awt.Insets(14, 14, 14, 14));
    deleteDealButton.setMaximumSize(new java.awt.Dimension(120, 40));
    deleteDealButton.setMinimumSize(new java.awt.Dimension(120, 40));
    deleteDealButton.setName("deleteDealButton"); // NOI18N
    deleteDealButton.setOpaque(false);
    deleteDealButton.setPreferredSize(new java.awt.Dimension(120, 40));
    deleteDealButton.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        collectionsButtonsClicked(evt);
      }
    });
    jPanel21.add(deleteDealButton);

    jPanel30.add(jPanel21);

    jPanel29.add(jPanel30, java.awt.BorderLayout.NORTH);

    collectViewsPanel.setName("collectViewsPanel"); // NOI18N
    collectViewsPanel.setOpaque(false);
    collectViewsPanel.setLayout(new java.awt.CardLayout());

    dealViewsPanel.setName("dealViewsPanel"); // NOI18N
    dealViewsPanel.setLayout(new java.awt.GridLayout(1, 0));

    jScrollPane1.setName("jScrollPane1"); // NOI18N

    dealsCollectTable.setAutoCreateRowSorter(true);
    dealsCollectTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Account #", "Buyer's Name", "Finance Manager", "Sales Manager", "Date Sold", "Vehicle"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    dealsCollectTable.setFillsViewportHeight(true);
    dealsCollectTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    dealsCollectTable.setName("dealsCollectTable"); // NOI18N
    dealsCollectTable.setShowHorizontalLines(false);
    dealsCollectTable.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        collectTablesClicked(evt);
      }
    });
    dealsCollectTable.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyReleased(java.awt.event.KeyEvent evt)
      {
        collectTablesKeyed(evt);
      }
    });
    jScrollPane1.setViewportView(dealsCollectTable);

    dealViewsPanel.add(jScrollPane1);

    collectViewsPanel.add(dealViewsPanel, "card5");

    serviceViewsPanel.setName("serviceViewsPanel"); // NOI18N
    serviceViewsPanel.setLayout(new java.awt.GridLayout(1, 0));

    jScrollPane4.setName("jScrollPane4"); // NOI18N

    serviceCollectTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Invoice #", "Customer", "Service Advisor", "RO Closed Date", "Vehicle"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    serviceCollectTable.setFillsViewportHeight(true);
    serviceCollectTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    serviceCollectTable.setName("serviceCollectTable"); // NOI18N
    serviceCollectTable.getTableHeader().setReorderingAllowed(false);
    serviceCollectTable.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        collectTablesClicked(evt);
      }
    });
    serviceCollectTable.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyReleased(java.awt.event.KeyEvent evt)
      {
        collectTablesKeyed(evt);
      }
    });
    jScrollPane4.setViewportView(serviceCollectTable);

    serviceViewsPanel.add(jScrollPane4);

    collectViewsPanel.add(serviceViewsPanel, "card6");

    otherViewsPanel.setName("otherViewsPanel"); // NOI18N
    otherViewsPanel.setOpaque(false);
    otherViewsPanel.setLayout(new java.awt.GridLayout(1, 0));

    jLabel61.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
    jLabel61.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel61.setText(resourceMap.getString("jLabel61.text")); // NOI18N
    jLabel61.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jLabel61.setName("jLabel61"); // NOI18N
    otherViewsPanel.add(jLabel61);

    collectViewsPanel.add(otherViewsPanel, "card7");

    jPanel29.add(collectViewsPanel, java.awt.BorderLayout.CENTER);

    jPanel2.add(jPanel29, java.awt.BorderLayout.CENTER);

    jPanel31.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel31.setMaximumSize(new java.awt.Dimension(32767, 30));
    jPanel31.setMinimumSize(new java.awt.Dimension(720, 30));
    jPanel31.setName("jPanel31"); // NOI18N
    jPanel31.setOpaque(false);
    jPanel31.setPreferredSize(new java.awt.Dimension(720, 30));
    jPanel31.setLayout(new java.awt.GridLayout(1, 3));

    jLabel46.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jLabel46.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel46.setText(resourceMap.getString("jLabel46.text")); // NOI18N
    jLabel46.setName("jLabel46"); // NOI18N
    jPanel31.add(jLabel46);

    buttonGroup1.add(collectDealsButton);
    collectDealsButton.setFont(getFont());
    collectDealsButton.setSelected(true);
    collectDealsButton.setText(resourceMap.getString("collectDealsButton.text")); // NOI18N
    collectDealsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    collectDealsButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    collectDealsButton.setName("collectDealsButton"); // NOI18N
    collectDealsButton.setOpaque(false);
    collectDealsButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        collectionsRadioButtonsClicked(evt);
      }
    });
    jPanel31.add(collectDealsButton);

    buttonGroup1.add(collectServiceButton);
    collectServiceButton.setFont(getFont());
    collectServiceButton.setText(resourceMap.getString("collectServiceButton.text")); // NOI18N
    collectServiceButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    collectServiceButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    collectServiceButton.setName("collectServiceButton"); // NOI18N
    collectServiceButton.setOpaque(false);
    collectServiceButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        collectionsRadioButtonsClicked(evt);
      }
    });
    jPanel31.add(collectServiceButton);

    buttonGroup1.add(collectOtherButton);
    collectOtherButton.setFont(getFont());
    collectOtherButton.setText(resourceMap.getString("collectOtherButton.text")); // NOI18N
    collectOtherButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    collectOtherButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    collectOtherButton.setName("collectOtherButton"); // NOI18N
    collectOtherButton.setOpaque(false);
    collectOtherButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        collectionsRadioButtonsClicked(evt);
      }
    });
    jPanel31.add(collectOtherButton);

    printListButton.setText(resourceMap.getString("printListButton.text")); // NOI18N
    printListButton.setBorderPainted(false);
    printListButton.setContentAreaFilled(false);
    printListButton.setDoubleBuffered(true);
    printListButton.setEnabled(false);
    printListButton.setFocusTraversalPolicyProvider(true);
    printListButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    printListButton.setMargin(new java.awt.Insets(14, 14, 14, 14));
    printListButton.setName("printListButton"); // NOI18N
    jPanel31.add(printListButton);

    jPanel2.add(jPanel31, java.awt.BorderLayout.NORTH);

    jSplitPane1.setTopComponent(jPanel2);

    jPanel4.setBackground(resourceMap.getColor("jPanel4.background")); // NOI18N
    jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel4.setMinimumSize(new java.awt.Dimension(25, 250));
    jPanel4.setName("jPanel4"); // NOI18N
    jPanel4.setPreferredSize(new java.awt.Dimension(400, 300));
    jPanel4.setLayout(new java.awt.GridLayout(1, 0));

    collectionInfoPanel.setName("collectionInfoPanel"); // NOI18N
    collectionInfoPanel.setOpaque(false);
    collectionInfoPanel.setLayout(new java.awt.CardLayout());

    jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, null, resourceMap.getColor("jPanel13.border.titleColor"))); // NOI18N
    jPanel13.setFont(resourceMap.getFont("jPanel13.font")); // NOI18N
    jPanel13.setName("jPanel13"); // NOI18N
    jPanel13.setOpaque(false);
    jPanel13.setLayout(new java.awt.BorderLayout(5, 0));

    jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel12.setMinimumSize(new java.awt.Dimension(354, 120));
    jPanel12.setName("jPanel12"); // NOI18N
    jPanel12.setOpaque(false);
    jPanel12.setPreferredSize(new java.awt.Dimension(354, 120));
    jPanel12.setLayout(new java.awt.BorderLayout());

    jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel17.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13), new java.awt.Color(0, 0, 153))); // NOI18N
    jPanel17.setMaximumSize(new java.awt.Dimension(32767, 125));
    jPanel17.setMinimumSize(new java.awt.Dimension(282, 125));
    jPanel17.setName("jPanel17"); // NOI18N
    jPanel17.setOpaque(false);
    jPanel17.setPreferredSize(new java.awt.Dimension(282, 125));
    jPanel17.setLayout(new java.awt.GridLayout(1, 0));

    jPanel18.setName("jPanel18"); // NOI18N
    jPanel18.setOpaque(false);
    jPanel18.setLayout(new java.awt.BorderLayout());

    jPanel32.setName("jPanel32"); // NOI18N
    jPanel32.setOpaque(false);
    jPanel32.setLayout(new java.awt.GridLayout(5, 1, 0, 2));

    jFormattedTextField1.setEditable(false);
    jFormattedTextField1.setBorder(null);
    jFormattedTextField1.setForeground(itemsLabel.getForeground());
    jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    jFormattedTextField1.setText(resourceMap.getString("jFormattedTextField1.text")); // NOI18N
    jFormattedTextField1.setFont(getFont());
    jFormattedTextField1.setName("jFormattedTextField1"); // NOI18N
    jFormattedTextField1.setOpaque(false);
    jPanel32.add(jFormattedTextField1);

    jFormattedTextField3.setEditable(false);
    jFormattedTextField3.setBorder(null);
    jFormattedTextField3.setForeground(itemsLabel.getForeground());
    jFormattedTextField3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    jFormattedTextField3.setText(resourceMap.getString("jFormattedTextField3.text")); // NOI18N
    jFormattedTextField3.setFont(getFont());
    jFormattedTextField3.setName("jFormattedTextField3"); // NOI18N
    jFormattedTextField3.setOpaque(false);
    jPanel32.add(jFormattedTextField3);

    jPanel18.add(jPanel32, java.awt.BorderLayout.CENTER);

    jPanel28.setName("jPanel28"); // NOI18N
    jPanel28.setOpaque(false);
    jPanel28.setLayout(new java.awt.GridLayout(5, 1, 0, 2));

    jLabel4.setFont(getFont());
    jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
    jLabel4.setName("jLabel4"); // NOI18N
    jPanel28.add(jLabel4);

    jLabel6.setFont(getFont());
    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
    jLabel6.setName("jLabel6"); // NOI18N
    jPanel28.add(jLabel6);

    jPanel18.add(jPanel28, java.awt.BorderLayout.WEST);

    jPanel17.add(jPanel18);

    jPanel19.setName("jPanel19"); // NOI18N
    jPanel19.setOpaque(false);
    jPanel19.setLayout(new java.awt.BorderLayout());

    jPanel45.setName("jPanel45"); // NOI18N
    jPanel45.setOpaque(false);
    jPanel45.setLayout(new java.awt.GridLayout(0, 1, 0, 2));

    jTextField13.setEditable(false);
    jTextField13.setFont(getFont());
    jTextField13.setForeground(itemsLabel.getForeground());
    jTextField13.setBorder(null);
    jTextField13.setName("jTextField13"); // NOI18N
    jTextField13.setOpaque(false);
    jPanel45.add(jTextField13);

    jTextField14.setEditable(false);
    jTextField14.setFont(getFont());
    jTextField14.setForeground(itemsLabel.getForeground());
    jTextField14.setBorder(null);
    jTextField14.setName("jTextField14"); // NOI18N
    jTextField14.setOpaque(false);
    jPanel45.add(jTextField14);

    jTextField15.setEditable(false);
    jTextField15.setFont(getFont());
    jTextField15.setForeground(itemsLabel.getForeground());
    jTextField15.setBorder(null);
    jTextField15.setName("jTextField15"); // NOI18N
    jTextField15.setOpaque(false);
    jPanel45.add(jTextField15);

    jFormattedTextField18.setEditable(false);
    jFormattedTextField18.setBorder(null);
    jFormattedTextField18.setForeground(itemsLabel.getForeground());
    jFormattedTextField18.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    jFormattedTextField18.setFont(getFont());
    jFormattedTextField18.setName("jFormattedTextField18"); // NOI18N
    jFormattedTextField18.setOpaque(false);
    jPanel45.add(jFormattedTextField18);

    jFormattedTextField19.setEditable(false);
    jFormattedTextField19.setBorder(null);
    jFormattedTextField19.setForeground(itemsLabel.getForeground());
    jFormattedTextField19.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("MM/dd/yyyy"))));
    jFormattedTextField19.setFont(getFont());
    jFormattedTextField19.setName("jFormattedTextField19"); // NOI18N
    jFormattedTextField19.setOpaque(false);
    jPanel45.add(jFormattedTextField19);

    jPanel19.add(jPanel45, java.awt.BorderLayout.CENTER);

    jPanel43.setName("jPanel43"); // NOI18N
    jPanel43.setOpaque(false);
    jPanel43.setLayout(new java.awt.GridLayout(0, 1, 0, 2));

    jLabel30.setFont(getFont());
    jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel30.setText(resourceMap.getString("jLabel30.text")); // NOI18N
    jLabel30.setName("jLabel30"); // NOI18N
    jPanel43.add(jLabel30);

    jLabel31.setFont(getFont());
    jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel31.setText(resourceMap.getString("jLabel31.text")); // NOI18N
    jLabel31.setName("jLabel31"); // NOI18N
    jPanel43.add(jLabel31);

    jLabel32.setFont(getFont());
    jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel32.setText(resourceMap.getString("jLabel32.text")); // NOI18N
    jLabel32.setName("jLabel32"); // NOI18N
    jPanel43.add(jLabel32);

    jLabel33.setFont(getFont());
    jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel33.setText(resourceMap.getString("jLabel33.text")); // NOI18N
    jLabel33.setName("jLabel33"); // NOI18N
    jPanel43.add(jLabel33);

    jLabel34.setFont(getFont());
    jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel34.setText(resourceMap.getString("jLabel34.text")); // NOI18N
    jLabel34.setName("jLabel34"); // NOI18N
    jPanel43.add(jLabel34);

    jPanel19.add(jPanel43, java.awt.BorderLayout.WEST);

    jPanel17.add(jPanel19);

    jPanel12.add(jPanel17, java.awt.BorderLayout.CENTER);

    jPanel13.add(jPanel12, java.awt.BorderLayout.CENTER);

    jPanel59.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel59.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13), new java.awt.Color(0, 0, 153))); // NOI18N
    jPanel59.setName("jPanel59"); // NOI18N
    jPanel59.setOpaque(false);
    jPanel59.setPreferredSize(new java.awt.Dimension(311, 175));
    jPanel59.setLayout(new java.awt.BorderLayout());

    jScrollPane9.setName("jScrollPane9"); // NOI18N

    uICTable1.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "TransactionNumber", "User Name", "Date", "Description", "Amount"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    uICTable1.setFillsViewportHeight(true);
    uICTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    uICTable1.setName("uICTable1"); // NOI18N
    uICTable1.getTableHeader().setReorderingAllowed(false);
    jScrollPane9.setViewportView(uICTable1);
    if (uICTable1.getColumnModel().getColumnCount() > 0)
    {
      uICTable1.getColumnModel().getColumn(0).setMinWidth(0);
      uICTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
      uICTable1.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    jPanel59.add(jScrollPane9, java.awt.BorderLayout.CENTER);

    jPanel47.setName("jPanel47"); // NOI18N
    jPanel47.setOpaque(false);
    jPanel47.setLayout(new java.awt.GridLayout(1, 0));

    jButton4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
    jButton4.setName("jButton4"); // NOI18N
    jButton4.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        printReceipts(evt);
      }
    });
    jPanel47.add(jButton4);

    jLabel48.setName("jLabel48"); // NOI18N
    jPanel47.add(jLabel48);

    jLabel49.setName("jLabel49"); // NOI18N
    jPanel47.add(jLabel49);

    jPanel59.add(jPanel47, java.awt.BorderLayout.SOUTH);

    jPanel13.add(jPanel59, java.awt.BorderLayout.SOUTH);

    collectionInfoPanel.add(jPanel13, "card5");

    jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, null, resourceMap.getColor("jPanel14.border.titleColor"))); // NOI18N
    jPanel14.setFont(resourceMap.getFont("jPanel14.font")); // NOI18N
    jPanel14.setName("jPanel14"); // NOI18N
    jPanel14.setOpaque(false);
    jPanel14.setLayout(new java.awt.BorderLayout(5, 0));

    jPanel33.setName("jPanel33"); // NOI18N
    jPanel33.setOpaque(false);
    jPanel33.setLayout(new java.awt.GridLayout(0, 1, 0, 2));

    jLabel8.setFont(getFont());
    jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
    jLabel8.setName("jLabel8"); // NOI18N
    jPanel33.add(jLabel8);

    jLabel9.setFont(getFont());
    jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
    jLabel9.setName("jLabel9"); // NOI18N
    jPanel33.add(jLabel9);

    jLabel10.setFont(getFont());
    jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
    jLabel10.setName("jLabel10"); // NOI18N
    jPanel33.add(jLabel10);

    jLabel13.setFont(getFont());
    jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel13.setText("Invoice Amount Due :"); // NOI18N
    jLabel13.setName("jLabel13"); // NOI18N
    jPanel33.add(jLabel13);

    jLabel23.setFont(getFont());
    jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel23.setText("Warranty Due :"); // NOI18N
    jLabel23.setName("jLabel23"); // NOI18N
    jPanel33.add(jLabel23);

    jLabel14.setFont(getFont());
    jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
    jLabel14.setName("jLabel14"); // NOI18N
    jPanel33.add(jLabel14);

    jLabel38.setFont(getFont());
    jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel38.setText(resourceMap.getString("jLabel38.text")); // NOI18N
    jLabel38.setName("jLabel38"); // NOI18N
    jPanel33.add(jLabel38);

    jPanel14.add(jPanel33, java.awt.BorderLayout.WEST);

    jPanel34.setName("jPanel34"); // NOI18N
    jPanel34.setOpaque(false);
    jPanel34.setLayout(new java.awt.GridLayout(0, 1, 0, 2));

    jTextField4.setEditable(false);
    jTextField4.setFont(getFont());
    jTextField4.setForeground(itemsLabel.getForeground());
    jTextField4.setBorder(null);
    jTextField4.setName("jTextField4"); // NOI18N
    jTextField4.setOpaque(false);
    jPanel34.add(jTextField4);

    jTextField5.setEditable(false);
    jTextField5.setFont(getFont());
    jTextField5.setForeground(itemsLabel.getForeground());
    jTextField5.setBorder(null);
    jTextField5.setName("jTextField5"); // NOI18N
    jTextField5.setOpaque(false);
    jPanel34.add(jTextField5);

    jTextField6.setEditable(false);
    jTextField6.setFont(getFont());
    jTextField6.setForeground(itemsLabel.getForeground());
    jTextField6.setBorder(null);
    jTextField6.setName("jTextField6"); // NOI18N
    jTextField6.setOpaque(false);
    jPanel34.add(jTextField6);

    jFormattedTextField7.setEditable(false);
    jFormattedTextField7.setBorder(null);
    jFormattedTextField7.setForeground(itemsLabel.getForeground());
    jFormattedTextField7.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    jFormattedTextField7.setFont(getFont());
    jFormattedTextField7.setName("jFormattedTextField7"); // NOI18N
    jFormattedTextField7.setOpaque(false);
    jPanel34.add(jFormattedTextField7);

    jFormattedTextField9.setEditable(false);
    jFormattedTextField9.setBorder(null);
    jFormattedTextField9.setForeground(itemsLabel.getForeground());
    jFormattedTextField9.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    jFormattedTextField9.setFont(getFont());
    jFormattedTextField9.setName("jFormattedTextField9"); // NOI18N
    jFormattedTextField9.setOpaque(false);
    jPanel34.add(jFormattedTextField9);

    jFormattedTextField8.setEditable(false);
    jFormattedTextField8.setBorder(null);
    jFormattedTextField8.setForeground(itemsLabel.getForeground());
    jFormattedTextField8.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    jFormattedTextField8.setFont(getFont());
    jFormattedTextField8.setName("jFormattedTextField8"); // NOI18N
    jFormattedTextField8.setOpaque(false);
    jPanel34.add(jFormattedTextField8);

    jFormattedTextField23.setEditable(false);
    jFormattedTextField23.setBorder(null);
    jFormattedTextField23.setForeground(itemsLabel.getForeground());
    jFormattedTextField23.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    jFormattedTextField23.setFont(getFont());
    jFormattedTextField23.setName("jFormattedTextField23"); // NOI18N
    jFormattedTextField23.setOpaque(false);
    jPanel34.add(jFormattedTextField23);

    jPanel14.add(jPanel34, java.awt.BorderLayout.CENTER);

    jPanel60.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel60.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel60.border.titleFont"), resourceMap.getColor("jPanel60.border.titleColor"))); // NOI18N
    jPanel60.setName("jPanel60"); // NOI18N
    jPanel60.setOpaque(false);
    jPanel60.setPreferredSize(new java.awt.Dimension(311, 170));
    jPanel60.setLayout(new java.awt.BorderLayout());

    jScrollPane10.setName("jScrollPane10"); // NOI18N

    uICTable2.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "TransactionNumber", "User Name", "Date", "Description", "Amount"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    uICTable2.setFillsViewportHeight(true);
    uICTable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    uICTable2.setName("uICTable2"); // NOI18N
    uICTable2.getTableHeader().setReorderingAllowed(false);
    jScrollPane10.setViewportView(uICTable2);
    if (uICTable2.getColumnModel().getColumnCount() > 0)
    {
      uICTable2.getColumnModel().getColumn(0).setMinWidth(0);
      uICTable2.getColumnModel().getColumn(0).setPreferredWidth(0);
      uICTable2.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    jPanel60.add(jScrollPane10, java.awt.BorderLayout.CENTER);

    jPanel46.setName("jPanel46"); // NOI18N
    jPanel46.setOpaque(false);
    jPanel46.setLayout(new java.awt.GridLayout(1, 0));

    jButton3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
    jButton3.setName("jButton3"); // NOI18N
    jButton3.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        printReceipts(evt);
      }
    });
    jPanel46.add(jButton3);

    jLabel44.setText(resourceMap.getString("jLabel44.text")); // NOI18N
    jLabel44.setName("jLabel44"); // NOI18N
    jPanel46.add(jLabel44);

    jLabel45.setText(resourceMap.getString("jLabel45.text")); // NOI18N
    jLabel45.setName("jLabel45"); // NOI18N
    jPanel46.add(jLabel45);

    jPanel60.add(jPanel46, java.awt.BorderLayout.SOUTH);

    jPanel14.add(jPanel60, java.awt.BorderLayout.SOUTH);

    collectionInfoPanel.add(jPanel14, "card4");

    jPanel49.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel49.setName("jPanel49"); // NOI18N
    jPanel49.setOpaque(false);
    jPanel49.setLayout(new java.awt.GridLayout(0, 1));

    jPanel66.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other Collections", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13), new java.awt.Color(0, 0, 153))); // NOI18N
    jPanel66.setName("jPanel66"); // NOI18N
    jPanel66.setOpaque(false);
    jPanel66.setPreferredSize(new java.awt.Dimension(311, 170));
    jPanel66.setLayout(new java.awt.BorderLayout());

    jScrollPane17.setName("jScrollPane17"); // NOI18N

    uICTable3.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "TransactionNumber", "User Name", "Date", "Description", "Amount"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    uICTable3.setFillsViewportHeight(true);
    uICTable3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    uICTable3.setName("uICTable3"); // NOI18N
    uICTable3.getTableHeader().setReorderingAllowed(false);
    jScrollPane17.setViewportView(uICTable3);
    if (uICTable3.getColumnModel().getColumnCount() > 0)
    {
      uICTable3.getColumnModel().getColumn(0).setMinWidth(0);
      uICTable3.getColumnModel().getColumn(0).setPreferredWidth(0);
      uICTable3.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    jPanel66.add(jScrollPane17, java.awt.BorderLayout.CENTER);

    jPanel67.setName("jPanel67"); // NOI18N
    jPanel67.setOpaque(false);
    jPanel67.setLayout(new java.awt.GridLayout(1, 0));

    jButton15.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jButton15.setText("Print Receipt"); // NOI18N
    jButton15.setName("jButton15"); // NOI18N
    jButton15.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        printReceipts(evt);
      }
    });
    jPanel67.add(jButton15);

    jLabel47.setName("jLabel47"); // NOI18N
    jPanel67.add(jLabel47);

    jLabel56.setName("jLabel56"); // NOI18N
    jPanel67.add(jLabel56);

    jPanel66.add(jPanel67, java.awt.BorderLayout.SOUTH);

    jPanel49.add(jPanel66);

    collectionInfoPanel.add(jPanel49, "card3");

    jPanel4.add(collectionInfoPanel);

    jPanel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 102), 2, true));
    jPanel8.setName("jPanel8"); // NOI18N
    jPanel8.setOpaque(false);
    jPanel8.setLayout(new java.awt.GridLayout(1, 0));

    jPanel53.setBackground(new java.awt.Color(202, 206, 252));
    jPanel53.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel53.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13), resourceMap.getColor("jPanel53.border.titleColor"))); // NOI18N
    jPanel53.setName("jPanel53"); // NOI18N
    jPanel53.setLayout(new java.awt.BorderLayout());

    jPanel25.setName("jPanel25"); // NOI18N
    jPanel25.setOpaque(false);
    jPanel25.setLayout(new javax.swing.BoxLayout(jPanel25, javax.swing.BoxLayout.LINE_AXIS));

    jPanel26.setName("jPanel26"); // NOI18N
    jPanel26.setOpaque(false);
    jPanel26.setLayout(new java.awt.GridLayout(0, 2, 5, 2));

    jLabel40.setFont(getFont());
    jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel40.setText(resourceMap.getString("jLabel40.text")); // NOI18N
    jLabel40.setName("jLabel40"); // NOI18N
    jPanel26.add(jLabel40);

    collectShiftCashCollectedField.setEditable(false);
    collectShiftCashCollectedField.setBorder(null);
    collectShiftCashCollectedField.setForeground(itemsLabel.getForeground());
    collectShiftCashCollectedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    collectShiftCashCollectedField.setText(resourceMap.getString("collectShiftCashCollectedField.text")); // NOI18N
    collectShiftCashCollectedField.setFocusable(false);
    collectShiftCashCollectedField.setFont(getFont());
    collectShiftCashCollectedField.setName("collectShiftCashCollectedField"); // NOI18N
    collectShiftCashCollectedField.setOpaque(false);
    collectShiftCashCollectedField.setRequestFocusEnabled(false);
    jPanel26.add(collectShiftCashCollectedField);

    jLabel41.setFont(getFont());
    jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel41.setText(resourceMap.getString("jLabel41.text")); // NOI18N
    jLabel41.setName("jLabel41"); // NOI18N
    jPanel26.add(jLabel41);

    collectShiftChecksCollectedField.setEditable(false);
    collectShiftChecksCollectedField.setBorder(null);
    collectShiftChecksCollectedField.setForeground(itemsLabel.getForeground());
    collectShiftChecksCollectedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    collectShiftChecksCollectedField.setText(resourceMap.getString("collectShiftChecksCollectedField.text")); // NOI18N
    collectShiftChecksCollectedField.setFocusable(false);
    collectShiftChecksCollectedField.setFont(getFont());
    collectShiftChecksCollectedField.setName("collectShiftChecksCollectedField"); // NOI18N
    collectShiftChecksCollectedField.setOpaque(false);
    collectShiftChecksCollectedField.setRequestFocusEnabled(false);
    jPanel26.add(collectShiftChecksCollectedField);

    jLabel42.setFont(getFont());
    jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel42.setText(resourceMap.getString("jLabel42.text")); // NOI18N
    jLabel42.setName("jLabel42"); // NOI18N
    jPanel26.add(jLabel42);

    collectShiftChargeCollectedField.setEditable(false);
    collectShiftChargeCollectedField.setBorder(null);
    collectShiftChargeCollectedField.setForeground(itemsLabel.getForeground());
    collectShiftChargeCollectedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    collectShiftChargeCollectedField.setText(resourceMap.getString("collectShiftChargeCollectedField.text")); // NOI18N
    collectShiftChargeCollectedField.setFocusable(false);
    collectShiftChargeCollectedField.setFont(getFont());
    collectShiftChargeCollectedField.setName("collectShiftChargeCollectedField"); // NOI18N
    collectShiftChargeCollectedField.setOpaque(false);
    collectShiftChargeCollectedField.setRequestFocusEnabled(false);
    jPanel26.add(collectShiftChargeCollectedField);

    jLabel43.setFont(getFont());
    jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel43.setText(resourceMap.getString("jLabel43.text")); // NOI18N
    jLabel43.setName("jLabel43"); // NOI18N
    jPanel26.add(jLabel43);

    collectShiftTotalCollectedField.setEditable(false);
    collectShiftTotalCollectedField.setBorder(null);
    collectShiftTotalCollectedField.setForeground(itemsLabel.getForeground());
    collectShiftTotalCollectedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    collectShiftTotalCollectedField.setText(resourceMap.getString("collectShiftTotalCollectedField.text")); // NOI18N
    collectShiftTotalCollectedField.setFocusable(false);
    collectShiftTotalCollectedField.setFont(getFont());
    collectShiftTotalCollectedField.setName("collectShiftTotalCollectedField"); // NOI18N
    collectShiftTotalCollectedField.setOpaque(false);
    collectShiftTotalCollectedField.setRequestFocusEnabled(false);
    jPanel26.add(collectShiftTotalCollectedField);

    jPanel25.add(jPanel26);

    jPanel53.add(jPanel25, java.awt.BorderLayout.NORTH);

    jScrollPane6.setName("jScrollPane6"); // NOI18N

    shiftCollectTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Customer", "Description", "Amount"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    shiftCollectTable.setAutoSelectTextWhenStartsEditing(false);
    shiftCollectTable.setFillsViewportHeight(true);
    shiftCollectTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    shiftCollectTable.setKeepRowHeights(false);
    shiftCollectTable.setName("shiftCollectTable"); // NOI18N
    shiftCollectTable.setRowAutoResizes(true);
    shiftCollectTable.getTableHeader().setReorderingAllowed(false);
    jScrollPane6.setViewportView(shiftCollectTable);

    jPanel53.add(jScrollPane6, java.awt.BorderLayout.CENTER);

    jPanel27.setName("jPanel27"); // NOI18N
    jPanel27.setOpaque(false);
    jPanel27.setLayout(new java.awt.GridLayout(1, 0));

    printShiftCollect.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    printShiftCollect.setText(resourceMap.getString("printShiftCollect.text")); // NOI18N
    printShiftCollect.setName("printShiftCollect"); // NOI18N
    printShiftCollect.setOpaque(false);
    printShiftCollect.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        printShiftClicked(evt);
      }
    });
    jPanel27.add(printShiftCollect);

    jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
    jLabel12.setName("jLabel12"); // NOI18N
    jPanel27.add(jLabel12);

    jLabel39.setText(resourceMap.getString("jLabel39.text")); // NOI18N
    jLabel39.setName("jLabel39"); // NOI18N
    jPanel27.add(jLabel39);

    jPanel53.add(jPanel27, java.awt.BorderLayout.SOUTH);

    jPanel8.add(jPanel53);

    jPanel4.add(jPanel8);

    jSplitPane1.setBottomComponent(jPanel4);

    jPanel1.add(jSplitPane1);

    jideTabbedPane1.addTab(resourceMap.getString("jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

    jPanel5.setBackground(resourceMap.getColor("jPanel5.background")); // NOI18N
    jPanel5.setFont(resourceMap.getFont("jPanel5.font")); // NOI18N
    jPanel5.setName("jPanel5"); // NOI18N
    jPanel5.setLayout(new java.awt.GridLayout(1, 1));

    jSplitPane5.setDividerLocation(400);
    jSplitPane5.setEnabled(false);
    jSplitPane5.setName("jSplitPane5"); // NOI18N

    jPanel6.setBackground(resourceMap.getColor("jPanel6.background")); // NOI18N
    jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel6.setMinimumSize(new java.awt.Dimension(25, 200));
    jPanel6.setName("jPanel6"); // NOI18N
    jPanel6.setPreferredSize(new java.awt.Dimension(400, 300));
    jPanel6.setLayout(new java.awt.BorderLayout(0, 4));

    jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel7.setMaximumSize(new java.awt.Dimension(200, 35));
    jPanel7.setMinimumSize(new java.awt.Dimension(200, 35));
    jPanel7.setName("jPanel7"); // NOI18N
    jPanel7.setOpaque(false);
    jPanel7.setPreferredSize(new java.awt.Dimension(200, 35));
    jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.X_AXIS));

    jLabel16.setFont(getFont());
    jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
    jLabel16.setMaximumSize(new java.awt.Dimension(50, 16));
    jLabel16.setMinimumSize(new java.awt.Dimension(50, 16));
    jLabel16.setName("jLabel16"); // NOI18N
    jLabel16.setPreferredSize(new java.awt.Dimension(50, 16));
    jPanel7.add(jLabel16);

    jFormattedTextField10.setEditable(false);
    jFormattedTextField10.setBorder(null);
    jFormattedTextField10.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    jFormattedTextField10.setFont(getFont());
    jFormattedTextField10.setName("jFormattedTextField10"); // NOI18N
    jFormattedTextField10.setOpaque(false);
    jPanel7.add(jFormattedTextField10);

    jPanel6.add(jPanel7, java.awt.BorderLayout.NORTH);

    jPanel35.setName("jPanel35"); // NOI18N
    jPanel35.setOpaque(false);
    jPanel35.setLayout(new java.awt.BorderLayout(0, 5));

    jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel24.setMaximumSize(new java.awt.Dimension(32767, 35));
    jPanel24.setMinimumSize(new java.awt.Dimension(250, 35));
    jPanel24.setName("jPanel24"); // NOI18N
    jPanel24.setOpaque(false);
    jPanel24.setPreferredSize(new java.awt.Dimension(498, 35));
    jPanel24.setLayout(new java.awt.GridLayout(1, 0));

    newDealButton2.setFont(getFont());
    newDealButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dms/windows/resources/edit_add-22.png"))); // NOI18N
    newDealButton2.setText(resourceMap.getString("newDealButton2.text")); // NOI18N
    newDealButton2.setBorder(null);
    newDealButton2.setBorderPainted(false);
    newDealButton2.setFocusPainted(false);
    newDealButton2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    newDealButton2.setMargin(new java.awt.Insets(14, 14, 14, 14));
    newDealButton2.setMaximumSize(new java.awt.Dimension(106, 40));
    newDealButton2.setMinimumSize(new java.awt.Dimension(106, 40));
    newDealButton2.setName("newDealButton2"); // NOI18N
    newDealButton2.setOpaque(false);
    newDealButton2.setPreferredSize(new java.awt.Dimension(106, 40));
    newDealButton2.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        payooutsButtonsClicked(evt);
      }
    });
    jPanel24.add(newDealButton2);

    editDealButton2.setFont(getFont());
    editDealButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dms/windows/resources/edit-22.png"))); // NOI18N
    editDealButton2.setText(resourceMap.getString("editDealButton2.text")); // NOI18N
    editDealButton2.setBorder(null);
    editDealButton2.setBorderPainted(false);
    editDealButton2.setFocusPainted(false);
    editDealButton2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    editDealButton2.setMargin(new java.awt.Insets(14, 14, 14, 14));
    editDealButton2.setMaximumSize(new java.awt.Dimension(106, 40));
    editDealButton2.setMinimumSize(new java.awt.Dimension(106, 40));
    editDealButton2.setName("editDealButton2"); // NOI18N
    editDealButton2.setOpaque(false);
    editDealButton2.setPreferredSize(new java.awt.Dimension(106, 40));
    editDealButton2.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        payooutsButtonsClicked(evt);
      }
    });
    jPanel24.add(editDealButton2);

    deleteDealButton2.setFont(getFont());
    deleteDealButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dms/windows/resources/edit_remove-22.png"))); // NOI18N
    deleteDealButton2.setText(resourceMap.getString("deleteDealButton2.text")); // NOI18N
    deleteDealButton2.setBorder(null);
    deleteDealButton2.setBorderPainted(false);
    deleteDealButton2.setFocusPainted(false);
    deleteDealButton2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    deleteDealButton2.setMargin(new java.awt.Insets(14, 14, 14, 14));
    deleteDealButton2.setMaximumSize(new java.awt.Dimension(120, 40));
    deleteDealButton2.setMinimumSize(new java.awt.Dimension(120, 40));
    deleteDealButton2.setName("deleteDealButton2"); // NOI18N
    deleteDealButton2.setOpaque(false);
    deleteDealButton2.setPreferredSize(new java.awt.Dimension(120, 40));
    deleteDealButton2.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        payooutsButtonsClicked(evt);
      }
    });
    jPanel24.add(deleteDealButton2);

    jPanel35.add(jPanel24, java.awt.BorderLayout.NORTH);

    payViewsPanel1.setName("payViewsPanel1"); // NOI18N
    payViewsPanel1.setOpaque(false);
    payViewsPanel1.setLayout(new java.awt.CardLayout());

    dealViewsPanel1.setName("dealViewsPanel1"); // NOI18N
    dealViewsPanel1.setLayout(new java.awt.GridLayout(1, 0));

    jScrollPane14.setName("jScrollPane14"); // NOI18N

    shiftCollectTable1.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Customer", "Description", "Amount"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    shiftCollectTable1.setAutoSelectTextWhenStartsEditing(false);
    shiftCollectTable1.setFillsViewportHeight(true);
    shiftCollectTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    shiftCollectTable1.setKeepRowHeights(false);
    shiftCollectTable1.setName("shiftCollectTable1"); // NOI18N
    shiftCollectTable1.setRowAutoResizes(true);
    shiftCollectTable1.getTableHeader().setReorderingAllowed(false);
    jScrollPane14.setViewportView(shiftCollectTable1);

    dealViewsPanel1.add(jScrollPane14);

    payViewsPanel1.add(dealViewsPanel1, "card5");

    jPanel35.add(payViewsPanel1, java.awt.BorderLayout.CENTER);

    jPanel6.add(jPanel35, java.awt.BorderLayout.CENTER);

    jPanel37.setMaximumSize(new java.awt.Dimension(32767, 30));
    jPanel37.setMinimumSize(new java.awt.Dimension(720, 30));
    jPanel37.setName("jPanel37"); // NOI18N
    jPanel37.setOpaque(false);
    jPanel37.setPreferredSize(new java.awt.Dimension(720, 30));
    jPanel37.setLayout(new java.awt.GridLayout(1, 3));

    printShiftPay.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    printShiftPay.setText(resourceMap.getString("printShiftPay.text")); // NOI18N
    printShiftPay.setBorderPainted(false);
    printShiftPay.setDoubleBuffered(true);
    printShiftPay.setFocusPainted(false);
    printShiftPay.setFocusTraversalPolicyProvider(true);
    printShiftPay.setFocusable(false);
    printShiftPay.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    printShiftPay.setMargin(new java.awt.Insets(14, 14, 14, 14));
    printShiftPay.setName("printShiftPay"); // NOI18N
    printShiftPay.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        printShiftClicked(evt);
      }
    });
    jPanel37.add(printShiftPay);

    filler1.setName("filler1"); // NOI18N
    jPanel37.add(filler1);

    filler2.setName("filler2"); // NOI18N
    jPanel37.add(filler2);

    jPanel6.add(jPanel37, java.awt.BorderLayout.SOUTH);

    jSplitPane5.setLeftComponent(jPanel6);

    jPanel15.setBackground(resourceMap.getColor("jPanel15.background")); // NOI18N
    jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, null, resourceMap.getColor("jPanel15.border.titleColor"))); // NOI18N
    jPanel15.setFont(resourceMap.getFont("jPanel15.font")); // NOI18N
    jPanel15.setName("jPanel15"); // NOI18N
    jPanel15.setLayout(new java.awt.BorderLayout(5, 0));
    jSplitPane5.setRightComponent(jPanel15);

    jPanel5.add(jSplitPane5);

    jideTabbedPane1.addTab(resourceMap.getString("jPanel5.TabConstraints.tabTitle"), jPanel5); // NOI18N

    jPanel9.setBackground(resourceMap.getColor("jPanel9.background")); // NOI18N
    jPanel9.setFont(resourceMap.getFont("jPanel9.font")); // NOI18N
    jPanel9.setName("jPanel9"); // NOI18N
    jPanel9.setLayout(new java.awt.BorderLayout());

    jPanel10.setBackground(resourceMap.getColor("jPanel10.background")); // NOI18N
    jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel10.setMinimumSize(new java.awt.Dimension(25, 200));
    jPanel10.setName("jPanel10"); // NOI18N
    jPanel10.setPreferredSize(new java.awt.Dimension(400, 300));
    jPanel10.setLayout(new java.awt.BorderLayout(0, 4));

    jPanel42.setName("jPanel42"); // NOI18N
    jPanel42.setOpaque(false);
    jPanel42.setLayout(new java.awt.BorderLayout(5, 5));

    jScrollPane3.setName("jScrollPane3"); // NOI18N

    jTable3.setAutoCreateRowSorter(true);
    jTable3.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "UserName", "Cashier Name", "Cash", "Check", "Charge", "Total Open Balance"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    jTable3.setFillsViewportHeight(true);
    jTable3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    jTable3.setName("jTable3"); // NOI18N
    jTable3.setShowHorizontalLines(false);
    jTable3.getTableHeader().setReorderingAllowed(false);
    jTable3.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        accountingTableClicked(evt);
      }
    });
    jTable3.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyReleased(java.awt.event.KeyEvent evt)
      {
        accountingTableKeyed(evt);
      }
    });
    jScrollPane3.setViewportView(jTable3);
    if (jTable3.getColumnModel().getColumnCount() > 0)
    {
      jTable3.getColumnModel().getColumn(0).setMinWidth(0);
      jTable3.getColumnModel().getColumn(0).setPreferredWidth(0);
      jTable3.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    jPanel42.add(jScrollPane3, java.awt.BorderLayout.CENTER);

    jPanel10.add(jPanel42, java.awt.BorderLayout.CENTER);

    jPanel44.setMaximumSize(new java.awt.Dimension(32767, 30));
    jPanel44.setMinimumSize(new java.awt.Dimension(720, 30));
    jPanel44.setName("jPanel44"); // NOI18N
    jPanel44.setOpaque(false);
    jPanel44.setPreferredSize(new java.awt.Dimension(720, 30));
    jPanel44.setLayout(new java.awt.GridLayout(1, 3));

    takeInAccounting.setFont(getFont());
    takeInAccounting.setText(resourceMap.getString("takeInAccounting.text")); // NOI18N
    takeInAccounting.setBorder(null);
    takeInAccounting.setBorderPainted(false);
    takeInAccounting.setFocusPainted(false);
    takeInAccounting.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    takeInAccounting.setMargin(new java.awt.Insets(14, 14, 14, 14));
    takeInAccounting.setMaximumSize(new java.awt.Dimension(106, 40));
    takeInAccounting.setMinimumSize(new java.awt.Dimension(106, 40));
    takeInAccounting.setName("takeInAccounting"); // NOI18N
    takeInAccounting.setOpaque(false);
    takeInAccounting.setPreferredSize(new java.awt.Dimension(106, 40));
    takeInAccounting.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        accountingButtonsClicked(evt);
      }
    });
    jPanel44.add(takeInAccounting);

    giveOutAccounting.setFont(getFont());
    giveOutAccounting.setText(resourceMap.getString("giveOutAccounting.text")); // NOI18N
    giveOutAccounting.setBorder(null);
    giveOutAccounting.setBorderPainted(false);
    giveOutAccounting.setFocusPainted(false);
    giveOutAccounting.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    giveOutAccounting.setMargin(new java.awt.Insets(14, 14, 14, 14));
    giveOutAccounting.setMaximumSize(new java.awt.Dimension(106, 40));
    giveOutAccounting.setMinimumSize(new java.awt.Dimension(106, 40));
    giveOutAccounting.setName("giveOutAccounting"); // NOI18N
    giveOutAccounting.setOpaque(false);
    giveOutAccounting.setPreferredSize(new java.awt.Dimension(106, 40));
    giveOutAccounting.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        accountingButtonsClicked(evt);
      }
    });
    jPanel44.add(giveOutAccounting);

    refreshAccounting.setFont(getFont());
    refreshAccounting.setText(resourceMap.getString("refreshAccounting.text")); // NOI18N
    refreshAccounting.setName("refreshAccounting"); // NOI18N
    refreshAccounting.setOpaque(false);
    refreshAccounting.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        accountingButtonsClicked(evt);
      }
    });
    jPanel44.add(refreshAccounting);

    deleteDealButton3.setText(resourceMap.getString("deleteDealButton3.text")); // NOI18N
    deleteDealButton3.setBorder(null);
    deleteDealButton3.setContentAreaFilled(false);
    deleteDealButton3.setDoubleBuffered(true);
    deleteDealButton3.setEnabled(false);
    deleteDealButton3.setFocusTraversalPolicyProvider(true);
    deleteDealButton3.setFocusable(false);
    deleteDealButton3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    deleteDealButton3.setMargin(new java.awt.Insets(14, 14, 14, 14));
    deleteDealButton3.setMaximumSize(new java.awt.Dimension(120, 40));
    deleteDealButton3.setMinimumSize(new java.awt.Dimension(120, 40));
    deleteDealButton3.setName("deleteDealButton3"); // NOI18N
    deleteDealButton3.setPreferredSize(new java.awt.Dimension(120, 40));
    jPanel44.add(deleteDealButton3);

    cashierButton3.setFont(resourceMap.getFont("cashierButton3.font")); // NOI18N
    cashierButton3.setText(resourceMap.getString("cashierButton3.text")); // NOI18N
    cashierButton3.setAlignmentY(0.0F);
    cashierButton3.setBorderPainted(false);
    cashierButton3.setContentAreaFilled(false);
    cashierButton3.setDoubleBuffered(true);
    cashierButton3.setEnabled(false);
    cashierButton3.setFocusPainted(false);
    cashierButton3.setFocusTraversalPolicyProvider(true);
    cashierButton3.setFocusable(false);
    cashierButton3.setName("cashierButton3"); // NOI18N
    jPanel44.add(cashierButton3);

    printListButton3.setFont(getFont());
    printListButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dms/windows/resources/Print_22.png"))); // NOI18N
    printListButton3.setText(resourceMap.getString("printListButton3.text")); // NOI18N
    printListButton3.setBorderPainted(false);
    printListButton3.setFocusPainted(false);
    printListButton3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    printListButton3.setMargin(new java.awt.Insets(14, 14, 14, 14));
    printListButton3.setName("printListButton3"); // NOI18N
    printListButton3.setOpaque(false);
    printListButton3.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        accountPrintClicked(evt);
      }
    });
    jPanel44.add(printListButton3);

    jPanel10.add(jPanel44, java.awt.BorderLayout.NORTH);

    jPanel9.add(jPanel10, java.awt.BorderLayout.NORTH);

    jPanel20.setName("jPanel20"); // NOI18N
    jPanel20.setOpaque(false);
    jPanel20.setPreferredSize(new java.awt.Dimension(400, 100));
    jPanel20.setLayout(new java.awt.GridLayout(1, 0));

    jPanel55.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel55.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, resourceMap.getColor("jPanel55.border.titleColor"))); // NOI18N
    jPanel55.setName("jPanel55"); // NOI18N
    jPanel55.setOpaque(false);
    jPanel55.setLayout(new java.awt.BorderLayout());

    jScrollPane12.setName("jScrollPane12"); // NOI18N

    uICTable4.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "TransactionNumber", "Date", "Customer", "Description", "Amount"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    uICTable4.setAutoSelectTextWhenStartsEditing(false);
    uICTable4.setFillsViewportHeight(true);
    uICTable4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    uICTable4.setKeepRowHeights(false);
    uICTable4.setName("uICTable4"); // NOI18N
    uICTable4.setRowAutoResizes(true);
    uICTable4.getTableHeader().setReorderingAllowed(false);
    jScrollPane12.setViewportView(uICTable4);
    if (uICTable4.getColumnModel().getColumnCount() > 0)
    {
      uICTable4.getColumnModel().getColumn(0).setMinWidth(0);
      uICTable4.getColumnModel().getColumn(0).setPreferredWidth(0);
      uICTable4.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    jPanel55.add(jScrollPane12, java.awt.BorderLayout.CENTER);

    jPanel68.setName("jPanel68"); // NOI18N
    jPanel68.setOpaque(false);
    jPanel68.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

    jButton16.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jButton16.setText(resourceMap.getString("jButton16.text")); // NOI18N
    jButton16.setName("jButton16"); // NOI18N
    jButton16.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        accountingPrintReceipts(evt);
      }
    });
    jPanel68.add(jButton16);

    jLabel11.setFont(getFont());
    jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
    jLabel11.setName("jLabel11"); // NOI18N
    jPanel68.add(jLabel11);

    jFormattedTextField5.setEditable(false);
    jFormattedTextField5.setBorder(null);
    jFormattedTextField5.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    jFormattedTextField5.setFont(getFont());
    jFormattedTextField5.setName("jFormattedTextField5"); // NOI18N
    jFormattedTextField5.setOpaque(false);
    jPanel68.add(jFormattedTextField5);

    cashierBatchOut.setFont(resourceMap.getFont("cashierBatchOut.font")); // NOI18N
    cashierBatchOut.setText(resourceMap.getString("cashierBatchOut.text")); // NOI18N
    cashierBatchOut.setName("cashierBatchOut"); // NOI18N
    cashierBatchOut.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        cashierBatchOutaccountingPrintReceipts(evt);
      }
    });
    jPanel68.add(cashierBatchOut);

    jPanel55.add(jPanel68, java.awt.BorderLayout.SOUTH);

    jPanel20.add(jPanel55);

    jPanel56.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel56.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, resourceMap.getColor("jPanel56.border.titleColor"))); // NOI18N
    jPanel56.setName("jPanel56"); // NOI18N
    jPanel56.setOpaque(false);
    jPanel56.setLayout(new java.awt.BorderLayout());

    jScrollPane13.setName("jScrollPane13"); // NOI18N

    uICTable5.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "TransactionNumber", "Date", "Customer", "Description", "Amount"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    uICTable5.setAutoSelectTextWhenStartsEditing(false);
    uICTable5.setFillsViewportHeight(true);
    uICTable5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    uICTable5.setKeepRowHeights(false);
    uICTable5.setName("uICTable5"); // NOI18N
    uICTable5.setRowAutoResizes(true);
    uICTable5.getTableHeader().setReorderingAllowed(false);
    jScrollPane13.setViewportView(uICTable5);
    if (uICTable5.getColumnModel().getColumnCount() > 0)
    {
      uICTable5.getColumnModel().getColumn(0).setMinWidth(0);
      uICTable5.getColumnModel().getColumn(0).setPreferredWidth(0);
      uICTable5.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    jPanel56.add(jScrollPane13, java.awt.BorderLayout.CENTER);

    jPanel69.setName("jPanel69"); // NOI18N
    jPanel69.setOpaque(false);
    jPanel69.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

    jButton17.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jButton17.setText(resourceMap.getString("jButton17.text")); // NOI18N
    jButton17.setName("jButton17"); // NOI18N
    jButton17.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        accountingPrintReceipts(evt);
      }
    });
    jPanel69.add(jButton17);

    jLabel22.setFont(getFont());
    jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel22.setText(resourceMap.getString("jLabel22.text")); // NOI18N
    jLabel22.setName("jLabel22"); // NOI18N
    jPanel69.add(jLabel22);

    jFormattedTextField6.setEditable(false);
    jFormattedTextField6.setBorder(null);
    jFormattedTextField6.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤#,##0.00"))));
    jFormattedTextField6.setFont(getFont());
    jFormattedTextField6.setName("jFormattedTextField6"); // NOI18N
    jFormattedTextField6.setOpaque(false);
    jPanel69.add(jFormattedTextField6);

    jPanel56.add(jPanel69, java.awt.BorderLayout.SOUTH);

    jPanel20.add(jPanel56);

    jPanel9.add(jPanel20, java.awt.BorderLayout.CENTER);

    jideTabbedPane1.addTab("Cashier's Open Balances", jPanel9);

    jPanel36.setBackground(resourceMap.getColor("jPanel36.background")); // NOI18N
    jPanel36.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel36.setName("jPanel36"); // NOI18N
    jPanel36.addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        searchTabShown(evt);
      }
    });
    jPanel36.setLayout(new javax.swing.BoxLayout(jPanel36, javax.swing.BoxLayout.X_AXIS));

    jPanel40.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel40.setMaximumSize(new java.awt.Dimension(200, 65534));
    jPanel40.setMinimumSize(new java.awt.Dimension(200, 0));
    jPanel40.setName("jPanel40"); // NOI18N
    jPanel40.setOpaque(false);
    jPanel40.setPreferredSize(new java.awt.Dimension(200, 519));
    jPanel40.setLayout(new javax.swing.BoxLayout(jPanel40, javax.swing.BoxLayout.Y_AXIS));

    jPanel48.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel48.setMaximumSize(new java.awt.Dimension(2147483647, 35));
    jPanel48.setMinimumSize(new java.awt.Dimension(86, 35));
    jPanel48.setName("jPanel48"); // NOI18N
    jPanel48.setOpaque(false);
    jPanel48.setPreferredSize(new java.awt.Dimension(196, 35));
    jPanel48.setLayout(new javax.swing.BoxLayout(jPanel48, javax.swing.BoxLayout.X_AXIS));

    jLabel55.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    jLabel55.setText(resourceMap.getString("jLabel55.text")); // NOI18N
    jLabel55.setName("jLabel55"); // NOI18N
    jPanel48.add(jLabel55);

    jTextField11.setText(resourceMap.getString("jTextField11.text")); // NOI18N
    jTextField11.setMaximumSize(new java.awt.Dimension(2147483647, 25));
    jTextField11.setName("jTextField11"); // NOI18N
    jTextField11.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyReleased(java.awt.event.KeyEvent evt)
      {
        searchTabEnterkeyPressed(evt);
      }
    });
    jPanel48.add(jTextField11);

    jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
    jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
    jButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
    jButton1.setMaximumSize(new java.awt.Dimension(22, 22));
    jButton1.setMinimumSize(new java.awt.Dimension(22, 22));
    jButton1.setName("jButton1"); // NOI18N
    jButton1.setOpaque(false);
    jButton1.setPreferredSize(new java.awt.Dimension(22, 22));
    jButton1.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        searchTabButtonClicked(evt);
      }
    });
    jPanel48.add(jButton1);

    jPanel40.add(jPanel48);

    jPanel50.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel50.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(0, 0, 153))); // NOI18N
    jPanel50.setMaximumSize(new java.awt.Dimension(32779, 180));
    jPanel50.setMinimumSize(new java.awt.Dimension(166, 120));
    jPanel50.setName("jPanel50"); // NOI18N
    jPanel50.setOpaque(false);
    jPanel50.setPreferredSize(new java.awt.Dimension(196, 180));
    jPanel50.setLayout(new javax.swing.BoxLayout(jPanel50, javax.swing.BoxLayout.Y_AXIS));

    jPanel51.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel51.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10), new java.awt.Color(0, 0, 102))); // NOI18N
    jPanel51.setName("jPanel51"); // NOI18N
    jPanel51.setOpaque(false);
    jPanel51.setLayout(new java.awt.GridLayout(1, 0));

    buttonGroup2.add(jCheckBox1);
    jCheckBox1.setSelected(true);
    jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
    jCheckBox1.setName("jCheckBox1"); // NOI18N
    jCheckBox1.setOpaque(false);
    jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        searchCriteriasClicked(evt);
      }
    });
    jPanel51.add(jCheckBox1);

    buttonGroup2.add(jCheckBox2);
    jCheckBox2.setText(resourceMap.getString("jCheckBox2.text")); // NOI18N
    jCheckBox2.setName("jCheckBox2"); // NOI18N
    jCheckBox2.setOpaque(false);
    jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        searchCriteriasClicked(evt);
      }
    });
    jPanel51.add(jCheckBox2);

    jPanel50.add(jPanel51);

    jPanel52.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel52.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10), new java.awt.Color(0, 0, 102))); // NOI18N
    jPanel52.setName("jPanel52"); // NOI18N
    jPanel52.setOpaque(false);
    jPanel52.setLayout(new java.awt.GridLayout(0, 1));

    buttonGroup3.add(jCheckBox3);
    jCheckBox3.setSelected(true);
    jCheckBox3.setText(resourceMap.getString("jCheckBox3.text")); // NOI18N
    jCheckBox3.setName("jCheckBox3"); // NOI18N
    jCheckBox3.setOpaque(false);
    jCheckBox3.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        searchCriteriasClicked(evt);
      }
    });
    jPanel52.add(jCheckBox3);

    buttonGroup3.add(jCheckBox4);
    jCheckBox4.setText(resourceMap.getString("jCheckBox4.text")); // NOI18N
    jCheckBox4.setName("jCheckBox4"); // NOI18N
    jCheckBox4.setOpaque(false);
    jCheckBox4.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        searchCriteriasClicked(evt);
      }
    });
    jPanel52.add(jCheckBox4);

    buttonGroup3.add(jCheckBox5);
    jCheckBox5.setText(resourceMap.getString("jCheckBox5.text")); // NOI18N
    jCheckBox5.setName("jCheckBox5"); // NOI18N
    jCheckBox5.setOpaque(false);
    jCheckBox5.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        searchCriteriasClicked(evt);
      }
    });
    jPanel52.add(jCheckBox5);

    jPanel50.add(jPanel52);

    jPanel40.add(jPanel50);

    jPanel54.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel54.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(0, 0, 102))); // NOI18N
    jPanel54.setMaximumSize(new java.awt.Dimension(32767, 100));
    jPanel54.setMinimumSize(new java.awt.Dimension(85, 80));
    jPanel54.setName("jPanel54"); // NOI18N
    jPanel54.setOpaque(false);
    jPanel54.setPreferredSize(new java.awt.Dimension(196, 100));
    jPanel54.setLayout(new java.awt.GridLayout(0, 1));

    jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
    jButton5.setName("jButton5"); // NOI18N
    jButton5.setOpaque(false);
    jButton5.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        actionButtonsClicked(evt);
      }
    });
    jPanel54.add(jButton5);

    jButton6.setText(resourceMap.getString("jButton6.text")); // NOI18N
    jButton6.setName("jButton6"); // NOI18N
    jButton6.setOpaque(false);
    jButton6.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        actionButtonsClicked(evt);
      }
    });
    jPanel54.add(jButton6);

    jButton7.setText(resourceMap.getString("jButton7.text")); // NOI18N
    jButton7.setName("jButton7"); // NOI18N
    jButton7.setOpaque(false);
    jButton7.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        actionButtonsClicked(evt);
      }
    });
    jPanel54.add(jButton7);

    jPanel40.add(jPanel54);

    jPanel36.add(jPanel40);

    jPanel41.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    jPanel41.setName("jPanel41"); // NOI18N
    jPanel41.setOpaque(false);
    jPanel41.setLayout(new java.awt.GridLayout(1, 0));

    jScrollPane2.setName("jScrollPane2"); // NOI18N

    jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jTable1.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Transaction #", "Account #", "Description", "Cash", "Check", "Charge", "Date", "User Name"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    jTable1.setFillsViewportHeight(true);
    jTable1.setName("jTable1"); // NOI18N
    jTable1.getTableHeader().setReorderingAllowed(false);
    jTable1.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        searchTabTableClicked(evt);
      }
    });
    jScrollPane2.setViewportView(jTable1);
    if (jTable1.getColumnModel().getColumnCount() > 0)
    {
      jTable1.getColumnModel().getColumn(0).setMinWidth(0);
      jTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
      jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    jPanel41.add(jScrollPane2);

    jPanel36.add(jPanel41);

    jideTabbedPane1.addTab(resourceMap.getString("jPanel36.TabConstraints.tabTitle"), jPanel36); // NOI18N

    jPanel38.setBackground(resourceMap.getColor("jPanel38.background")); // NOI18N
    jPanel38.setName("jPanel38"); // NOI18N
    jPanel38.setLayout(new java.awt.BorderLayout(5, 0));

    quickBooksButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    quickBooksButtonPanel.setName("quickBooksButtonPanel"); // NOI18N
    quickBooksButtonPanel.setOpaque(false);
    quickBooksButtonPanel.setLayout(new java.awt.GridLayout(15, 1, 0, 2));

    quickBooksRefreshButton.setText(resourceMap.getString("quickBooksRefreshButton.text")); // NOI18N
    quickBooksRefreshButton.setMultiClickThreshhold(1L);
    quickBooksRefreshButton.setName("quickBooksRefreshButton"); // NOI18N
    quickBooksRefreshButton.setOpaque(false);
    quickBooksRefreshButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        qbButtonsClicked(evt);
      }
    });
    quickBooksButtonPanel.add(quickBooksRefreshButton);

    quickBooksUpdateButton.setText(resourceMap.getString("quickBooksUpdateButton.text")); // NOI18N
    quickBooksUpdateButton.setMultiClickThreshhold(1L);
    quickBooksUpdateButton.setName("quickBooksUpdateButton"); // NOI18N
    quickBooksUpdateButton.setOpaque(false);
    quickBooksUpdateButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        qbButtonsClicked(evt);
      }
    });
    quickBooksButtonPanel.add(quickBooksUpdateButton);

    jPanel38.add(quickBooksButtonPanel, java.awt.BorderLayout.LINE_START);

    quickBooksPanel.setName("quickBooksPanel"); // NOI18N
    quickBooksPanel.setOpaque(false);
    quickBooksPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 20));

    quickBooksBatchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Batch Items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 102))); // NOI18N
    quickBooksBatchPanel.setName("quickBooksBatchPanel"); // NOI18N
    quickBooksBatchPanel.setOpaque(false);
    quickBooksBatchPanel.setLayout(new java.awt.GridLayout(1, 0));

    jScrollPane15.setName("jScrollPane15"); // NOI18N

    quickBooksBatchTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Account Number", "QB Account", "Type", "QB Account Name", "Debit", "Credit", "Lot Name", "TxnDate", "Vendor Name"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    quickBooksBatchTable.setFillsViewportHeight(true);
    quickBooksBatchTable.setName("quickBooksBatchTable"); // NOI18N
    quickBooksBatchTable.getTableHeader().setReorderingAllowed(false);
    jScrollPane15.setViewportView(quickBooksBatchTable);
    if (quickBooksBatchTable.getColumnModel().getColumnCount() > 0)
    {
      quickBooksBatchTable.getColumnModel().getColumn(0).setPreferredWidth(75);
      quickBooksBatchTable.getColumnModel().getColumn(0).setMaxWidth(75);
      quickBooksBatchTable.getColumnModel().getColumn(1).setPreferredWidth(80);
      quickBooksBatchTable.getColumnModel().getColumn(1).setMaxWidth(80);
      quickBooksBatchTable.getColumnModel().getColumn(3).setPreferredWidth(110);
      quickBooksBatchTable.getColumnModel().getColumn(3).setMaxWidth(110);
    }

    quickBooksBatchPanel.add(jScrollPane15);

    quickBooksPanel.add(quickBooksBatchPanel);

    jPanel38.add(quickBooksPanel, java.awt.BorderLayout.CENTER);

    jideTabbedPane1.addTab("Quickbooks", jPanel38);

    jideTabbedPane2.addTab(resourceMap.getString("jideTabbedPane1.TabConstraints.tabTitle"), jideTabbedPane1); // NOI18N

    apBillsPanel.setBackground(resourceMap.getColor("apBillsPanel.background")); // NOI18N
    apBillsPanel.setName("apBillsPanel"); // NOI18N
    apBillsPanel.addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        apBillsPanelvendorsPanelShown(evt);
      }
    });
    apBillsPanel.setLayout(new java.awt.BorderLayout());
    jideTabbedPane2.addTab(resourceMap.getString("apBillsPanel.TabConstraints.tabTitle"), apBillsPanel); // NOI18N

    jPanel65.setBackground(resourceMap.getColor("jPanel65.background")); // NOI18N
    jPanel65.setName("jPanel65"); // NOI18N
    jPanel65.addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        COAVisible(evt);
      }
    });
    jPanel65.setLayout(new java.awt.BorderLayout());
    jideTabbedPane2.addTab("Chart of Accounts", jPanel65);

    jPanel63.setName("jPanel63"); // NOI18N
    jPanel63.setOpaque(false);
    jPanel63.setLayout(new java.awt.GridLayout(1, 0));
    jideTabbedPane2.addTab(resourceMap.getString("jPanel63.TabConstraints.tabTitle"), jPanel63); // NOI18N

    jPanel91.setName("jPanel91"); // NOI18N
    jPanel91.setOpaque(false);
    jPanel91.setLayout(new java.awt.GridLayout(1, 0));
    jideTabbedPane2.addTab(resourceMap.getString("jPanel91.TabConstraints.tabTitle"), jPanel91); // NOI18N

    jPanel11.setName("jPanel11"); // NOI18N
    jPanel11.setOpaque(false);
    jPanel11.setLayout(new java.awt.GridLayout(1, 0));
    jideTabbedPane2.addTab(resourceMap.getString("jPanel11.TabConstraints.tabTitle"), jPanel11); // NOI18N

    add(jideTabbedPane2);
    jideTabbedPane2.getAccessibleContext().setAccessibleName(resourceMap.getString("jideTabbedPane2.AccessibleContext.accessibleName")); // NOI18N

    getAccessibleContext().setAccessibleName(resourceMap.getString("CashierWindow.AccessibleContext.accessibleName")); // NOI18N
  }// </editor-fold>//GEN-END:initComponents

private void cashierWindowShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_cashierWindowShown

    jideTabbedPane1.setEnabledAt(0, dms.DMSApp.getApplication().getPermissions().accountingCollect);
    jideTabbedPane1.setEnabledAt(1, dms.DMSApp.getApplication().getPermissions().accountingPayouts);
    jideTabbedPane1.setEnabledAt(2, dms.DMSApp.getApplication().getPermissions().accountingTab);
    jideTabbedPane1.setEnabledAt(3, dms.DMSApp.getApplication().getPermissions().accountingTab);
    newDealButton.setVisible(dms.DMSApp.getApplication().getPermissions().accountingTakePayment);
    newDealButton2.setVisible(dms.DMSApp.getApplication().getPermissions().accountingNewPayout);
    editDealButton.setVisible(false);
    editDealButton2.setVisible(false);
    deleteDealButton.setVisible(false);
    deleteDealButton2.setVisible(false);
}//GEN-LAST:event_cashierWindowShown

private void collectionsRadioButtonsClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectionsRadioButtonsClicked

    for (int i = 0; i < collectViewsPanel.getComponentCount(); i++)
    {
      collectViewsPanel.getComponent(i).setVisible(false);
      collectionInfoPanel.getComponent(i).setVisible(false);
    }

    if ((JRadioButton) evt.getSource() == collectDealsButton)
    {
      collectViewsPanel.getComponent(0).setVisible(true);
      collectionInfoPanel.getComponent(0).setVisible(true);
    }
    else if ((JRadioButton) evt.getSource() == collectServiceButton)
    {
      collectViewsPanel.getComponent(1).setVisible(true);
      collectionInfoPanel.getComponent(1).setVisible(true);
    }
    else if ((JRadioButton) evt.getSource() == collectOtherButton)
    {
      collectViewsPanel.getComponent(2).setVisible(true);
      collectionInfoPanel.getComponent(2).setVisible(true);
    }

    clearList("Collect");
    makeList("Collect", false);
}//GEN-LAST:event_collectionsRadioButtonsClicked

private void collectionsButtonsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_collectionsButtonsClicked

    try
    {
      collectReasonDD.removeAllItems();
      if ((JButton) evt.getSource() == newDealButton && isReady)
      {
        collectCashField.setValue(0.00);
        collectCheckField.setValue(0.00);
        collectChargeField.setValue(0.00);
        jTextField10.setText("");

        if (collectDealsButton.isSelected())
        {
          collectReasonDD.addItem("Down Payment");
          collectReasonDD.addItem("Tag");
          collectReasonDD.setVisible(true);
          collectReasonLabel.setVisible(true);
          collectReasonPanel.setVisible(false);
          jTextField10.setVisible(false);
          collectReasonLabel1.setVisible(false);
          collectModal = 1;
          currentAccount = "" + dealsCollectTable.getValueAt(dealsCollectTable.getSelectedRow(), dealsCollectTable.getColumnModel().getColumnIndex("Account #"));
        }
        else if (collectServiceButton.isSelected())
        {
          collectReasonDD.addItem("Invoice Payment");
          collectReasonDD.addItem("Invoice Deposit");
          collectReasonDD.addItem("Warranty Receivable");
          collectReasonDD.setVisible(true);
          collectReasonLabel.setVisible(true);
          collectReasonPanel.setVisible(false);
          jTextField10.setVisible(false);
          collectReasonLabel1.setVisible(false);
          collectModal = 2;
          currentAccount = "" + serviceCollectTable.getValueAt(serviceCollectTable.getSelectedRow(), serviceCollectTable.getColumnModel().getColumnIndex("Invoice #"));
        }
        else if (collectOtherButton.isSelected())
        {
          collectReasonDD.setVisible(false);
          collectReasonLabel.setVisible(false);
          collectReasonPanel.setVisible(true);
          jTextField10.setVisible(true);
          collectReasonLabel1.setVisible(true);
          collectModal = 3;
        }

      }
      else if ((JButton) evt.getSource() == jButton5 && isReady)
      {
        collectCashField.setValue(((Number) jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Cash"))).doubleValue());
        collectCheckField.setValue(((Number) jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Check"))).doubleValue());
        collectChargeField.setValue(((Number) jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Charge"))).doubleValue());
        if (jCheckBox3.isSelected())
        {
          collectReasonDD.addItem("Down Payment");
          collectReasonDD.addItem("Tag");
          collectReasonDD.setVisible(true);
          collectReasonDD.setSelectedItem(jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Description")));
          collectReasonLabel.setVisible(true);
          collectReasonPanel.setVisible(false);
          jTextField10.setVisible(false);
          collectReasonLabel1.setVisible(false);
          collectModal = 4;
        }
        else if (jCheckBox4.isSelected())
        {
          collectReasonDD.addItem("Invoice Payment");
          collectReasonDD.addItem("Invoice Deposit");
          collectReasonDD.addItem("Warranty Receivable");
          collectReasonDD.setVisible(true);
          collectReasonDD.setSelectedItem(jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Description")));
          collectReasonLabel.setVisible(true);
          collectReasonPanel.setVisible(false);
          jTextField10.setVisible(false);
          collectReasonLabel1.setVisible(false);
          collectModal = 5;
        }
        else if (jCheckBox5.isSelected())
        {
          collectReasonDD.setVisible(false);
          collectReasonLabel.setVisible(false);
          collectReasonPanel.setVisible(true);
          jTextField10.setVisible(true);
          collectReasonField.setText((String) jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Description")));
          collectReasonLabel1.setVisible(true);
          collectModal = 6;
        }
      }

      collectionsPopup.setSize(cpopupSize);
      collectionsPopup.setMaximumSize(cpopupSize);
      collectionsPopup.setMinimumSize(cpopupSize);
      collectionsPopup.setLocationRelativeTo(this);
      dms.DMSApp.getApplication().show(collectionsPopup);
    }
    catch (Exception e)
    {
      dms.DMSApp.displayMessage(this, "You must select an account to apply a payment", JOptionPane.WARNING_MESSAGE);
    }
}//GEN-LAST:event_collectionsButtonsClicked

private void payooutsButtonsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_payooutsButtonsClicked

    if ((JButton) evt.getSource() == newDealButton2 && isReady)
    {
      payCashField.setValue(0.00);
      jTextField16.setText("");
      jTextField17.setText("");
      payModal = 3;
      payoutPopup.setSize(cpopupSize);
      payoutPopup.setMaximumSize(cpopupSize);
      payoutPopup.setMinimumSize(cpopupSize);
      payoutPopup.setLocationRelativeTo(this);
      dms.DMSApp.getApplication().show(payoutPopup);
    }
}//GEN-LAST:event_payooutsButtonsClicked

private void collectTablesClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_collectTablesClicked

    try
    {
      String account = "";
      if (collectDealsButton.isSelected())
      {
        account = "" + dealsCollectTable.getValueAt(dealsCollectTable.getSelectedRow(), dealsCollectTable.getColumnModel().getColumnIndex("Account #"));
        if (dealsCollectTable.getSelectedRowCount() == 1)
        {
          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select A.AccountNumber,B.FirstName,B.LastName,"
            + "A.DownPayment AS DownpaymentDue,A.TagCost AS TagDue,A.Tags,"
            + "(Select sum(cash+[check]+charge) from cashiertable where "
            + "lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' AND AccountNumber = A.AccountNumber "
            + "AND TransactionType = 'Deals' AND Reason in ('Down Payment','Down Payment Refund')) AS DownPaymentCollected,"
            + "(Select sum(cash+[check]+charge) from cashiertable where "
            + "lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' AND AccountNumber = A.AccountNumber "
            + "AND TransactionType = 'Deals' AND Reason in ('Tag','Tag Refund')) AS TagCollected,"
            + "A.DealType,A.FinanceCompany,A.Term,A.PaymentAmount,A.FirstPaymentDue,A.FinalPaymentDue "
            + "From DealsTable A "
            + "LEFT JOIN CustomerTable B ON B.CustomerCode = A.BuyerCode "
            + "Where AccountNumber = '" + account + "'");

          if (rs.next())
          {
            jFormattedTextField1.setValue(rs.getDouble("DownPaymentDue") - rs.getDouble("DownPaymentCollected"));
            jFormattedTextField3.setValue((rs.getDouble("TagDue") - rs.getDouble("TagCollected")) - rs.getDouble("Tags"));
            jTextField13.setText(rs.getString("DealType"));
            jTextField14.setText(rs.getString("FinanceCompany"));
            jTextField15.setText(rs.getString("Term"));
            jFormattedTextField18.setValue(rs.getDouble("PaymentAmount"));
            jFormattedTextField19.setValue(rs.getDate("FirstPaymentDue"));
            rs.getStatement().close();
          }

          rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select TransactionNumber,UserName,convert(varchar,DateNTime,101),Reason,CONVERT(decimal(16,2),(cash+[check]+charge)) "
            + "from cashiertable where "
            + "lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' AND Direction = 'IN' "
            + "AND AccountNumber = '" + account + "' AND TransactionType = 'Deals' ");

          DefaultTableModel aModel = (DefaultTableModel) uICTable1.getModel();
          if (aModel.getRowCount() > 0)
          {
            for (int i = aModel.getRowCount(); i > 0; i--)
            {
              aModel.removeRow(i - 1);
            }
          }
          while (rs.next())
          {
            Object[] values = new Object[rs.getMetaData().getColumnCount()];
            for (int i = 0; i < rs.getMetaData().getColumnCount(); i++)
            {
              values[i] = rs.getObject(i + 1);
            }

            aModel.addRow(values);
          }
          rs.getStatement().close();
        }
        else
        {
        }
      }
      else if (collectServiceButton.isSelected())
      {
        account = "" + serviceCollectTable.getValueAt(serviceCollectTable.getSelectedRow(), serviceCollectTable.getColumnModel().getColumnIndex("Invoice #"));
        if (serviceCollectTable.getSelectedRowCount() == 1)
        {
          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select A.InvoiceNumber,B.FirstName,B.LastName,"
            + "A.TotalParts,A.TotalLabor,A.Total,A.Warranty,"
            + "(Select sum(cash+[check]+charge) from cashiertable where "
            + "lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' AND AccountNumber = A.InvoiceNumber "
            + "AND TransactionType = 'Service' AND Reason in ('Invoice Payment','Invoice Deposit','Warranty Receivable')) AS TotalCollected "
            + "From ServiceInvoiceTable A "
            + "LEFT JOIN CustomerTable B ON B.CustomerCode = A.CustomerCode "
            + "Where A.InvoiceNumber = '" + account + "'");

          if (rs.next())
          {
            jTextField4.setText(rs.getString("InvoiceNumber"));
            jTextField5.setText(rs.getString("FirstName"));
            jTextField6.setText(rs.getString("LastName"));
            jFormattedTextField7.setValue(rs.getDouble("Total"));
            jFormattedTextField8.setValue(rs.getDouble("TotalCollected"));
            jFormattedTextField9.setValue(rs.getDouble("Warranty"));
            jFormattedTextField23.setValue(rs.getDouble("Total") + rs.getDouble("Warranty") - rs.getDouble("TotalCollected"));
            rs.getStatement().close();
          }

          rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select TransactionNumber,UserName,convert(varchar,DateNTime,101),Reason,CONVERT(decimal(16,2),(cash+[check]+charge)) "
            + "from cashiertable where "
            + "lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' AND Direction = 'IN' "
            + "AND AccountNumber = '" + account + "' AND TransactionType = 'Service' ");

          DefaultTableModel aModel = (DefaultTableModel) uICTable2.getModel();
          if (aModel.getRowCount() > 0)
          {
            for (int i = aModel.getRowCount(); i > 0; i--)
            {
              aModel.removeRow(i - 1);
            }
          }
          while (rs.next())
          {
            Object[] values = new Object[rs.getMetaData().getColumnCount()];
            for (int i = 0; i < rs.getMetaData().getColumnCount(); i++)
            {
              values[i] = rs.getObject(i + 1);
            }

            aModel.addRow(values);
          }
          rs.getStatement().close();
        }
        else
        {
        }
      }
    }
    catch (Exception e)
    {
      dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_collectTablesClicked

private void collectTablesKeyed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_collectTablesKeyed

    collectTablesClicked(null);
}//GEN-LAST:event_collectTablesKeyed

private void collectPopupButtonsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_collectPopupButtonsClicked

    if (evt.getClickCount() >= 1)
    {
      if ((JButton) evt.getSource() == collectPopupOkButton)
      {
        if (((Number) collectCashField.getValue()).doubleValue() < 0.00)
        {
          collectCashField.setValue(Math.abs(((Number) collectCashField.getValue()).doubleValue()));
          dms.DMSApp.displayMessage(collectionsPopup, "Can not collect negative values.", JOptionPane.WARNING_MESSAGE);
          return;
        }
        if (((Number) collectCheckField.getValue()).doubleValue() < 0.00)
        {
          collectCheckField.setValue(Math.abs(((Number) collectCheckField.getValue()).doubleValue()));
          dms.DMSApp.displayMessage(collectionsPopup, "Can not collect negative values.", JOptionPane.WARNING_MESSAGE);
          return;
        }
        if (((Number) collectChargeField.getValue()).doubleValue() < 0.00)
        {
          collectChargeField.setValue(Math.abs(((Number) collectChargeField.getValue()).doubleValue()));
          dms.DMSApp.displayMessage(collectionsPopup, "Can not collect negative values.", JOptionPane.WARNING_MESSAGE);
          return;
        }

        if (collectModal == 1)
        {
          double tc = ((Number) collectCashField.getValue()).doubleValue() + ((Number) collectCheckField.getValue()).doubleValue() + ((Number) collectChargeField.getValue()).doubleValue();
          String tagUpdate = "";

          if (collectReasonDD.getSelectedItem() != null)
          {
            if (collectReasonDD.getSelectedItem().equals("Tag"))
            {
              tagUpdate = "Update DealsTable "
                + "Set TagPaid = (case when (Select sum(cash+[check]+charge) from cashiertable where "
                + "lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' AND AccountNumber = '" + currentAccount + "' "
                + "AND TransactionType = 'Deals' AND Reason in ('Tag','Tag Refund')) + " + tc + " >= (select tagcost from dealstable where accountnumber = '" + currentAccount + "') "
                + "then 'True' else 'False' end) "
                + "Where AccountNumber = '" + currentAccount + "'~";
            }
          }

          DecimalFormat totalCollected = new DecimalFormat("$#,###,###.##");
          String changesMade = "Took a payment of : " + totalCollected.format(tc) + " for " + collectReasonDD.getSelectedItem() + ".";

          String query = "Insert Into CashierTable "
            + "(AccountNumber,TransactionType,Direction,LotName,Reason,CASH,[CHECK],CHARGE,DateNtime,UserName) "
            + "Select '" + currentAccount + "',"
            + "'Deals',"
            + "'IN',"
            + "'" + dms.DMSApp.getApplication().getCurrentlotName() + "',"
            + "'" + collectReasonDD.getSelectedItem() + "',"
            + "" + collectCashField.getValue() + ","
            + "" + collectCheckField.getValue() + ","
            + "" + collectChargeField.getValue() + ","
            + "getDate(),"
            + "'" + dms.DMSApp.getApplication().getUser() + "'~"
            + "Insert Into CashierCurrentDrawTable "
            + "(TransactionNumber,Customer,Reason,Amount,Cash,[Check],Charge,DateNTime,UserName,LotName,Direction) "
            + "Select (select top 1 TransactionNumber from CashierTable Order BY TransactionNumber desc),"
            + "(select FirstName+' '+LastName from customertable where customercode = (select buyercode from dealstable where accountnumber = '" + currentAccount + "')),"
            + "'" + collectReasonDD.getSelectedItem() + "',"
            + "" + tc + "," + collectCashField.getValue() + "," + collectCheckField.getValue() + "," + collectChargeField.getValue() + ",getDate(),'" + dms.DMSApp.getApplication().getUser() + "','" + dms.DMSApp.getApplication().getCurrentlotName() + "','IN'~"
            + "Insert Into NotesTable "
            + "(Code,CodeType,NoteDate,NoteUser,NoteType,NoteText) "
            + "Select '" + currentAccount + "','Deals',getDate(),'" + dms.DMSApp.getApplication().getUser() + "','EDIT','" + changesMade + "'~"
            + "" + tagUpdate + "";

          StringTokenizer tokens = new StringTokenizer(query, "~");
          int tCount = tokens.countTokens();
          sql = new String[tCount];
          for (int i = 0; i < tCount; i++)
          {
            sql[i] = tokens.nextToken();
          }

          if (dms.DMSApp.getApplication().getDBConnection().executeStatements(sql, collectionsPopup))
          {
            collectTablesClicked(null);
            updateCurrentDraw("Collect");
            collectionsPopup.dispose();
          }
        }
        else if (collectModal == 2)
        {
          double tc = ((Number) collectCashField.getValue()).doubleValue() + ((Number) collectCheckField.getValue()).doubleValue() + ((Number) collectChargeField.getValue()).doubleValue();
          String updateService = "";

          /*if (collectReasonDD.getSelectedItem() != null)
           {
           if (collectReasonDD.getSelectedItem().equals("Invoice Payment"))
           {
           updateService = "Update ServiceInvoiceTable "
           + "Set [Status] = (case when (Select sum(cash+[check]+charge) from cashiertable where "
           + "AccountNumber = '" + currentAccount + "' "
           + "AND TransactionType = 'Service' AND Direction in ('IN','OUT')) + " + tc + " >= (Select Total From ServiceInvoiceTable Where InvoiceNumber = '" + currentAccount + "') "
           + "then 'Closed' else (Select [Status] From ServiceInvoiceTable Where InvoiceNumber = '" + currentAccount + "') end) "
           + "Where InvoiceNumber = '" + currentAccount + "'~";
           }
           }*/
          if (collectReasonDD.getSelectedItem() != null)
          {
            if (collectReasonDD.getSelectedItem().equals("Invoice Deposit"))
            {
              updateService = "Update ServiceInvoiceTable "
                + "Set Deposit = (Select Case When sum(cash+[check]+charge) IS NULL Then 0.00 Else sum(cash+[check]+charge) End from cashiertable where "
                + "AccountNumber = '" + currentAccount + "' "
                + "AND TransactionType = 'Service' AND Reason = 'Invoice Deposit') "
                + "Where InvoiceNumber = '" + currentAccount + "'~";
            }
          }

          if (collectReasonDD.getSelectedItem() != null)
          {
            if (collectReasonDD.getSelectedItem().equals("Warranty Receivable"))
            {
//						updateService = "Insert Into QuickBooksExportTable "
//							+ "(Number, QuickBooksAccount, TransactionType, Description, Debit, Credit, LotName, TransactionDate, VendorName) "
//							+ "Select '" + currentAccount + "', 216, 'Service', 'Service Warranty Receivables', 0.00, " + tc + ",'" + dms.DMSApp.getApplication().getCurrentlotName() + ":Service', (Select ROClosed From ServiceInvoiceTable Where InvoiceNumber = '" + currentAccount + "'), '' ~";
//						updateService = updateService + "Insert Into QuickBooksExportTable "
//							+ "(Number, QuickBooksAccount, TransactionType, Description, Debit, Credit, LotName, TransactionDate, VendorName) "
//							+ "Select '" + currentAccount + "', 203, 'Service', 'Cash On Hand', " + tc + ", 0.00,'" + dms.DMSApp.getApplication().getCurrentlotName() + ":Service', (Select ROClosed From ServiceInvoiceTable Where InvoiceNumber = '" + currentAccount + "'), '' ~";

              updateService = updateService + "Insert Into AccountingGLTable "
                + "(AccountNumber, GLType, Debit, Credit, LotName, PostDate, ControlNumber, ReferenceNumber, Memo) "
                + "Select 216, 'Service', 0.00, " + tc + ",'" + dms.DMSApp.getApplication().getCurrentlotName() + "', (Select ROClosed From ServiceInvoiceTable Where InvoiceNumber = '" + currentAccount + "'), (Select CustomerCode From ServiceInvoiceTable Where InvoiceNumber = '" + currentAccount + "'), '" + currentAccount + "', '' ~";

              updateService = updateService + "Insert Into AccountingGLTable "
                + "(AccountNumber, GLType, Debit, Credit, LotName, PostDate, ControlNumber, ReferenceNumber, Memo) "
                + "Select 203, 'Service'," + tc + ",0.00,'" + dms.DMSApp.getApplication().getCurrentlotName() + "', (Select ROClosed From ServiceInvoiceTable Where InvoiceNumber = '" + currentAccount + "'), (Select CustomerCode From ServiceInvoiceTable Where InvoiceNumber = '" + currentAccount + "'), '" + currentAccount + "', '' ~";

            }
          }

          DecimalFormat totalCollected = new DecimalFormat("$#,###,###.##");
          String changesMade = "Took a payment of : " + totalCollected.format(tc) + " for " + collectReasonDD.getSelectedItem() + ".";

          String query = "Insert Into CashierTable "
            + "(AccountNumber,TransactionType,Direction,LotName,Reason,CASH,[CHECK],CHARGE,DateNtime,UserName) "
            + "Select '" + currentAccount + "',"
            + "'Service',"
            + "'IN',"
            + "'" + dms.DMSApp.getApplication().getCurrentlotName() + "',"
            + "'" + collectReasonDD.getSelectedItem() + "',"
            + "" + collectCashField.getValue() + ","
            + "" + collectCheckField.getValue() + ","
            + "" + collectChargeField.getValue() + ","
            + "getDate(),"
            + "'" + dms.DMSApp.getApplication().getUser() + "'~"
            + "Insert Into CashierCurrentDrawTable "
            + "(TransactionNumber,Customer,Reason,Amount,Cash,[Check],Charge,DateNTime,UserName,LotName,Direction) "
            + "Select (select top 1 TransactionNumber from CashierTable Order BY TransactionNumber desc),"
            + "(select FirstName+' '+LastName from customertable where customercode = (select customercode from serviceinvoicetable where invoicenumber = '" + currentAccount + "')),"
            + "'" + collectReasonDD.getSelectedItem() + "',"
            + "" + tc + "," + collectCashField.getValue() + "," + collectCheckField.getValue() + "," + collectChargeField.getValue() + ",getDate(),'" + dms.DMSApp.getApplication().getUser() + "','" + dms.DMSApp.getApplication().getCurrentlotName() + "','IN'~"
            + "Insert Into NotesTable "
            + "(Code,CodeType,NoteDate,NoteUser,NoteType,NoteText) "
            + "Select '" + currentAccount + "','Service',getDate(),'" + dms.DMSApp.getApplication().getUser() + "','EDIT','" + changesMade + "'~"
            + "" + updateService + "";

          StringTokenizer tokens = new StringTokenizer(query, "~");
          int tCount = tokens.countTokens();
          sql = new String[tCount];
          for (int i = 0; i < tCount; i++)
          {
            sql[i] = tokens.nextToken();
          }

          if (dms.DMSApp.getApplication().getDBConnection().executeStatements(sql, collectionsPopup))
          {
            collectTablesClicked(null);
            updateCurrentDraw("Collect");
            collectionsPopup.dispose();
          }
        }
        else if (collectModal == 3)
        {
          double tc = ((Number) collectCashField.getValue()).doubleValue() + ((Number) collectCheckField.getValue()).doubleValue() + ((Number) collectChargeField.getValue()).doubleValue();
          sql = new String[2];

          sql[0] = "Insert Into CashierTable "
            + "(AccountNumber,TransactionType,Direction,LotName,Reason,CASH,[CHECK],CHARGE,DateNtime,UserName,Customer) "
            + "Select 0,"
            + "'Other',"
            + "'IN',"
            + "'" + dms.DMSApp.getApplication().getCurrentlotName() + "',"
            + "'" + collectReasonField.getText() + "',"
            + "" + collectCashField.getValue() + ","
            + "" + collectCheckField.getValue() + ","
            + "" + collectChargeField.getValue() + ","
            + "getDate(),"
            + "'" + dms.DMSApp.getApplication().getUser() + "',"
            + "'" + jTextField10.getText().replace("'", "''") + "'";

          sql[1] = "Insert Into CashierCurrentDrawTable "
            + "(TransactionNumber,Customer,Reason,Amount,Cash,[Check],Charge,DateNTime,UserName,LotName,Direction) "
            + "Select (select top 1 TransactionNumber from CashierTable Order BY TransactionNumber desc),'" + jTextField10.getText() + "','" + collectReasonField.getText() + "',"
            + "" + tc + "," + collectCashField.getValue() + "," + collectCheckField.getValue() + "," + collectChargeField.getValue() + ",getDate(),'" + dms.DMSApp.getApplication().getUser() + "','" + dms.DMSApp.getApplication().getCurrentlotName() + "','IN'";

          if (dms.DMSApp.getApplication().getDBConnection().executeStatements(sql, collectionsPopup))
          {
            updateCurrentDraw("Collect");
            collectionsPopup.dispose();
          }
        }
        else if (collectModal == 4 || collectModal == 5)
        {
          String transNumber = "" + jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Transaction #"));
          double tc = ((Number) collectCashField.getValue()).doubleValue() + ((Number) collectCheckField.getValue()).doubleValue() + ((Number) collectChargeField.getValue()).doubleValue();
          sql = new String[2];

          sql[0] = "Update CashierTable "
            + "Set "
            + "Reason = '" + collectReasonDD.getSelectedItem() + "',"
            + "CASH = " + collectCashField.getValue() + ","
            + "[CHECK] = " + collectCheckField.getValue() + ","
            + "CHARGE = " + collectChargeField.getValue() + ","
            + "DateNtime = getDate(),"
            + "UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
            + "Where TransactionNumber = " + transNumber + "";

          sql[1] = "Update CashierCurrentDrawTable "
            + "Set "
            + "Reason = '" + collectReasonDD.getSelectedItem() + "',"
            + "Amount = " + tc + ","
            + "CASH = " + collectCashField.getValue() + ","
            + "[CHECK] = " + collectCheckField.getValue() + ","
            + "CHARGE = " + collectChargeField.getValue() + ","
            + "DateNtime = getDate(),"
            + "UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
            + "Where TransactionNumber = " + transNumber + "";

          if (dms.DMSApp.getApplication().getDBConnection().executeStatements(sql, collectionsPopup))
          {
            updateCurrentDraw("Collect");
            searchTabButtonClicked(null);
            collectionsPopup.dispose();
          }
        }
        else if (collectModal == 6)
        {
          String transNumber = "" + jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Transaction #"));
          double tc = ((Number) collectCashField.getValue()).doubleValue() + ((Number) collectCheckField.getValue()).doubleValue() + ((Number) collectChargeField.getValue()).doubleValue();
          sql = new String[2];

          sql[0] = "Update CashierTable "
            + "Set "
            + "Reason = '" + collectReasonField.getText() + "',"
            + "CASH = " + collectCashField.getValue() + ","
            + "[CHECK] = " + collectCheckField.getValue() + ","
            + "CHARGE = " + collectChargeField.getValue() + ","
            + "DateNtime = getDate(),"
            + "UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
            + "Where TransactionNumber = " + transNumber + "";

          sql[1] = "Update CashierCurrentDrawTable "
            + "Set "
            + "Reason = '" + collectReasonField.getText() + "',"
            + "Amount = " + tc + ","
            + "CASH = " + collectCashField.getValue() + ","
            + "[CHECK] = " + collectCheckField.getValue() + ","
            + "CHARGE = " + collectChargeField.getValue() + ","
            + "DateNtime = getDate(),"
            + "UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
            + "Where TransactionNumber = " + transNumber + "";

          if (dms.DMSApp.getApplication().getDBConnection().executeStatements(sql, collectionsPopup))
          {
            updateCurrentDraw("Collect");
            searchTabButtonClicked(null);
            collectionsPopup.dispose();
          }
        }
      }
      else if ((JButton) evt.getSource() == collectPopupCancelButton)
      {
        collectionsPopup.dispose();
      }
    }
}//GEN-LAST:event_collectPopupButtonsClicked

private void payPopupButtonsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_payPopupButtonsClicked

    if (evt.getClickCount() >= 1)
    {
      if ((JButton) evt.getSource() == jButton32)
      {
        if (payModal == 3)
        {
          sql = new String[2];

          //" + currentAccount + "
          sql[0] = "Insert Into CashierTable "
            + "(AccountNumber,TransactionType,Direction,LotName,Reason,CASH,DateNtime,UserName) "
            + "Select '0',"
            + "'" + payReasonDD.getSelectedItem() + "',"
            + "'OUT',"
            + "'" + dms.DMSApp.getApplication().getCurrentlotName() + "',"
            + "'" + payReasonField.getText() + "',"
            + "-" + payCashField.getValue() + ","
            + "getDate(),"
            + "'" + dms.DMSApp.getApplication().getUser() + "'";

          sql[1] = "Insert Into CashierCurrentDrawTable "
            + "(TransactionNumber,Customer,Reason,Amount,DateNTime,UserName,LotName,Direction) "
            + "Select (select top 1 TransactionNumber from CashierTable Order BY TransactionNumber desc),'" + jTextField16.getText() + " " + jTextField17.getText() + "','" + collectReasonField.getText() + "',"
            + "" + payCashField.getValue() + ",getDate(),'" + dms.DMSApp.getApplication().getUser() + "','" + dms.DMSApp.getApplication().getCurrentlotName() + "','OUT'";

          if (dms.DMSApp.getApplication().getDBConnection().executeStatements(sql, payoutPopup))
          {
            updateCurrentDraw("Pay");
            payoutPopup.dispose();
          }
        }
      }
      else if ((JButton) evt.getSource() == jButton33)
      {
        payoutPopup.dispose();
      }
    }
}//GEN-LAST:event_payPopupButtonsClicked

private void accountingTableClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountingTableClicked
    if (evt.getClickCount() >= 1)
    {
      if (jTable3.getSelectedRowCount() == 1)
      {
        updateAccounting();
      }
      else
      {
        dms.DMSApp.displayMessage(this, "Please select a cashier to view details.", JOptionPane.WARNING_MESSAGE);
      }
    }
}//GEN-LAST:event_accountingTableClicked

private void accountingTableKeyed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accountingTableKeyed
    if (jTable3.getSelectedRowCount() == 1)
    {
      updateAccounting();
    }
}//GEN-LAST:event_accountingTableKeyed

private void accountingPopupButtonsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountingPopupButtonsClicked

    if (evt.getClickCount() >= 1)
    {
      if ((JButton) evt.getSource() == jButton34)
      {
        if (accountingModal == 1)
        {
          if (((Number) accountingAmountField.getValue()).doubleValue() >= ((Number) accountingAmountField1.getValue()).doubleValue())
          {
            sql = new String[2];
            sql[0] = "Insert Into CashierAccountingTable "
              + "(DateNTime,Cash,[Check],Charge,UserName,Direction,LotName,IsCashierCheckout,CashierCheckedOut,Comment) "
              + "Select getDate()," + accountingAmountField.getValue() + ",0.00,0.00,"
              + "'" + dms.DMSApp.getApplication().getUser() + "','IN',"
              + "'" + dms.DMSApp.getApplication().getCurrentlotName() + "','TRUE',"
              + "'" + jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("UserName")) + "',"
              + "'" + accountingCommentField.getText().replace("'", "''") + "'";

            sql[1] = "Delete from CashierCurrentDrawTable "
              + "Where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
              + "AND UserName = '" + jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("UserName")) + "'";

          }
          else if (((Number) accountingAmountField.getValue()).doubleValue() < ((Number) accountingAmountField1.getValue()).doubleValue())
          {
            sql = new String[2];
            sql[0] = "Insert Into CashierAccountingTable "
              + "(DateNTime,Cash,[Check],Charge,UserName,Direction,LotName,IsCashierCheckout,CashierCheckedOut,Comment) "
              + "Select getDate()," + accountingAmountField.getValue() + ",0.00,0.00,"
              + "'" + dms.DMSApp.getApplication().getUser() + "','IN',"
              + "'" + dms.DMSApp.getApplication().getCurrentlotName() + "','FALSE',"
              + "'" + jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("UserName")) + "',"
              + "'" + accountingCommentField.getText().replace("'", "''") + "'";

            sql[1] = "Insert Into CashierCurrentDrawTable "
              + "(TransactionNumber,Customer,Reason,Amount,DateNTime,UserName,LotName,Direction) "
              + "Select 0,'" + dms.DMSApp.getApplication().getFullUsername() + "','Transfer Money',"
              + "" + accountingAmountField.getValue() + ",getDate(),"
              + "'" + jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("UserName")) + "',"
              + "'" + dms.DMSApp.getApplication().getCurrentlotName() + "','OUT'";
          }
        }
        else if (accountingModal == 2)
        {
          sql = new String[2];
          sql[0] = "Insert Into CashierAccountingTable "
            + "(DateNTime,Cash,[Check],Charge,UserName,Direction,LotName,IsCashierCheckout,CashierCheckedOut,Comment) "
            + "Select getDate()," + accountingAmountField.getValue() + ",0.00,0.00,"
            + "'" + dms.DMSApp.getApplication().getUser() + "','OUT',"
            + "'" + dms.DMSApp.getApplication().getCurrentlotName() + "','FALSE',"
            + "'" + jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("UserName")) + "',"
            + "'" + accountingCommentField.getText().replace("'", "''") + "'";

          sql[1] = "Insert Into CashierCurrentDrawTable "
            + "(TransactionNumber,Customer,Reason,Amount,Cash,DateNTime,UserName,LotName,Direction) "
            + "Select 0,'" + dms.DMSApp.getApplication().getFullUsername() + "','Transfer Money',"
            + "" + accountingAmountField.getValue() + "," + accountingAmountField.getValue() + ",getDate(),"
            + "'" + jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("UserName")) + "',"
            + "'" + dms.DMSApp.getApplication().getCurrentlotName() + "','IN'";
        }

        if (dms.DMSApp.getApplication().getDBConnection().executeStatements(sql, accountingPopup))
        {
          DefaultTableModel collectTableModal = (DefaultTableModel) uICTable4.getModel();
          DefaultTableModel payTableModal = (DefaultTableModel) uICTable5.getModel();

          if (collectTableModal != null)
          {
            if (collectTableModal.getRowCount() > 0)
            {
              for (int i = collectTableModal.getRowCount(); i > 0; i--)
              {
                collectTableModal.removeRow(i - 1);
              }
            }
          }

          if (payTableModal != null)
          {
            if (payTableModal.getRowCount() > 0)
            {
              for (int i = payTableModal.getRowCount(); i > 0; i--)
              {
                payTableModal.removeRow(i - 1);
              }
            }
          }

          jTable3.clearSelection();
          resetWindow();
          accountingPopup.dispose();
        }
      }
      else if ((JButton) evt.getSource() == jButton35)
      {
        accountingPopup.dispose();
      }
    }
}//GEN-LAST:event_accountingPopupButtonsClicked

private void accountingButtonsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountingButtonsClicked

    if (evt.getClickCount() >= 1)
    {
      if ((JButton) evt.getSource() == takeInAccounting)
      {
        accountingAmountField.setValue(0.00);
        accountingAmountField1.setValue(jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("Total Open Balance")));
        accountingModal = 1;
        accountingPopup.setLocationRelativeTo(this);
        dms.DMSApp.getApplication().show(accountingPopup);
      }
      else if ((JButton) evt.getSource() == giveOutAccounting)
      {
        accountingAmountField.setValue(0.00);
        accountingAmountField1.setValue(jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("Total Open Balance")));
        accountingModal = 2;
        accountingPopup.setLocationRelativeTo(this);
        dms.DMSApp.getApplication().show(accountingPopup);
      }
      else if ((JButton) evt.getSource() == refreshAccounting)
      {
        clearAccountingList();
        makeAccountingList();
      }
    }
}//GEN-LAST:event_accountingButtonsClicked

private void printReceipts(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printReceipts

    if (evt.getClickCount() >= 1)
    {
      try
      {
        String l = "Select (Select LotAddress From LotsTable Where LotName = A.LotName) AS Field1,"
          + "(Select LotCity+', '+LotState+', '+LotZip From LotsTable Where LotName = A.LotName) AS Field2,"
          + "(Select LotPhone From LotsTable Where LotName = A.LotName) AS Field3,"
          + "(Select LotFax From LotsTable Where LotName = A.LotName) AS Field4,"
          + "A.DateNTime AS Field5,"
          + "A.Lotname AS Field6,"
          + "<CustomerField> AS Field7,"
          + "(select D.FirstName + ' ' + D.LastName from DMSData..UsersTable D where D.username = A.UserName) AS Field8,"
          + "A.Cash AS Field9,"
          + "A.[Check] AS Field10,"
          + "A.Charge AS Field11,"
          + "A.Reason AS Field12,"
          + "A.TransactionNumber AS Field13,"
          + "0.00 AS Field14,"
          + "0.00 AS Field15,"
          + "0.00 AS Field16,"
          + "(Select CompanyLogo From DMSData..CompanyTable Where CompanyCode = " + dms.DMSApp.getApplication().getCompanyCode() + ") AS Image "
          + "From CashierTable A "
          + "LEFT JOIN CustomerTable B ON B.CustomerCode = <CustomerCodeField> "
          + "Where A.TransactionNumber = '<TransactionNumber>' ";

        if ((JButton) evt.getSource() == jButton4)
        {
          l = l.replace("<TransactionNumber>", "" + uICTable1.getValueAt(uICTable1.getSelectedRow(), uICTable1.getColumnModel().getColumnIndex("TransactionNumber")));
          l = l.replace("<CustomerField>", "B.FirstName +' '+B.LastName");
          l = l.replace("<CustomerCodeField>", "(select BuyerCode from DealsTable C where C.AccountNumber = A.AccountNumber)");

          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select FormCompiled From FormsTable Where FormName = 'CashierReceipt'");
          if (rs.next())
          {
            InputStream formXML = rs.getBlob("FormCompiled").getBinaryStream();
            rs.getStatement().close();
            rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(l);
            JRResultSetDataSource rsds = new JRResultSetDataSource(rs);
            JasperPrint jp = JasperFillManager.fillReport(formXML, null, rsds);
            JasperPrintManager.printReport(jp, true);
            rs.getStatement().close();
          }
        }
        else if ((JButton) evt.getSource() == jButton3)
        {
          l = l.replace("<TransactionNumber>", "" + uICTable2.getValueAt(uICTable2.getSelectedRow(), uICTable2.getColumnModel().getColumnIndex("TransactionNumber")));
          l = l.replace("<CustomerField>", "B.FirstName +' '+B.LastName");
          l = l.replace("<CustomerCodeField>", "(select CustomerCode from ServiceInvoiceTable C where C.InvoiceNumber = A.AccountNumber)");

          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select FormCompiled From FormsTable Where FormName = 'CashierReceipt'");
          if (rs.next())
          {
            InputStream formXML = rs.getBlob("FormCompiled").getBinaryStream();
            rs.getStatement().close();
            rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(l);
            JRResultSetDataSource rsds = new JRResultSetDataSource(rs);
            JasperPrint jp = JasperFillManager.fillReport(formXML, null, rsds);
            JRViewer viewer = new JRViewer(jp);
            viewer.setFitWidthZoomRatio();
            viewer.setVisible(true);
            printPreviewPanel.removeAll();
            printPreviewPanel.add(viewer);
            printPreviewPanel.updateUI();
            rs.getStatement().close();
            dms.DMSApp.getApplication().show(printPreview);
          }
        }
        else if ((JButton) evt.getSource() == jButton15)
        {
          l = l.replace("<TransactionNumber>", "" + uICTable3.getValueAt(uICTable3.getSelectedRow(), uICTable3.getColumnModel().getColumnIndex("TransactionNumber")));
          l = l.replace("<CustomerField>", "A.Customer");
          l = l.replace("<CustomerCodeField>", "0");

          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select FormCompiled From FormsTable Where FormName = 'CashierReceipt'");
          if (rs.next())
          {
            InputStream formXML = rs.getBlob("FormCompiled").getBinaryStream();
            rs.getStatement().close();
            rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(l);
            JRResultSetDataSource rsds = new JRResultSetDataSource(rs);
            JasperPrint jp = JasperFillManager.fillReport(formXML, null, rsds);
            JRViewer viewer = new JRViewer(jp);
            viewer.setFitWidthZoomRatio();
            viewer.setVisible(true);
            printPreviewPanel.removeAll();
            printPreviewPanel.add(viewer);
            printPreviewPanel.updateUI();
            rs.getStatement().close();
            dms.DMSApp.getApplication().show(printPreview);
          }
        }
      }
      catch (Exception e)
      {
        dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
      }
    }
}//GEN-LAST:event_printReceipts

    private void printShiftClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printShiftClicked
    if (evt.getClickCount() >= 1)
    {
      try
      {
        if ((JButton) evt.getSource() == printShiftCollect)
        {
          String l = "Select '" + dms.DMSApp.getApplication().getFullUsername() + "' AS UserName,"
            + "Customer,DateNTime,Reason,Cash,[Check],Charge,Amount,Direction "
            + "From CashierCurrentDrawTable "
            + "Where Direction = 'IN' "
            + "AND UserName = '" + dms.DMSApp.getApplication().getUser() + "'";

          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select ReportXML From ReportTable Where ReportName = 'CashierCollections'");
          if (rs.next())
          {
            InputStream formXML = rs.getBlob("ReportXML").getBinaryStream();
            rs.getStatement().close();
            rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(l);
            JRResultSetDataSource rsds = new JRResultSetDataSource(rs);
            JasperPrint jp = JasperFillManager.fillReport(formXML, null, rsds);
            JRViewer viewer = new JRViewer(jp);
            viewer.setFitWidthZoomRatio();
            viewer.setVisible(true);
            printPreviewPanel.removeAll();
            printPreviewPanel.add(viewer);
            printPreviewPanel.updateUI();
            rs.getStatement().close();
            dms.DMSApp.getApplication().show(printPreview);
          }
        }
        else if ((JButton) evt.getSource() == printShiftPay)
        {
          String l = "Select '" + dms.DMSApp.getApplication().getFullUsername() + "' AS UserName,"
            + "Customer,DateNTime,Reason,Cash,[Check],Charge,Amount,Direction "
            + "From CashierCurrentDrawTable "
            + "Where Direction = 'OUT' "
            + "AND UserName = '" + dms.DMSApp.getApplication().getUser() + "'";

          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select ReportXML From ReportTable Where ReportName = 'CashierCollections'");
          if (rs.next())
          {
            InputStream formXML = rs.getBlob("ReportXML").getBinaryStream();
            rs.getStatement().close();
            rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(l);
            JRResultSetDataSource rsds = new JRResultSetDataSource(rs);
            JasperPrint jp = JasperFillManager.fillReport(formXML, null, rsds);
            JRViewer viewer = new JRViewer(jp);
            viewer.setFitWidthZoomRatio();
            viewer.setVisible(true);
            printPreviewPanel.removeAll();
            printPreviewPanel.add(viewer);
            printPreviewPanel.updateUI();
            rs.getStatement().close();
            dms.DMSApp.getApplication().show(printPreview);
          }
        }
      }
      catch (Exception e)
      {
        dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
      }
    }
    }//GEN-LAST:event_printShiftClicked

    private void accountPrintClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountPrintClicked
    if (evt.getClickCount() >= 1)
    {
      try
      {
        String l = "Select (select firstname+' '+lastname from dmsdata..userstable where username = A.UserName) AS UserName,"
          + "A.Customer,A.Reason,"
          + "case when A.Direction = 'IN' then A.Amount else -1*A.Amount end AS Amount,"
          + "A.DateNTime,A.Direction,"
          + "case when A.Direction = 'IN' then A.Cash else -1*A.Cash end AS Cash,"
          + "case when A.Direction = 'IN' then A.[Check] else -1*A.[Check] end AS [Check],"
          + "case when A.Direction = 'IN' then A.Charge else -1*A.Charge end AS Charge "
          + "From cashiercurrentdrawtable A";

        ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select ReportXML From ReportTable Where ReportName = 'AccountingReport'");
        if (rs.next())
        {
          InputStream formXML = rs.getBlob("ReportXML").getBinaryStream();
          rs.getStatement().close();
          rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(l);
          JRResultSetDataSource rsds = new JRResultSetDataSource(rs);
          JasperPrint jp = JasperFillManager.fillReport(formXML, null, rsds);
          JRViewer viewer = new JRViewer(jp);
          viewer.setFitWidthZoomRatio();
          viewer.setVisible(true);
          printPreviewPanel.removeAll();
          printPreviewPanel.add(viewer);
          printPreviewPanel.updateUI();
          rs.getStatement().close();
          dms.DMSApp.getApplication().show(printPreview);
        }
      }
      catch (Exception e)
      {
        dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
      }
    }
    }//GEN-LAST:event_accountPrintClicked

  private void searchButtonClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_searchButtonClicked
  {//GEN-HEADEREND:event_searchButtonClicked
    if (evt == null)
    {
      clearList("Collect");
      makeList("Collect", true);
    }
    else if (evt.getClickCount() >= 1)
    {
      clearList("Collect");
      makeList("Collect", true);
    }
  }//GEN-LAST:event_searchButtonClicked

  private void searchEnterKeyed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_searchEnterKeyed
  {//GEN-HEADEREND:event_searchEnterKeyed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER)
    {
      searchButtonClicked(null);
    }
  }//GEN-LAST:event_searchEnterKeyed

  private void searchTabShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_searchTabShown
  {//GEN-HEADEREND:event_searchTabShown
    jTextField11.setText("");
    jPanel54.setVisible(false);

    DefaultTableModel aModel = (DefaultTableModel) jTable1.getModel();
    if (aModel != null)
    {
      if (aModel.getRowCount() > 0)
      {
        for (int i = aModel.getRowCount(); i > 0; i--)
        {
          aModel.removeRow(i - 1);
        }
      }
    }
  }//GEN-LAST:event_searchTabShown

  private void searchCriteriasClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_searchCriteriasClicked
  {//GEN-HEADEREND:event_searchCriteriasClicked
    searchTabShown(null);
  }//GEN-LAST:event_searchCriteriasClicked

  private void searchTabButtonClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_searchTabButtonClicked
  {//GEN-HEADEREND:event_searchTabButtonClicked
    jPanel54.setVisible(false);
    DefaultTableModel aModel = (DefaultTableModel) jTable1.getModel();
    if (aModel != null)
    {
      if (aModel.getRowCount() > 0)
      {
        for (int i = aModel.getRowCount(); i > 0; i--)
        {
          aModel.removeRow(i - 1);
        }
      }
    }

    String direction = "";
    if (jCheckBox1.isSelected())
    {
      direction = "IN";
    }
    else if (jCheckBox2.isSelected())
    {
      direction = "OUT";
    }

    String searchQuery = "Select A.TransactionNumber,A.AccountNumber,A.Reason,"
      + "CONVERT(decimal(16,2),A.Cash),CONVERT(decimal(16,2),A.[Check]),CONVERT(decimal(16,2),A.Charge),convert(varchar,A.DateNTime,101),A.UserName "
      + "From CashierTable A ";

    if (jCheckBox3.isSelected())
    {
      searchQuery = searchQuery + "LEFT JOIN DealsTable B ON B.AccountNumber = A.AccountNumber "
        + "Where (A.Direction = '" + direction + "') AND (A.TransactionType = 'Deals') AND (A.Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "') "
        + "AND (A.AccountNumber like '" + jTextField11.getText() + "%' "
        + "or A.Reason like '%" + jTextField11.getText() + "%' "
        + "or convert(varchar,A.DateNTime,101) like '" + jTextField11.getText() + "%' "
        + "or A.Username like '" + jTextField11.getText() + "%') "
        + "Order By A.DateNTime DESC ";
    }
    else if (jCheckBox4.isSelected())
    {
      searchQuery = searchQuery + "LEFT JOIN ServiceInvoiceTable B ON B.InvoiceNumber = A.AccountNumber "
        + "LEFT JOIN CustomerTable C ON C.CustomerCode = B.CustomerCode "
        + "Where (A.Direction = '" + direction + "') AND (A.TransactionType = 'Service') AND (A.Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "') "
        + "AND (A.AccountNumber like '" + jTextField11.getText() + "%' "
        + "or A.Reason like '%" + jTextField11.getText() + "%' "
        + "or convert(varchar,A.DateNTime,101) like '" + jTextField11.getText() + "%' "
        + "or A.Username like '" + jTextField11.getText() + "%') "
        + "Order By A.DateNTime DESC ";
    }
    else if (jCheckBox5.isSelected())
    {
      searchQuery = searchQuery + "Where (A.Direction = '" + direction + "') AND (A.TransactionType NOT IN ('Deals','Service')) AND (A.Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "') "
        + "AND (A.AccountNumber like '" + jTextField11.getText() + "%' "
        + "or A.Reason like '%" + jTextField11.getText() + "%' "
        + "or convert(varchar,A.DateNTime,101) like '" + jTextField11.getText() + "%' "
        + "or A.Username like '" + jTextField11.getText() + "%') "
        + "Order By A.DateNTime DESC ";
    }

    if (aModel != null)
    {
      try
      {
        if (searchQuery != null)
        {
          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(searchQuery);
          ResultSetMetaData rsmd = rs.getMetaData();
          int colNo = rsmd.getColumnCount();
          while (rs.next())
          {
            Object[] values = new Object[colNo];
            for (int i = 0; i < colNo; i++)
            {
              values[i] = rs.getObject(i + 1);
            }
            aModel.addRow(values);
          }
        }
      }
      catch (Exception e)
      {
        dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
      }
    }
  }//GEN-LAST:event_searchTabButtonClicked

  private void searchTabEnterkeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_searchTabEnterkeyPressed
  {//GEN-HEADEREND:event_searchTabEnterkeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER)
    {
      searchTabButtonClicked(null);
    }
  }//GEN-LAST:event_searchTabEnterkeyPressed

  private void searchTabTableClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_searchTabTableClicked
  {//GEN-HEADEREND:event_searchTabTableClicked
    if (jTable1.getSelectedRowCount() == 1)
    {
      if (jCheckBox1.isSelected() && (jCheckBox3.isSelected() || jCheckBox5.isSelected()))
      {
        jButton7.setVisible(dms.DMSApp.getApplication().getPermissions().accountingAssignTransaction);
      }
      else
      {
        jButton7.setVisible(false);
      }

      jButton5.setVisible(dms.DMSApp.getApplication().getPermissions().accountingEditTranaction);
      jButton6.setVisible(dms.DMSApp.getApplication().getPermissions().accountingDeleteTransaction);
      jPanel54.setVisible(true);
    }
  }//GEN-LAST:event_searchTabTableClicked

  private void actionButtonsClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_actionButtonsClicked
  {//GEN-HEADEREND:event_actionButtonsClicked
    if (evt.getClickCount() >= 1)
    {
      if ((JButton) evt.getSource() == jButton5)
      {
        if (jTable1.getSelectedRowCount() == 1)
        {
          evt.setSource(jButton5);
          collectionsButtonsClicked(evt);
        }
        else
        {
          dms.DMSApp.displayMessage(this, "You must select a transaction to edit.", JOptionPane.WARNING_MESSAGE);
        }
      }
      else if ((JButton) evt.getSource() == jButton6)
      {
        if (jTable1.getSelectedRowCount() == 1)
        {
          int answer = JOptionPane.showConfirmDialog(assignCollectionPopup, "Are you sure you want to delete this transaction?\nDeleting this transaction is perminent and can not bet reversed.", "Confirm", JOptionPane.YES_NO_OPTION);
          if (answer == JOptionPane.YES_OPTION)
          {
            String transNumber = "" + jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Transaction #"));
            sql = new String[2];
            sql[0] = "Delete From CashierTable "
              + "Where TransactionNumber = '" + transNumber + "'";
            sql[1] = "Delete From CashierCurrentDrawTable "
              + "Where TransactionNumber = '" + transNumber + "'";
            if (dms.DMSApp.getApplication().getDBConnection().executeStatements(sql, this))
            {
              searchTabButtonClicked(null);
            }
          }
        }
        else
        {
          dms.DMSApp.displayMessage(this, "You must select a transaction to delete.", JOptionPane.WARNING_MESSAGE);
        }
      }
      else if ((JButton) evt.getSource() == jButton7)
      {
        if (jTable1.getSelectedRowCount() == 1)
        {
          assignCollectionPopup.setLocationRelativeTo(this);
          dms.DMSApp.getApplication().show(assignCollectionPopup);
        }
        else
        {
          dms.DMSApp.displayMessage(this, "You must select a transaction to assign to deal.", JOptionPane.WARNING_MESSAGE);
        }
      }
    }
  }//GEN-LAST:event_actionButtonsClicked

  private void assignCollectionSearchClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_assignCollectionSearchClicked
  {//GEN-HEADEREND:event_assignCollectionSearchClicked
    String query = "select A.AccountNumber,B.FirstName +' '+B.LastName,C.Year+'-'+C.Make+'-'+C.Model+'-'+C.ExtColor "
      + "From DealsTable A "
      + "Left Join CustomerTable B ON B.CustomerCode = A.BuyerCode "
      + "Left Join InventoryTable C ON C.StockNumber = A.StockNumber "
      + "Where A.Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
      + "AND A.Status <> 'Deleted' AND "
      + "(A.AccountNumber like '" + jTextField12.getText() + "%' "
      + "or B.FirstName like '" + jTextField12.getText() + "%' "
      + "or B.LastName like '" + jTextField12.getText() + "%' "
      + "or C.Year like '" + jTextField12.getText() + "%' "
      + "or C.Make like '" + jTextField12.getText() + "%' "
      + "or C.Model like '" + jTextField12.getText() + "%' "
      + "or C.ExtColor like '" + jTextField12.getText() + "%')";

    DefaultTableModel aModel = (DefaultTableModel) jTable2.getModel();
    if (aModel != null)
    {
      if (aModel.getRowCount() > 0)
      {
        for (int i = aModel.getRowCount(); i > 0; i--)
        {
          aModel.removeRow(i - 1);
        }
      }
    }

    if (aModel != null)
    {
      try
      {
        if (query != null)
        {
          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(query);
          ResultSetMetaData rsmd = rs.getMetaData();
          int colNo = rsmd.getColumnCount();
          while (rs.next())
          {
            Object[] values = new Object[colNo];
            for (int i = 0; i < colNo; i++)
            {
              values[i] = rs.getObject(i + 1);
            }
            aModel.addRow(values);
          }
        }
      }
      catch (Exception e)
      {
        dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
      }
    }
  }//GEN-LAST:event_assignCollectionSearchClicked

  private void assignSearchEnterKey(java.awt.event.KeyEvent evt)//GEN-FIRST:event_assignSearchEnterKey
  {//GEN-HEADEREND:event_assignSearchEnterKey
    if (evt.getKeyCode() == KeyEvent.VK_ENTER)
    {
      assignCollectionSearchClicked(null);
    }
  }//GEN-LAST:event_assignSearchEnterKey

  private void assignCollectionButtonsClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_assignCollectionButtonsClicked
  {//GEN-HEADEREND:event_assignCollectionButtonsClicked
    if (evt.getClickCount() >= 1)
    {
      if ((JButton) evt.getSource() == jButton8)
      {
        if (jTable2.getSelectedRowCount() == 1)
        {
          String transNumber = "" + jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Transaction #"));
          double cashAmount = ((Number) jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Cash"))).doubleValue();
          double checkAmount = ((Number) jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Check"))).doubleValue();
          double chargeAmount = ((Number) jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getColumnModel().getColumnIndex("Charge"))).doubleValue();
          double paymentAmount = cashAmount + checkAmount + chargeAmount;
          DecimalFormat nf = new DecimalFormat("#0.00");
          String dealNumber = "" + jTable2.getValueAt(jTable2.getSelectedRow(), jTable2.getColumnModel().getColumnIndex("Account #"));
          int answer = JOptionPane.showConfirmDialog(assignCollectionPopup, "Are you sure you want to assign a payment of $" + nf.format(paymentAmount) + " : " + jComboBox1.getSelectedItem() + " to account number " + dealNumber + " ?", "Confirm", JOptionPane.YES_NO_OPTION);
          if (answer == JOptionPane.YES_OPTION)
          {
            sql = new String[3];
            sql[0] = "Insert Into NotesTable "
              + "(Code,CodeType,NoteDate,NoteUser,Notetype,NoteText) "
              + "Select (Select AccountNumber From CashierTable Where TransactionNumber = '" + transNumber + "'),'Deals',getDate(),"
              + "'" + dms.DMSApp.getApplication().getUser() + "','EDIT','Moved payment of $" + nf.format(paymentAmount) + " to " + dealNumber + "'";
            sql[1] = "Insert Into NotesTable "
              + "(Code,CodeType,NoteDate,NoteUser,Notetype,NoteText) "
              + "Select '" + dealNumber + "','Deals',getDate(),"
              + "'" + dms.DMSApp.getApplication().getUser() + "','EDIT','Moved payment of $" + nf.format(paymentAmount) + " from ' + Convert(Varchar(50),(Select AccountNumber From CashierTable Where TransactionNumber = '" + transNumber + "'))";
            sql[2] = "Update CashierTable "
              + "Set AccountNumber = '" + dealNumber + "',"
              + "TransactionType = 'Deals',"
              + "Reason = '" + jComboBox1.getSelectedItem() + "' "
              + "Where TransactionNumber = '" + transNumber + "'";
            if (dms.DMSApp.getApplication().getDBConnection().executeStatements(sql, assignCollectionPopup))
            {
              jTextField11.setText("");
              searchTabButtonClicked(null);
              assignCollectionPopup.dispose();
            }
          }
        }
        else
        {
          dms.DMSApp.displayMessage(assignCollectionPopup, "You must select a deal to assign this payment to.", JOptionPane.WARNING_MESSAGE);
        }
      }
      else if ((JButton) evt.getSource() == jButton9)
      {
        assignCollectionPopup.dispose();
      }
    }
  }//GEN-LAST:event_assignCollectionButtonsClicked

  private void accountingPrintReceipts(java.awt.event.MouseEvent evt)//GEN-FIRST:event_accountingPrintReceipts
  {//GEN-HEADEREND:event_accountingPrintReceipts
    try
    {
      String direction = "";
      String cashierUser = "" + jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("UserName"));

      if ((JButton) evt.getSource() == jButton16)
      {
        direction = "IN";
      }
      else if ((JButton) evt.getSource() == jButton17)
      {
        direction = "OUT";
      }

      String l = "Select '" + dms.DMSApp.getApplication().getFullUsername() + "' AS UserName,"
        + "Customer,DateNTime,Reason,Cash,[Check],Charge,Amount,Direction "
        + "From CashierCurrentDrawTable "
        + "Where Direction = '" + direction + "' "
        + "AND UserName = '" + cashierUser + "'";

      ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select ReportXML From ReportTable Where ReportName = 'CashierCollections'");
      if (rs.next())
      {
        InputStream formXML = rs.getBlob("ReportXML").getBinaryStream();
        rs.getStatement().close();
        rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(l);
        JRResultSetDataSource rsds = new JRResultSetDataSource(rs);
        JasperPrint jp = JasperFillManager.fillReport(formXML, null, rsds);
        JRViewer viewer = new JRViewer(jp);
        viewer.setFitWidthZoomRatio();
        viewer.setVisible(true);
        printPreviewPanel.removeAll();
        printPreviewPanel.add(viewer);
        printPreviewPanel.updateUI();
        rs.getStatement().close();
        dms.DMSApp.getApplication().show(printPreview);
      }
    }
    catch (Exception e)
    {
      dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_accountingPrintReceipts

  private void qbButtonsClicked(java.awt.event.ActionEvent evt)//GEN-FIRST:event_qbButtonsClicked
  {//GEN-HEADEREND:event_qbButtonsClicked
    if ((JButton) evt.getSource() == quickBooksUpdateButton)
    {
      if (quickBooksBatchTable.getRowCount() > 0)
      {
        try
        {
          JFileChooser jfc = new JFileChooser();
          jfc.setMultiSelectionEnabled(false);
          jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
          jfc.setFileFilter(new ExcelFileFilter());
          jfc.setApproveButtonText("SAVE");
          jfc.setAcceptAllFileFilterUsed(false);

          if (!lastSelectedLocation.isEmpty())
          {
            File newFile = new File(lastSelectedLocation);
            jfc.setCurrentDirectory(newFile);
            jfc.setSelectedFile(newFile);
          }
          else
          {
//            File newFile = new File(dms.DMSApp.getApplication().getDataLocation()+"\\QuickBooksExport.xls");
//            if(newFile.exists())
//              jfc.setCurrentDirectory(newFile);
//            jfc.setSelectedFile(newFile);
          }

          if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
          {
            DefaultTableModel aModel = (DefaultTableModel) quickBooksBatchTable.getModel();
            if (aModel.getRowCount() > 0)
            {
              for (int i = aModel.getRowCount(); i > 0; i--)
              {
                aModel.removeRow(i - 1);
              }
            }

            ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select Number,QuickBooksAccount,TransactionType,"
              + "Description,convert(decimal(16,2),Debit),convert(decimal(16,2),Credit),LotName,convert(varchar,TransactionDate,101),VendorName "
              + "From QuickBooksExportTable "
              + "Order By TransactionDate ASC");
            ResultSetMetaData rsmd = rs.getMetaData();
            int colNo = rsmd.getColumnCount();
            while (rs.next())
            {
              Object[] values = new Object[colNo];
              for (int i = 0; i < colNo; i++)
              {
                values[i] = rs.getObject(i + 1);
              }

              aModel.addRow(values);
            }

            WritableWorkbook workbook;

            dms.DMSApp.setSystemBusy(true);
            File workbookFile = jfc.getSelectedFile();

            lastSelectedLocation = workbookFile.getAbsolutePath();

            if (workbookFile.isDirectory())
            {
              File newWorkbookFile = new File(workbookFile.getAbsolutePath() + "\\QuickBooksExport.xls");
              WorkbookSettings wbSettings = new WorkbookSettings();

              wbSettings.setLocale(new Locale("en", "EN"));

              workbook = Workbook.createWorkbook(newWorkbookFile, wbSettings);

              for (int f = 0; f < monthsOfYear.length; f++)
              {
                workbook.createSheet(monthsOfYear[f], f);
                monthsOfYearSheets[f] = workbook.getSheet(f);
                currentLineOnSheet[f] = 0;
              }
            }
            else
            {
              if (workbookFile.exists())
              {
                workbook = Workbook.createWorkbook(workbookFile);
              }
              else
              {
                WorkbookSettings wbSettings = new WorkbookSettings();
                wbSettings.setLocale(new Locale("en", "EN"));
                workbook = Workbook.createWorkbook(workbookFile, wbSettings);
              }

              for (int f = 0; f < monthsOfYear.length; f++)
              {
                workbook.createSheet(monthsOfYear[f], f);
                monthsOfYearSheets[f] = workbook.getSheet(f);
                currentLineOnSheet[f] = 0;
              }
            }

            for (int f = 0; f < monthsOfYearSheets.length; f++)
            {
              for (int j = 0; j < quickBooksBatchTable.getRowCount() + 1; j++)
              {
                for (int k = 0; k < quickBooksBatchTable.getColumnCount(); k++)
                {
                  Label l1 = new Label(k, j, "");
                  monthsOfYearSheets[f].addCell(l1);
                }
              }
            }

            for (int f = 0; f < monthsOfYearSheets.length; f++)
            {
              for (int i = 0; i < quickBooksBatchTable.getColumnCount(); i++)
              {
                Label l = new Label(i, 0, quickBooksBatchTable.getColumnName(i));
                monthsOfYearSheets[f].addCell(l);
              }
            }

            for (int j = 0; j < quickBooksBatchTable.getRowCount(); j++)
            {
              String dateField = ((String) quickBooksBatchTable.getValueAt(j, 7));
              int monthNumber = Integer.parseInt(dateField.substring(0, dateField.indexOf('/')));

              currentLineOnSheet[monthNumber - 1] += 1;
              for (int k = 0; k < quickBooksBatchTable.getColumnCount(); k++)
              {
                Label l1 = new Label(k, currentLineOnSheet[monthNumber - 1], "" + quickBooksBatchTable.getValueAt(j, k));
                monthsOfYearSheets[monthNumber - 1].addCell(l1);
              }
            }

            workbook.write();
            workbook.close();

            //new dms.util.QuickBooksUtils(this).clearQuickBooksExports();
            dms.DMSApp.setSystemBusy(false);
            dms.DMSApp.displayMessage(this, "Export completed successfully.", JOptionPane.INFORMATION_MESSAGE);
          }
        }
        catch (Exception e)
        {
          dms.DMSApp.setSystemBusy(false);
          dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
        }
      }
      else
      {
        dms.DMSApp.displayMessage(this, "No values in the preview table to export. Please try again.", JOptionPane.WARNING_MESSAGE);
      }
    }
    else if ((JButton) evt.getSource() == quickBooksRefreshButton)
    {
      try
      {
        DefaultTableModel aModel = (DefaultTableModel) quickBooksBatchTable.getModel();
        if (aModel.getRowCount() > 0)
        {
          for (int i = aModel.getRowCount(); i > 0; i--)
          {
            aModel.removeRow(i - 1);
          }
        }

        ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet("Select Number,QuickBooksAccount,TransactionType,"
          + "Description,convert(decimal(16,2),Debit),convert(decimal(16,2),Credit),LotName,convert(varchar,TransactionDate,101),VendorName "
          + "From QuickBooksExportTable");
        ResultSetMetaData rsmd = rs.getMetaData();
        int colNo = rsmd.getColumnCount();
        while (rs.next())
        {
          Object[] values = new Object[colNo];
          for (int i = 0; i < colNo; i++)
          {
            values[i] = rs.getObject(i + 1);
          }

          aModel.addRow(values);
        }
      }
      catch (Exception e)
      {
        dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
      }
    }
  }//GEN-LAST:event_qbButtonsClicked

  private void COAVisible(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_COAVisible
  {//GEN-HEADEREND:event_COAVisible
    /*
     if (runOnce1) {
     runOnce1 = false;
     Calendar c = Calendar.getInstance();
     if (jDateChooser9.getDate() == null) {
     jDateChooser9.setDate(c.getTime());
     }
     if (jDateChooser7.getDate() == null) {
     c.add(Calendar.DATE, 1 - c.get(Calendar.DATE));
     jDateChooser7.setDate(c.getTime());
     }

     coaDateFilter();
     }
     */
  }//GEN-LAST:event_COAVisible

  private void coaPopupButtonsClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_coaPopupButtonsClicked
  {//GEN-HEADEREND:event_coaPopupButtonsClicked
  }//GEN-LAST:event_coaPopupButtonsClicked

  private void coaPopupDescTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_coaPopupDescTyped
  {//GEN-HEADEREND:event_coaPopupDescTyped
    /*
     JTextField jt = (JTextField)evt.getSource();
     int cp = jt.getCaretPosition();

     if(jt.getText().length() == 1)
     jt.setText(jt.getText().toUpperCase().replace("-", " "));
     else if(jt.getText().length() > 1)
     jt.setText(jt.getText().substring(0, 1).toUpperCase().replace("-", " ") + jt.getText().substring(1).toLowerCase().replace("-", " "));

     jt.setCaretPosition(cp);

     if(jt.getText().length() > jt.getColumns())
     {
     jt.setText(jt.getText().substring(0, jt.getColumns()));
     jt.setCaretPosition(jt.getText().length());
     }
     */
  }//GEN-LAST:event_coaPopupDescTyped

    private void apBillsPanelvendorsPanelShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_apBillsPanelvendorsPanelShown
    }//GEN-LAST:event_apBillsPanelvendorsPanelShown

    private void jideTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jideTabbedPane2MouseClicked
    }//GEN-LAST:event_jideTabbedPane2MouseClicked

        private void cashierBatchOutaccountingPrintReceipts(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cashierBatchOutaccountingPrintReceipts
    try
    {
      String cashierUser = "" + jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("UserName"));
      String sqlQuery = "Select TransactionNumber,DateNTime,Customer,Reason,Amount,"
        + "Cash,[Check],Charge,Direction "
        + "From CashierCurrentDrawTable A "
        + "Where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
        + "AND UserName = '" + cashierUser + "' ";

      double chargeTotalAmount = 0.00;
      double checkTotalAmount = 0.00;
      double cashTotalAmount = 0.00;

      try
      {
        DefaultTableModel aModel = (DefaultTableModel) jTable4.getModel();
        AccountingUtil.clearTableModel(aModel);
        DefaultTableModel aModel1 = (DefaultTableModel) jTable5.getModel();
        AccountingUtil.clearTableModel(aModel1);
        DefaultTableModel aModel2 = (DefaultTableModel) jTable6.getModel();
        AccountingUtil.clearTableModel(aModel2);

        ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sqlQuery);
        while (rs.next())
        {
          Object[] values = new Object[5];
          values[0] = rs.getInt("TransactionNumber");
          values[1] = rs.getDate("DateNTime");
          values[2] = rs.getString("Customer");
          values[3] = rs.getString("Reason");

          if (rs.getString("Direction").equalsIgnoreCase("IN"))
          {
            if (rs.getDouble("Cash") != 0.00)
            {
              values[4] = rs.getDouble("Cash");
              cashTotalAmount += ((Double) values[4]).doubleValue();
              aModel2.addRow(values);
            }

            if (rs.getDouble("Check") != 0.00)
            {
              values[4] = rs.getDouble("Check");
              checkTotalAmount += ((Double) values[4]).doubleValue();
              aModel1.addRow(values);
            }

            if (rs.getDouble("Charge") != 0.00)
            {
              values[4] = rs.getDouble("Charge");
              chargeTotalAmount += ((Double) values[4]).doubleValue();
              aModel.addRow(values);
            }
          }
          else
          {
            values[4] = -1 * rs.getDouble("Amount");
            cashTotalAmount += ((Double) values[4]).doubleValue();
            aModel2.addRow(values);
          }
        }

        chargeTotal.setText(Double.toString(chargeTotalAmount));
        checksTotal.setText(Double.toString(checkTotalAmount));
        cashTotal.setText(Double.toString(cashTotalAmount));

        dms.DMSApp.getApplication().show(batchOutDialog);

      }
      catch (SQLException sQLException)
      {
        sQLException.printStackTrace();
      }
    }
    catch (Exception e)
    {
      dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
    }

        }//GEN-LAST:event_cashierBatchOutaccountingPrintReceipts

        private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
    // TODO add your handling code here:
    String batch;
    String accountVal;
    String amountVal;
    String customer;
    String date;
    String sqlQuery;
    int rowsCount = jTable4.getRowCount();

    for (int j = 0; j <= rowsCount - 1; j++)
    {

      batch = jTable4.getValueAt(j, jTable4.getColumnModel().getColumnIndex("Batch")).toString();
      accountVal = jTable4.getValueAt(j, jTable4.getColumnModel().getColumnIndex("Description")).toString();
      amountVal = jTable4.getValueAt(j, jTable4.getColumnModel().getColumnIndex("Amount")).toString();
      customer = jTable4.getValueAt(j, jTable4.getColumnModel().getColumnIndex("Customer")).toString();
      date = jTable4.getValueAt(j, jTable4.getColumnModel().getColumnIndex("Date")).toString();

      sqlQuery = "SELECT * FROM Accounting";
      System.out.println("batch: " + batch + " account: " + accountVal + " amount: " + amountVal + " custmer: " + customer + " date: " + date);

    }

        }//GEN-LAST:event_jButton2MouseClicked

  // Method to check Number Field
  public static boolean isNumeric(String s)
  {
    //System.out.println("isNumeric..");
    String pattern = "[0-9.]+";
    if (s.matches(pattern))
    {
      return true;
    }
    return false;
  }
  // Method to Display Numeric

  public static boolean displayNumeric(String s)
  {
    //System.out.println("displayNumeric..");
    String pattern = "[0-9.,]+";
    if (s.matches(pattern))
    {
      return true;
    }
    return false;
  }
  // Method to check Alphabets Field

  public boolean isAlphabets(String s)
  {
    //System.out.println("isAlphaNumeric..");
    String pattern = "^[a-zA-Z]*$";
    if (s.matches(pattern))
    {
      return true;
    }
    return false;
  }

  public String formatAmountForDisplay(String amount)
  {
    //System.out.println("Inside formatAmountForDisplay()");
    String initialAmountForDisplay = amount;    // value entered by user
    String finalAmountForDisplay = "0.00";
    String beforeComma = null;
    String afterComma = null;
    String decimalAmount = null;
    String amountAfterDecimalPoint = null;
    int length = 0;
    //System.out.println("initailAmountForDisplay := " + initialAmountForDisplay);
    length = initialAmountForDisplay.length();
    //System.out.println("length for value := " + length);
    if (!initialAmountForDisplay.contains("."))
    {
      if (length <= 3)
      {             // value {1 || 10 || 100}
        finalAmountForDisplay = initialAmountForDisplay.concat(".00");
        //System.out.println("finalAmountForDisplay := " + finalAmountForDisplay);
      }
      if (length > 3)
      {
        if (length == 4)
        {            // value {1000 - 1,000.00}
          beforeComma = initialAmountForDisplay.substring(0, 1);
          afterComma = initialAmountForDisplay.substring(1, length);
        }
        if (length == 5)
        {            // value {10000 - 10,000.00}
          beforeComma = initialAmountForDisplay.substring(0, 2);
          afterComma = initialAmountForDisplay.substring(2, length);
        }
        if (length == 6)
        {            // value {100000 - 100,000.00}
          beforeComma = initialAmountForDisplay.substring(0, 3);
          afterComma = initialAmountForDisplay.substring(3, length);
        }
        if (length == 7)
        {            // value {1000000 - 100,0000.00}
          beforeComma = initialAmountForDisplay.substring(0, 4);
          afterComma = initialAmountForDisplay.substring(4, length);
        }
        if (!initialAmountForDisplay.contains(","))
        {
          finalAmountForDisplay = beforeComma.concat(",") + afterComma.concat(".00");
        }
        else
        {
          finalAmountForDisplay = beforeComma + afterComma.concat(".00");
        }
        //System.out.println("finalAmountForDisplay 1:= " + finalAmountForDisplay);
      }
    }
    else
    {                  // If user entered decimal value
      decimalAmount = initialAmountForDisplay.substring(0, initialAmountForDisplay.indexOf("."));
      //System.out.println("decimalAmount := " + decimalAmount);
      amountAfterDecimalPoint = initialAmountForDisplay.substring(initialAmountForDisplay.indexOf("."), length);
      //System.out.println("amountAfterDecimalPoint := " + amountAfterDecimalPoint);
      length = decimalAmount.length();
      //System.out.println("length of decimal val := " + length);
      if (length > 3)
      {
        if (length == 4)
        {            // value {1000.45 - 1,000.45}
          beforeComma = initialAmountForDisplay.substring(0, 1);
          afterComma = initialAmountForDisplay.substring(1, length);
        }
        if (length == 5)
        {            // value {10000.45 - 10,000.45}
          beforeComma = initialAmountForDisplay.substring(0, 2);
          afterComma = initialAmountForDisplay.substring(2, length);
        }
        if (length == 6)
        {            // value {100000.45 - 100,000.45}
          beforeComma = initialAmountForDisplay.substring(0, 3);
          afterComma = initialAmountForDisplay.substring(3, length);
        }
        if (length == 7)
        {            // value {1000000.45 - 100,0000.45}
          beforeComma = initialAmountForDisplay.substring(0, 4);
          afterComma = initialAmountForDisplay.substring(4, length);
        }
        if (!decimalAmount.contains(","))
        {
          finalAmountForDisplay = beforeComma.concat(",") + afterComma.concat(amountAfterDecimalPoint);
        }
        else
        {
          finalAmountForDisplay = beforeComma + afterComma.concat(amountAfterDecimalPoint);
        }
        //System.out.println("finalAmountForDisplay 2:= " + finalAmountForDisplay);
      }
      else
      {
        finalAmountForDisplay = decimalAmount + amountAfterDecimalPoint;
        //System.out.println("finalAmountForDisplay for decimal case := " + finalAmountForDisplay);
      }
    }
    return finalAmountForDisplay;
  }

  public synchronized void resetWindow()
  {
    if (!dms.DMSApp.getApplication().getCurrentlotName().equals(" "))
    {
      isReady = false;
      clearList("Collect");
      clearList("Pay");
      clearAccountingList();
      makeList("Collect", false);
      makeList("Pay", false);
      makeAccountingList();
      updateCurrentDraw("Collect");
      updateCurrentDraw("Pay");
      COAPanel.reloadCOA2();
      isReady = true;
    }

  }

  private void reloadCOA()
  {
    /*
     String sql = "SELECT AccountNumber,Description FROM AccountingCOATable "
     + "WHERE LotName = '" +dms.DMSApp.getApplication().getCurrentlotName() + "' "
     + "ORDER BY  AccountNumber ASC";
     ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

     //System.out.println(sql);

     */

    DefaultTableModel aModel = (DefaultTableModel) COAPanel.uICTable6.getModel();
    if (aModel.getRowCount() > 0)
    {
      for (int i = aModel.getRowCount(); i > 0; i--)
      {
        aModel.removeRow(i - 1);
      }
    }

    /*
     ResultSetMetaData rsmd = rs.getMetaData();
     int colNo = rsmd.getColumnCount();
     while (rs.next())
     {
     Object[] values = new Object[colNo];
     for (int i = 0; i < colNo; i++)
     {
     values[i] = rs.getObject(i + 1);
     }
     aModel.addRow(values);
     }
     rs.getStatement().close();

     */
    String[] accounts = AccountingUtil.getAllAccountsFull();
    if (accounts != null)
    {
      for (int i = 0; i < accounts.length; i++)
      {
        StringTokenizer tokens = new StringTokenizer(accounts[i], "-");
        int tokenCount = tokens.countTokens();
        Object[] values = new Object[tokenCount];
        for (int j = 0; j < tokenCount; j++)
        {
          values[j] = tokens.nextToken().trim();
        }
        aModel.addRow(values);
      }
    }

    //accounts = AccountingUtil.getAllAccountsNumberAndDesc();
        /*
     accounts = AccountingUtil.getAllAccountsFull();

     if (accounts != null) {
     journalsPanel.gpAccountField.removeAllItems();
     for (int j = 0; j < accounts.length; j++) {
     journalsPanel.gpAccountField.addItem(accounts[j]);
     }
     }
     */
  }

  public static void reloadCOA2()
  {
    try
    {

      String sql = "SELECT [AccountNumber], [Description], [Type], [isControlled], Series, "
        + "(SELECT CASE WHEN SUM(Debit+Credit) IS NULL THEN 0.00 ELSE "
        + "CAST(ROUND(SUM(Debit+Credit),2) AS NUMERIC(10,2)) END "
        + "FROM AccountingGLTable B WHERE B.AccountNumber = A.AccountNumber) AS Balance "
        + "FROM AccountingCOATable A "
        + "WHERE LotName = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
        + "ORDER BY Series ASC";

      //System.out.println(sql);
      int balanceColumn = AccountingUtil.getColumnByName(COAPanel.uICTable6, "Balance");

      ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(sql);

      DefaultTableModel aModel = (DefaultTableModel) COAPanel.uICTable6.getModel();
      AccountingUtil.clearTableModel(aModel);

      ResultSetMetaData rsmd = rs.getMetaData();
      int colNo = rsmd.getColumnCount();
      while (rs.next())
      {
        Object[] values = new Object[colNo];
        for (int i = 0; i < colNo; i++)
        {
          if (i == balanceColumn)
          {
            values[i] = AccountingUtil.formatAmountForDisplay(rs.getString("Balance").toString());
          }
          else
          {
            values[i] = rs.getObject(i + 1);
          }
        }

        aModel.addRow(values);
      }
      rs.getStatement().close();
    }
    catch (SQLException ex)
    {
      Logger.getLogger(AccountingWindow.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  private synchronized void updateCurrentDraw(String type)
  {
    String query = null;
    String totalsQuery = null;
    DefaultTableModel dtm = null;
    JFormattedTextField cashSumField = null;
    JFormattedTextField checkSumField = null;
    JFormattedTextField chargeSumField = null;
    JFormattedTextField totalSumField = null;
    if (type.equalsIgnoreCase("Collect"))
    {
      dtm = (DefaultTableModel) shiftCollectTable.getModel();
      cashSumField = collectShiftCashCollectedField;
      checkSumField = collectShiftChecksCollectedField;
      chargeSumField = collectShiftChargeCollectedField;
      totalSumField = collectShiftTotalCollectedField;

      query = "Select Customer,Reason,CONVERT(decimal(16,2),Amount) From CashierCurrentDrawTable "
        + "Where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
        + "AND UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
        + "AND Direction = 'IN'";

      totalsQuery = "Select (select sum(Cash) from cashiercurrentdrawtable where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
        + "AND UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
        + "AND Direction = 'IN') AS CashSum,"
        + "(select sum([Check]) from cashiercurrentdrawtable where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
        + "AND UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
        + "AND Direction = 'IN') as CheckSum,"
        + "(select sum(Charge) from cashiercurrentdrawtable where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
        + "AND UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
        + "AND Direction = 'IN') as ChargeSum";
    }
    else if (type.equalsIgnoreCase("Pay"))
    {
      dtm = (DefaultTableModel) shiftCollectTable1.getModel();
      totalSumField = jFormattedTextField10;

      query = "Select Customer,Reason,CONVERT(decimal(16,2),Amount) From CashierCurrentDrawTable "
        + "Where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
        + "AND UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
        + "AND Direction = 'OUT'";

      totalsQuery = "Select (select sum(Cash) from cashiercurrentdrawtable where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
        + "AND UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
        + "AND Direction = 'OUT') AS CashSum,"
        + "(select sum([Check]) from cashiercurrentdrawtable where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
        + "AND UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
        + "AND Direction = 'OUT') as CheckSum,"
        + "(select sum(Charge) from cashiercurrentdrawtable where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
        + "AND UserName = '" + dms.DMSApp.getApplication().getUser() + "' "
        + "AND Direction = 'OUT') as ChargeSum";
    }

    if (dtm != null)
    {
      if (dtm.getRowCount() > 0)
      {
        for (int i = dtm.getRowCount(); i > 0; i--)
        {
          dtm.removeRow(i - 1);
        }
      }
    }

    try
    {
      ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(query);
      ResultSetMetaData rsmd = rs.getMetaData();
      int colNo = rsmd.getColumnCount();
      while (rs.next())
      {
        Object[] values = new Object[colNo];
        for (int i = 0; i < colNo; i++)
        {
          values[i] = rs.getObject(i + 1);
        }

        dtm.addRow(values);
      }

      rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(totalsQuery);
      if (rs.next())
      {
        if (cashSumField != null)
        {
          cashSumField.setValue(rs.getDouble("CashSum"));
        }
        if (checkSumField != null)
        {
          checkSumField.setValue(rs.getDouble("CheckSum"));
        }
        if (chargeSumField != null)
        {
          chargeSumField.setValue(rs.getDouble("ChargeSum"));
        }
        if (totalSumField != null)
        {
          totalSumField.setValue(rs.getDouble("CashSum") + rs.getDouble("CheckSum") + rs.getDouble("ChargeSum"));
        }
        rs.getStatement().close();
      }
    }
    catch (Exception ep)
    {
      dms.DMSApp.displayMessage(this, ep.getMessage(), JOptionPane.ERROR_MESSAGE);
    }
  }

  private synchronized void updateAccounting()
  {
    String collectQuery = null;
    String payQuery = null;
    String totalsQuery = null;
    DefaultTableModel collectTableModal = (DefaultTableModel) uICTable4.getModel();
    DefaultTableModel payTableModal = (DefaultTableModel) uICTable5.getModel();
    String cashierUser = "" + jTable3.getValueAt(jTable3.getSelectedRow(), jTable3.getColumnModel().getColumnIndex("UserName"));

    collectQuery = "Select TransactionNumber,convert(varchar,DateNTime,101),Customer,Reason,CONVERT(decimal(16,2),Amount) From CashierCurrentDrawTable "
      + "Where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
      + "AND UserName = '" + cashierUser + "' "
      + "AND Direction = 'IN'";

    payQuery = "Select TransactionNumber,convert(varchar,DateNTime,101),Customer,Reason,CONVERT(decimal(16,2),Amount) From CashierCurrentDrawTable "
      + "Where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
      + "AND UserName = '" + cashierUser + "' "
      + "AND Direction = 'OUT'";

    totalsQuery = "Select (select sum(Cash+[Check]+Charge) from cashiercurrentdrawtable where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
      + "AND UserName = '" + cashierUser + "' "
      + "AND Direction = 'IN') AS TCollected,"
      + "(select sum(amount) from cashiercurrentdrawtable where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
      + "AND UserName = '" + cashierUser + "' "
      + "AND Direction = 'OUT') as TPayout ";

    if (collectTableModal != null)
    {
      if (collectTableModal.getRowCount() > 0)
      {
        for (int i = collectTableModal.getRowCount(); i > 0; i--)
        {
          collectTableModal.removeRow(i - 1);
        }
      }
    }

    if (payTableModal != null)
    {
      if (payTableModal.getRowCount() > 0)
      {
        for (int i = payTableModal.getRowCount(); i > 0; i--)
        {
          payTableModal.removeRow(i - 1);
        }
      }
    }

    try
    {
      ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(collectQuery);
      ResultSetMetaData rsmd = rs.getMetaData();
      int colNo = rsmd.getColumnCount();
      while (rs.next())
      {
        Object[] values = new Object[colNo];
        for (int i = 0; i < colNo; i++)
        {
          values[i] = rs.getObject(i + 1);
        }

        collectTableModal.addRow(values);
      }
      rs.getStatement().close();

      rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(payQuery);
      rsmd = rs.getMetaData();
      colNo = rsmd.getColumnCount();
      while (rs.next())
      {
        Object[] values = new Object[colNo];
        for (int i = 0; i < colNo; i++)
        {
          values[i] = rs.getObject(i + 1);
        }

        payTableModal.addRow(values);
      }
      rs.getStatement().close();

      rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(totalsQuery);
      if (rs.next())
      {
        jFormattedTextField5.setValue(rs.getDouble("TCollected"));
        jFormattedTextField6.setValue(rs.getDouble("TPayout"));
      }
      else
      {
        jFormattedTextField5.setValue(0.00);
        jFormattedTextField6.setValue(0.00);
      }
      rs.getStatement().close();
    }
    catch (Exception ep)
    {
      dms.DMSApp.displayMessage(this, ep.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
    }
  }

  private void clearList(String type)
  {
    DefaultTableModel aModel = null;
    DefaultTableModel a1Model = null;

    if (type.equalsIgnoreCase("Collect"))
    {
      if (collectDealsButton.isSelected())
      {
        aModel = (DefaultTableModel) dealsCollectTable.getModel();
        a1Model = (DefaultTableModel) uICTable1.getModel();
      }
      else if (collectServiceButton.isSelected())
      {
        aModel = (DefaultTableModel) serviceCollectTable.getModel();
        a1Model = (DefaultTableModel) uICTable2.getModel();
      }
      else if (collectOtherButton.isSelected())
      {
        aModel = (DefaultTableModel) uICTable3.getModel();
      }
    }

    if (aModel != null)
    {
      if (aModel.getRowCount() > 0)
      {
        for (int i = aModel.getRowCount(); i > 0; i--)
        {
          aModel.removeRow(i - 1);
        }
      }
    }

    if (a1Model != null)
    {
      if (a1Model.getRowCount() > 0)
      {
        for (int i = a1Model.getRowCount(); i > 0; i--)
        {
          a1Model.removeRow(i - 1);
        }
      }
    }
  }

  private void makeList(String type, boolean isSearching)
  {
    DefaultTableModel aModel = null;
    String query = null;

    if (type.equalsIgnoreCase("Collect"))
    {
      if (collectDealsButton.isSelected())
      {
        aModel = (DefaultTableModel) dealsCollectTable.getModel();
        query = "Select A.AccountNumber,B.FirstName+' '+B.LastName, A.FinanceManager,A.SalesManager,convert(varchar,A.solddate,101),C.Year+'-'+C.Make+'-'+C.Model+'-'+C.Trim "
          + "From DealsTable A "
          + "LEFT JOIN CustomerTable B ON B.CustomerCode = A.BuyerCode "
          + "LEFT JOIN InventoryTable C ON C.StockNumber = A.StockNumber "
          + "Where (A.Status NOT IN ('Deleted','Paid') "
          + "AND A.LotName = '" + dms.DMSApp.getApplication().getCurrentlotName() + "') ";

        if (isSearching)
        {
          query = query + "AND (A.AccountNumber like '" + cashierCollectSearch.getText() + "%' "
            + "or RTRIM(B.firstname) like '" + cashierCollectSearch.getText() + "%' "
            + "or RTRIM(B.lastname) like '" + cashierCollectSearch.getText() + "%' "
            + "or RTRIM(B.firstname)+' '+RTRIM(B.lastname) like '" + cashierCollectSearch.getText() + "%' "
            + "or convert(varchar,A.solddate,101) like '" + cashierCollectSearch.getText() + "%' "
            + "or A.financemanager like '" + cashierCollectSearch.getText() + "%' "
            + "or A.salesmanager like '" + cashierCollectSearch.getText() + "%')";
        }
      }
      else if (collectServiceButton.isSelected())
      {

        aModel = (DefaultTableModel) serviceCollectTable.getModel();
        query = "Select A.InvoiceNumber,B.FirstName+' '+B.LastName, A.Advisor,convert(varchar,A.ROClosed,101),A.VehicleYear+'-'+A.VehicleMake+'-'+A.VehicleModel+'-'+A.VehicleTrim "
          + "From ServiceInvoiceTable A "
          + "LEFT JOIN CustomerTable B ON B.CustomerCode = A.CustomerCode "
          + "Where (A.Status NOT IN ('Estimate','Void') "
          + "AND A.LotName = '" + dms.DMSApp.getApplication().getCurrentlotName() + "') "
          + "AND (Total - (Select Case When sum(cash+[check]+charge) IS NULL Then 0.00 Else sum(cash+[check]+charge) End from cashiertable where "
          + "lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' AND AccountNumber = A.InvoiceNumber "
          + "AND TransactionType = 'Service' AND Reason in ('Invoice Payment','Invoice Deposit'))) > 0.01 "
          + "AND InHouse = 'False' ";

        if (isSearching)
        {
          query = query + "AND (A.InvoiceNumber like '" + cashierCollectSearch.getText() + "%' "
            + "or RTRIM(B.firstname) like '" + cashierCollectSearch.getText() + "%' "
            + "or RTRIM(B.lastname) like '" + cashierCollectSearch.getText() + "%' "
            + "or RTRIM(B.firstname)+' '+RTRIM(B.lastname) like '" + cashierCollectSearch.getText() + "%' "
            + "or convert(varchar,A.roclosed,101) like '" + cashierCollectSearch.getText() + "%' "
            + "or A.advisor like '" + cashierCollectSearch.getText() + "%')";
        }
      }
      else if (collectOtherButton.isSelected())
      {

        aModel = (DefaultTableModel) uICTable3.getModel();
        query = "Select TransactionNumber,UserName,convert(varchar,DateNTime,101),Reason,CONVERT(decimal(16,2),(cash+[check]+charge)) "
          + "from cashiertable where "
          + "lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' AND Direction = 'IN' "
          + "AND TransactionType = 'Other' ";

        if (isSearching)
        {
          query = query + "AND (A.TransactionNumber like '" + cashierCollectSearch.getText() + "%' "
            + "or Reason like '%" + cashierCollectSearch.getText() + "%' "
            + "or Cash like '" + cashierCollectSearch.getText() + "%' "
            + "or [Check] like '" + cashierCollectSearch.getText() + "%' "
            + "or Charge like '" + cashierCollectSearch.getText() + "%' "
            + "or Username like '" + cashierCollectSearch.getText() + "%')";
        }
      }
    }

    if (aModel != null)
    {
      try
      {
        if (query != null)
        {
          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(query);
          ResultSetMetaData rsmd = rs.getMetaData();
          int colNo = rsmd.getColumnCount();
          while (rs.next())
          {
            Object[] values = new Object[colNo];
            for (int i = 0; i < colNo; i++)
            {
              values[i] = rs.getObject(i + 1);
            }

            aModel.addRow(values);
          }
          itemsLabel.setText("" + aModel.getRowCount());
        }
      }
      catch (Exception e)
      {
        dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
      }
    }
  }

  private void clearAccountingList()
  {
    DefaultTableModel aModel = (DefaultTableModel) jTable3.getModel();

    if (aModel != null)
    {
      if (aModel.getRowCount() > 0)
      {
        for (int i = aModel.getRowCount(); i > 0; i--)
        {
          aModel.removeRow(i - 1);
        }
      }
    }
  }

  private void makeAccountingList()
  {
    DefaultTableModel aModel = (DefaultTableModel) jTable3.getModel();
    String query = "Select UserName,(Select Firstname+' '+Lastname From DMSData..UsersTable B Where B.Username = A.Username),"
      + "CONVERT(decimal(16,2),(select sum(Cash) from CashierCurrentDrawTable where lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' and username = A.Username and direction = 'In')-(select case when sum(Cash) is not null then sum(Cash) else 0.00 end from CashierCurrentDrawTable where lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' and username = A.Username and direction = 'Out')),"
      + "CONVERT(decimal(16,2),(select sum([Check]) from CashierCurrentDrawTable where lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' and username = A.Username and direction = 'In')-(select case when sum([Check]) is not null then sum([Check]) else 0.00 end from CashierCurrentDrawTable where lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' and username = A.Username and direction = 'Out')),"
      + "CONVERT(decimal(16,2),(select sum(Charge) from CashierCurrentDrawTable where lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' and username = A.Username and direction = 'In')-(select case when sum(Charge) is not null then sum(Charge) else 0.00 end from CashierCurrentDrawTable where lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' and username = A.Username and direction = 'Out')),"
      + "CONVERT(decimal(16,2),(select sum(Amount) from CashierCurrentDrawTable where lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' and username = A.Username and direction = 'In')-(select case when sum(Amount) is not null then sum(Amount) else 0.00 end from CashierCurrentDrawTable where lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' and username = A.Username and direction = 'Out')) "
      + "From CashierCurrentDrawTable A "
      + "Where Lotname = '" + dms.DMSApp.getApplication().getCurrentlotName() + "' "
      + "Group By UserName";

    if (aModel != null)
    {
      try
      {
        if (query != null)
        {
          ResultSet rs = dms.DMSApp.getApplication().getDBConnection().getResultSet(query);
          ResultSetMetaData rsmd = rs.getMetaData();
          int colNo = rsmd.getColumnCount();
          while (rs.next())
          {
            Object[] values = new Object[colNo];
            for (int i = 0; i < colNo; i++)
            {
              values[i] = rs.getObject(i + 1);
            }

            aModel.addRow(values);
          }
        }
      }
      catch (Exception e)
      {
        dms.DMSApp.displayMessage(this, e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
      }
    }
  }

  private class ExcelFileFilter extends javax.swing.filechooser.FileFilter
  {

    @Override
    public boolean accept(File file)
    {
      String name = file.getName().toLowerCase();
      if (file.isDirectory())
      {
        return true;
      }
      else
      {
        return (name.endsWith(".xls") || name.endsWith(".XLS"));
      }
    }

    @Override
    public String getDescription()
    {
      return "Excel 2003 ( *.xls )";
    }
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JFormattedTextField accountingAmountField;
  private javax.swing.JFormattedTextField accountingAmountField1;
  private javax.swing.JTextArea accountingCommentField;
  private javax.swing.JDialog accountingPopup;
  private javax.swing.JPanel apBillsPanel;
  private javax.swing.JDialog assignCollectionPopup;
  private javax.swing.JDialog batchOutDialog;
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.ButtonGroup buttonGroup2;
  private javax.swing.ButtonGroup buttonGroup3;
  private javax.swing.ButtonGroup buttonGroup4;
  private javax.swing.ButtonGroup buttonGroup5;
  private javax.swing.ButtonGroup buttonGroup6;
  private javax.swing.ButtonGroup buttonGroup7;
  private javax.swing.ButtonGroup buttonGroup8;
  private javax.swing.JTextField cashTotal;
  private javax.swing.JButton cashierBatchOut;
  private javax.swing.JButton cashierButton3;
  private javax.swing.JTextField cashierCollectSearch;
  private javax.swing.JTextField chargeTotal;
  private javax.swing.JTextField checksTotal;
  private javax.swing.JFormattedTextField coaAccountField;
  private javax.swing.JDialog coaPopup;
  private javax.swing.JButton coaPopupCancelButton;
  private javax.swing.JButton coaPopupOkButton;
  private javax.swing.JComboBox coaTypeField;
  private javax.swing.JFormattedTextField collectCashField;
  private javax.swing.JFormattedTextField collectChargeField;
  private javax.swing.JFormattedTextField collectCheckField;
  private javax.swing.JRadioButton collectDealsButton;
  private javax.swing.JRadioButton collectOtherButton;
  private javax.swing.JButton collectPopupCancelButton;
  private javax.swing.JButton collectPopupOkButton;
  private javax.swing.JComboBox collectReasonDD;
  private javax.swing.JTextArea collectReasonField;
  private javax.swing.JLabel collectReasonLabel;
  private javax.swing.JLabel collectReasonLabel1;
  private javax.swing.JPanel collectReasonPanel;
  private javax.swing.JRadioButton collectServiceButton;
  private javax.swing.JFormattedTextField collectShiftCashCollectedField;
  private javax.swing.JFormattedTextField collectShiftChargeCollectedField;
  private javax.swing.JFormattedTextField collectShiftChecksCollectedField;
  private javax.swing.JFormattedTextField collectShiftTotalCollectedField;
  private javax.swing.JPanel collectViewsPanel;
  private javax.swing.JPanel collectionInfoPanel;
  private javax.swing.JDialog collectionsPopup;
  private javax.swing.JPanel dealViewsPanel;
  private javax.swing.JPanel dealViewsPanel1;
  private uic.widgets.UICTable dealsCollectTable;
  private javax.swing.JButton deleteDealButton;
  private javax.swing.JButton deleteDealButton2;
  private javax.swing.JButton deleteDealButton3;
  private javax.swing.JButton editDealButton;
  private javax.swing.JButton editDealButton2;
  private javax.swing.Box.Filler filler1;
  private javax.swing.Box.Filler filler2;
  private javax.swing.Box.Filler filler5;
  private javax.swing.Box.Filler filler6;
  private javax.swing.Box.Filler filler7;
  private javax.swing.Box.Filler filler9;
  private javax.swing.JButton giveOutAccounting;
  private javax.swing.JLabel itemsLabel;
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton10;
  private javax.swing.JButton jButton11;
  private javax.swing.JButton jButton12;
  private javax.swing.JButton jButton15;
  private javax.swing.JButton jButton16;
  private javax.swing.JButton jButton17;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JButton jButton32;
  private javax.swing.JButton jButton33;
  private javax.swing.JButton jButton34;
  private javax.swing.JButton jButton35;
  private javax.swing.JButton jButton4;
  private javax.swing.JButton jButton5;
  private javax.swing.JButton jButton6;
  private javax.swing.JButton jButton7;
  private javax.swing.JButton jButton8;
  private javax.swing.JButton jButton9;
  private javax.swing.JCheckBox jCheckBox1;
  private javax.swing.JCheckBox jCheckBox2;
  private javax.swing.JCheckBox jCheckBox3;
  private javax.swing.JCheckBox jCheckBox4;
  private javax.swing.JCheckBox jCheckBox5;
  private javax.swing.JComboBox jComboBox1;
  private javax.swing.JFormattedTextField jFormattedTextField1;
  private javax.swing.JFormattedTextField jFormattedTextField10;
  private javax.swing.JFormattedTextField jFormattedTextField18;
  private javax.swing.JFormattedTextField jFormattedTextField19;
  private javax.swing.JFormattedTextField jFormattedTextField23;
  private javax.swing.JFormattedTextField jFormattedTextField3;
  private javax.swing.JFormattedTextField jFormattedTextField5;
  private javax.swing.JFormattedTextField jFormattedTextField6;
  private javax.swing.JFormattedTextField jFormattedTextField7;
  private javax.swing.JFormattedTextField jFormattedTextField8;
  private javax.swing.JFormattedTextField jFormattedTextField9;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel100;
  private javax.swing.JLabel jLabel101;
  private javax.swing.JLabel jLabel106;
  private javax.swing.JLabel jLabel107;
  private javax.swing.JLabel jLabel109;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel110;
  private javax.swing.JLabel jLabel117;
  private javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel122;
  private javax.swing.JLabel jLabel13;
  private javax.swing.JLabel jLabel14;
  private javax.swing.JLabel jLabel15;
  private javax.swing.JLabel jLabel16;
  private javax.swing.JLabel jLabel17;
  private javax.swing.JLabel jLabel18;
  private javax.swing.JLabel jLabel19;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel20;
  private javax.swing.JLabel jLabel21;
  private javax.swing.JLabel jLabel22;
  private javax.swing.JLabel jLabel23;
  private javax.swing.JLabel jLabel24;
  private javax.swing.JLabel jLabel29;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel30;
  private javax.swing.JLabel jLabel31;
  private javax.swing.JLabel jLabel32;
  private javax.swing.JLabel jLabel33;
  private javax.swing.JLabel jLabel34;
  private javax.swing.JLabel jLabel38;
  private javax.swing.JLabel jLabel39;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel40;
  private javax.swing.JLabel jLabel41;
  private javax.swing.JLabel jLabel42;
  private javax.swing.JLabel jLabel43;
  private javax.swing.JLabel jLabel44;
  private javax.swing.JLabel jLabel45;
  private javax.swing.JLabel jLabel46;
  private javax.swing.JLabel jLabel47;
  private javax.swing.JLabel jLabel48;
  private javax.swing.JLabel jLabel49;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel53;
  private javax.swing.JLabel jLabel54;
  private javax.swing.JLabel jLabel55;
  private javax.swing.JLabel jLabel56;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel61;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JLabel jLabel98;
  private javax.swing.JLabel jLabel99;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel10;
  private javax.swing.JPanel jPanel100;
  private javax.swing.JPanel jPanel101;
  private javax.swing.JPanel jPanel102;
  private javax.swing.JPanel jPanel103;
  private javax.swing.JPanel jPanel104;
  private javax.swing.JPanel jPanel105;
  private javax.swing.JPanel jPanel106;
  private javax.swing.JPanel jPanel107;
  private javax.swing.JPanel jPanel108;
  private javax.swing.JPanel jPanel109;
  private javax.swing.JPanel jPanel11;
  private javax.swing.JPanel jPanel110;
  private javax.swing.JPanel jPanel111;
  private javax.swing.JPanel jPanel12;
  private javax.swing.JPanel jPanel13;
  private javax.swing.JPanel jPanel14;
  private javax.swing.JPanel jPanel15;
  private javax.swing.JPanel jPanel16;
  private javax.swing.JPanel jPanel17;
  private javax.swing.JPanel jPanel18;
  private javax.swing.JPanel jPanel19;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel20;
  private javax.swing.JPanel jPanel21;
  private javax.swing.JPanel jPanel22;
  private javax.swing.JPanel jPanel23;
  private javax.swing.JPanel jPanel24;
  private javax.swing.JPanel jPanel25;
  private javax.swing.JPanel jPanel26;
  private javax.swing.JPanel jPanel27;
  private javax.swing.JPanel jPanel28;
  private javax.swing.JPanel jPanel29;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel30;
  private javax.swing.JPanel jPanel31;
  private javax.swing.JPanel jPanel32;
  private javax.swing.JPanel jPanel33;
  private javax.swing.JPanel jPanel34;
  private javax.swing.JPanel jPanel35;
  private javax.swing.JPanel jPanel36;
  private javax.swing.JPanel jPanel37;
  private javax.swing.JPanel jPanel38;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel40;
  private javax.swing.JPanel jPanel41;
  private javax.swing.JPanel jPanel42;
  private javax.swing.JPanel jPanel43;
  private javax.swing.JPanel jPanel44;
  private javax.swing.JPanel jPanel45;
  private javax.swing.JPanel jPanel46;
  private javax.swing.JPanel jPanel47;
  private javax.swing.JPanel jPanel48;
  private javax.swing.JPanel jPanel49;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JPanel jPanel50;
  private javax.swing.JPanel jPanel51;
  private javax.swing.JPanel jPanel52;
  private javax.swing.JPanel jPanel53;
  private javax.swing.JPanel jPanel54;
  private javax.swing.JPanel jPanel55;
  private javax.swing.JPanel jPanel56;
  private javax.swing.JPanel jPanel57;
  private javax.swing.JPanel jPanel58;
  private javax.swing.JPanel jPanel59;
  private javax.swing.JPanel jPanel6;
  private javax.swing.JPanel jPanel60;
  private javax.swing.JPanel jPanel61;
  private javax.swing.JPanel jPanel62;
  private javax.swing.JPanel jPanel63;
  private javax.swing.JPanel jPanel65;
  private javax.swing.JPanel jPanel66;
  private javax.swing.JPanel jPanel67;
  private javax.swing.JPanel jPanel68;
  private javax.swing.JPanel jPanel69;
  private javax.swing.JPanel jPanel7;
  private javax.swing.JPanel jPanel70;
  private javax.swing.JPanel jPanel71;
  private javax.swing.JPanel jPanel72;
  private javax.swing.JPanel jPanel73;
  private javax.swing.JPanel jPanel74;
  private javax.swing.JPanel jPanel75;
  private javax.swing.JPanel jPanel76;
  private javax.swing.JPanel jPanel77;
  private javax.swing.JPanel jPanel78;
  private javax.swing.JPanel jPanel79;
  private javax.swing.JPanel jPanel8;
  private javax.swing.JPanel jPanel80;
  private javax.swing.JPanel jPanel81;
  private javax.swing.JPanel jPanel82;
  private javax.swing.JPanel jPanel83;
  private javax.swing.JPanel jPanel84;
  private javax.swing.JPanel jPanel85;
  private javax.swing.JPanel jPanel86;
  private javax.swing.JPanel jPanel87;
  private javax.swing.JPanel jPanel88;
  private javax.swing.JPanel jPanel89;
  private javax.swing.JPanel jPanel9;
  private javax.swing.JPanel jPanel90;
  private javax.swing.JPanel jPanel91;
  private javax.swing.JPanel jPanel92;
  private javax.swing.JPanel jPanel93;
  private javax.swing.JPanel jPanel94;
  private javax.swing.JPanel jPanel95;
  private javax.swing.JPanel jPanel96;
  private javax.swing.JPanel jPanel97;
  private javax.swing.JPanel jPanel98;
  private javax.swing.JPanel jPanel99;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane10;
  private javax.swing.JScrollPane jScrollPane11;
  private javax.swing.JScrollPane jScrollPane12;
  private javax.swing.JScrollPane jScrollPane13;
  private javax.swing.JScrollPane jScrollPane14;
  private javax.swing.JScrollPane jScrollPane15;
  private javax.swing.JScrollPane jScrollPane16;
  private javax.swing.JScrollPane jScrollPane17;
  private javax.swing.JScrollPane jScrollPane18;
  private javax.swing.JScrollPane jScrollPane19;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JScrollPane jScrollPane5;
  private javax.swing.JScrollPane jScrollPane6;
  private javax.swing.JScrollPane jScrollPane7;
  private javax.swing.JScrollPane jScrollPane8;
  private javax.swing.JScrollPane jScrollPane9;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JSplitPane jSplitPane5;
  private javax.swing.JTable jTable1;
  private javax.swing.JTable jTable2;
  private uic.widgets.UICTable jTable3;
  private javax.swing.JTable jTable4;
  private javax.swing.JTable jTable5;
  private javax.swing.JTable jTable6;
  private javax.swing.JTextField jTextField10;
  private javax.swing.JTextField jTextField11;
  private javax.swing.JTextField jTextField12;
  private javax.swing.JTextField jTextField13;
  private javax.swing.JTextField jTextField14;
  private javax.swing.JTextField jTextField15;
  private javax.swing.JTextField jTextField16;
  private javax.swing.JTextField jTextField17;
  private javax.swing.JTextField jTextField2;
  private javax.swing.JTextField jTextField4;
  private javax.swing.JTextField jTextField5;
  private javax.swing.JTextField jTextField6;
  private com.jidesoft.swing.JideTabbedPane jideTabbedPane1;
  private com.jidesoft.swing.JideTabbedPane jideTabbedPane2;
  private javax.swing.JButton newDealButton;
  private javax.swing.JButton newDealButton2;
  private javax.swing.JPanel otherViewsPanel;
  private javax.swing.JFormattedTextField payCashField;
  private javax.swing.JComboBox payReasonDD;
  private javax.swing.JTextArea payReasonField;
  private javax.swing.JLabel payReasonLabel;
  private javax.swing.JLabel payReasonLabel1;
  private javax.swing.JLabel payReasonLabel2;
  private javax.swing.JLabel payReasonLabel4;
  private javax.swing.JLabel payReasonLabel5;
  private javax.swing.JPanel payReasonPanel;
  private javax.swing.JPanel payReasonPanel1;
  private javax.swing.JPanel payViewsPanel1;
  private javax.swing.JDialog payoutPopup;
  private javax.swing.JButton printListButton;
  private javax.swing.JButton printListButton3;
  private javax.swing.JDialog printPreview;
  private javax.swing.JPanel printPreviewPanel;
  private javax.swing.JButton printShiftCollect;
  private javax.swing.JButton printShiftPay;
  private javax.swing.JPanel quickBooksBatchPanel;
  private javax.swing.JTable quickBooksBatchTable;
  private javax.swing.JPanel quickBooksButtonPanel;
  private javax.swing.JPanel quickBooksPanel;
  private javax.swing.JButton quickBooksRefreshButton;
  private javax.swing.JButton quickBooksUpdateButton;
  private javax.swing.JButton refreshAccounting;
  private javax.swing.JButton searchButton;
  private uic.widgets.UICTable serviceCollectTable;
  private javax.swing.JPanel serviceViewsPanel;
  private com.jidesoft.grid.CellSpanTable shiftCollectTable;
  private com.jidesoft.grid.CellSpanTable shiftCollectTable1;
  private javax.swing.JButton takeInAccounting;
  private javax.swing.JButton transferDealButton;
  private uic.widgets.UICTable uICTable1;
  private uic.widgets.UICTable uICTable2;
  private uic.widgets.UICTable uICTable3;
  private com.jidesoft.grid.CellSpanTable uICTable4;
  private com.jidesoft.grid.CellSpanTable uICTable5;
  // End of variables declaration//GEN-END:variables
  private boolean isReady = false;
  private static JFrame mainFrame;
  private int collectModal = 0;
  private int coaModal = 0;
  private int payModal = 0;
  private int accountingModal = 0;
  private String[] sql = null;
  private String currentAccount = "";
  Dimension cpopupSize = new Dimension(350, 325);
  Dimension apopupSize = new Dimension(335, 325);
  Dimension assignpopupSize = new Dimension(652, 322);
  Dimension coaPopupSize = new Dimension(480, 140);
  private String lastSelectedLocation = "";
  private String[] monthsOfYear =
  {
    "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
  };
  private WritableSheet[] monthsOfYearSheets = new WritableSheet[12];
  private int[] currentLineOnSheet = new int[12];
  private boolean runOnce = true;
  private boolean runOnce1 = true;
  private boolean runOnce2 = true;
  private static DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy 00:00:00");
  private static DateFormat dateFormat1 = new SimpleDateFormat("MM/dd/yyyy");
}
